[{"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\index.js":"1","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\App.js":"2","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js":"4","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js":"5","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js":"6","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js":"7","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js":"8","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js":"9","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js":"10","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js":"11","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js":"12","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js":"13","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js":"14","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js":"15","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js":"16","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js":"17","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js":"18","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js":"19","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js":"20","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js":"21","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js":"22","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js":"23","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js":"24","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js":"25","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js":"26","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js":"27","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js":"28","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js":"29","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js":"30","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js":"31","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js":"32","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js":"33","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js":"34","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js":"35","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js":"36","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js":"37","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js":"38","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditMissionMarker.js":"39","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js":"40","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js":"41","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js":"42","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\missionStorage.js":"43","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Missions.js":"44","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js":"45","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js":"46","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js":"47","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\GameMap.js":"48","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadCheckinStorage.js":"49"},{"size":517,"mtime":1609756958787,"results":"50","hashOfConfig":"51"},{"size":3865,"mtime":1609324530344,"results":"52","hashOfConfig":"51"},{"size":375,"mtime":1606999392896,"results":"53","hashOfConfig":"51"},{"size":651,"mtime":1608055777032,"results":"54","hashOfConfig":"51"},{"size":577,"mtime":1608055765360,"results":"55","hashOfConfig":"51"},{"size":336,"mtime":1608625691474,"results":"56","hashOfConfig":"51"},{"size":4186,"mtime":1608625691428,"results":"57","hashOfConfig":"51"},{"size":2740,"mtime":1609766389147,"results":"58","hashOfConfig":"51"},{"size":1728,"mtime":1609343720786,"results":"59","hashOfConfig":"51"},{"size":2068,"mtime":1609342897242,"results":"60","hashOfConfig":"51"},{"size":7220,"mtime":1609337105582,"results":"61","hashOfConfig":"51"},{"size":786,"mtime":1609324530352,"results":"62","hashOfConfig":"51"},{"size":5254,"mtime":1609159583851,"results":"63","hashOfConfig":"51"},{"size":694,"mtime":1608304779952,"results":"64","hashOfConfig":"51"},{"size":2484,"mtime":1608647817985,"results":"65","hashOfConfig":"51"},{"size":1067,"mtime":1608304779964,"results":"66","hashOfConfig":"51"},{"size":1719,"mtime":1609324530400,"results":"67","hashOfConfig":"51"},{"size":3630,"mtime":1609767936216,"results":"68","hashOfConfig":"51"},{"size":4935,"mtime":1609337984502,"results":"69","hashOfConfig":"51"},{"size":11554,"mtime":1609770178909,"results":"70","hashOfConfig":"51"},{"size":6727,"mtime":1609692148505,"results":"71","hashOfConfig":"51"},{"size":4403,"mtime":1609762028932,"results":"72","hashOfConfig":"51"},{"size":5980,"mtime":1609324817161,"results":"73","hashOfConfig":"51"},{"size":5345,"mtime":1608734385961,"results":"74","hashOfConfig":"51"},{"size":820,"mtime":1608055777039,"results":"75","hashOfConfig":"51"},{"size":3307,"mtime":1609764050009,"results":"76","hashOfConfig":"51"},{"size":451,"mtime":1609324530460,"results":"77","hashOfConfig":"51"},{"size":547,"mtime":1608712664772,"results":"78","hashOfConfig":"51"},{"size":891,"mtime":1608304780024,"results":"79","hashOfConfig":"51"},{"size":675,"mtime":1608645886512,"results":"80","hashOfConfig":"51"},{"size":244,"mtime":1608712664783,"results":"81","hashOfConfig":"51"},{"size":10799,"mtime":1609324817157,"results":"82","hashOfConfig":"51"},{"size":85,"mtime":1608536296998,"results":"83","hashOfConfig":"51"},{"size":7037,"mtime":1609330799979,"results":"84","hashOfConfig":"51"},{"size":671,"mtime":1608625691467,"results":"85","hashOfConfig":"51"},{"size":3703,"mtime":1609246395555,"results":"86","hashOfConfig":"51"},{"size":860,"mtime":1608625691470,"results":"87","hashOfConfig":"51"},{"size":7994,"mtime":1609246395520,"results":"88","hashOfConfig":"51"},{"size":11696,"mtime":1609337199793,"results":"89","hashOfConfig":"51"},{"size":1325,"mtime":1608734385969,"results":"90","hashOfConfig":"51"},{"size":1587,"mtime":1608712664780,"results":"91","hashOfConfig":"51"},{"size":2441,"mtime":1609336839942,"results":"92","hashOfConfig":"51"},{"size":2579,"mtime":1609331120615,"results":"93","hashOfConfig":"51"},{"size":2660,"mtime":1609695099422,"results":"94","hashOfConfig":"51"},{"size":813,"mtime":1608734385947,"results":"95","hashOfConfig":"51"},{"size":2040,"mtime":1609324543518,"results":"96","hashOfConfig":"51"},{"size":183,"mtime":1608748599747,"results":"97","hashOfConfig":"51"},{"size":425,"mtime":1609324530408,"results":"98","hashOfConfig":"51"},{"size":2406,"mtime":1609692210741,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"pqs3e0",{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"102"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"102"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"102"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"102"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"102"},"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\index.js",[],["223","224"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\App.js",["225"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"./utils/PrivateRoute\";\r\nimport Login from './components/AuthComponents/Login'\r\nimport Register from './components/AuthComponents/Register'\r\nimport Phone from './components/AuthComponents/Phone'\r\nimport RegisterPhone from './components/AuthComponents/RegisterPhone'\r\nimport Admin from './components/AdminComponents/Admin'\r\nimport EditGame from './components/AdminComponents/EditGame'\r\nimport PlayerState from './components/AdminComponents/PlayerState'\r\nimport Bite from './components/GameComponents/Bite'\r\nimport CreateMissionMarker from './components/AdminComponents/CreateMissionMarker'\r\nimport EditMissionMarker from './components/AdminComponents/EditMissionMarker'\r\nimport BiteHuman from './components/GameComponents/BiteHuman'\r\nimport BiteZombie from './components/GameComponents/BiteZombie'\r\nimport ChooseFaction from './components/GameComponents/ChooseFaction'\r\nimport CurrentGames from './components/GameComponents/CurrentGames'\r\nimport Home from './components/HomeComponents/Home'\r\nimport LandingPage from './components/HomeComponents/LandingPage'\r\nimport GameMap from './components/GameComponents/GameMap'\r\nimport SquadCreate from './components/SquadComponents/SquadCreate'\r\nimport SquadDetail from './components/SquadComponents/SquadDetail'\r\nimport SquadList from './components/SquadComponents/SquadList'\r\nimport NotFound from './components/StylingComponents/NotFound'\r\nimport { AuthProvider } from \"./utils/Auth\";\r\nimport './components/StylingComponents/Components.css'\r\nimport AdminCreateGame from './components/AdminComponents/AdminCreateGame'\r\nimport Missions from \"./components/GameComponents/Missions\";\r\nimport Chat from \"./components/ChatMessageComponents/Chat\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/phone\" component={Phone} />\r\n          <Route exact path=\"/registerphone\" component={RegisterPhone} />\r\n          <PrivateRoute exact path=\"/\" component={Home} />\r\n          <PrivateRoute exact path=\"/landing\" component={LandingPage} />\r\n          <PrivateRoute exact path=\"/bite\" component={Bite} />\r\n          <PrivateRoute exact path=\"/bitehuman\" component={BiteHuman} />\r\n          <PrivateRoute exact path=\"/bitezombie\" component={BiteZombie} />\r\n          <PrivateRoute exact path=\"/squads\" component={SquadList} />\r\n          <PrivateRoute exact path=\"/squaddetails\" component={SquadDetail} />\r\n          <PrivateRoute exact path=\"/createsquad\" component={SquadCreate} />\r\n          <PrivateRoute exact path=\"/currentgames\" component={CurrentGames} />\r\n          <PrivateRoute exact path=\"/admin\" component={Admin} />\r\n          <PrivateRoute exact path=\"/playerstate\" component={PlayerState} />\r\n          <PrivateRoute exact path=\"/map\" component={GameMap} />\r\n          <PrivateRoute exact path=\"/choosefaction\" component={ChooseFaction} />\r\n          <PrivateRoute exact path=\"/creategame\" component={AdminCreateGame} />\r\n          <PrivateRoute exact path=\"/create/missionmarker\" component={CreateMissionMarker} />\r\n          <PrivateRoute exact path=\"/edit/missionmarker\" component={EditMissionMarker} />\r\n          <PrivateRoute exact path=\"/editgame\" component={EditGame} />\r\n          <PrivateRoute exact path=\"/missions\" component={Missions} />\r\n          <PrivateRoute exact path=\"/chat\" component={Chat} />\r\n          <Route path='*'>\r\n            <NotFound header='Page not found' message='The page you requested does not exist' />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\nexport default App;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js",["226","227","228"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { AuthContext } from \"../../utils/Auth.js\";\r\nimport { getUserInfo, storePhone } from \"../../utils/dbstorage.js\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\n\r\nconst RegisterPhone = ({ history }) => {\r\n\r\n    let userId = localStorage.getItem(\"User ID\")\r\n    const isVerified = firebase.auth().currentUser.emailVerified;\r\n\r\n    const handleRegister = async event => {\r\n        event.preventDefault();\r\n        const { phone } = event.target.elements;\r\n        storePhone(userId, phone.value);\r\n        history.push('/');\r\n    }\r\n\r\n    function redirectToIndex() {\r\n        history.push('/');\r\n    }\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <>\r\n            {isVerified\r\n                ?\r\n                <>\r\n                    <HeaderOutside />\r\n                    <section className=\"login-register\">\r\n                        <div className=\"container\">\r\n                            <h1>Register Phone</h1>\r\n                            <Form onSubmit={handleRegister} name=\"loginForm\">\r\n                                <Form.Group controlId=\"formPhone\">\r\n                                    <Form.Label>Phone Number: </Form.Label>\r\n                                    <Form.Control name=\"phone\" type=\"tel\" required />\r\n                                </Form.Group>\r\n                                <button type=\"submit\">Register</button>\r\n                                <Link to=\"/registerphone\">\r\n                                    <button>Cancel</button>\r\n                                </Link>\r\n                            </Form>\r\n                        </div>\r\n                    </section>\r\n                </>\r\n                : \r\n                redirectToIndex()\r\n                }\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterPhone);","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js",["229","230"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { UpdateGame, FetchAllGames, FetchGame, DeleteGame } from \"../../utils/GameStorage\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\n\r\n\r\nconst EditGame = (props) => {\r\n  const [validGameName, setValidGameName] = useState(false);\r\n  const [validGameDescription, setValidGameDescription] = useState(false);\r\n  const [deleteGame, setDeleteGame] = useState(false);\r\n  const [allGames, setAllGames] = useState([])\r\n  const [selectedGameId, setSelectedGameId] = useState(null);\r\n  const [gameObject, setGameObject] = useState({})\r\n\r\n  useEffect(() => {\r\n    fetchAllGames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedGameId !== null) {\r\n      fetchGame()\r\n    }\r\n    else {\r\n      setGameObject({})\r\n    }\r\n  }, [selectedGameId]);\r\n\r\n  useEffect(() => {\r\n\r\n  }, [gameObject]);\r\n\r\n  async function fetchAllGames() {\r\n    let allGames = await FetchAllGames();\r\n    if (allGames !== null) {\r\n      setAllGames(allGames);\r\n    } else {\r\n      alert('Failed to fetch games');\r\n      setAllGames([]);\r\n    }\r\n  }\r\n\r\n  async function fetchGame() {\r\n    let game = await FetchGame(selectedGameId);\r\n    if (game !== null) {\r\n      setGameObject(\r\n        {\r\n          name: game.name,\r\n          description: game.description,\r\n          gameState: game.gameState,\r\n          gameId: game.gameId,\r\n          startTime: game.startTime,\r\n          endTime: game.endTime,\r\n          maxNumberOfPlayers: game.maxNumberOfPlayers,\r\n          description: game.description\r\n        }\r\n      );\r\n    } else {\r\n      alert('Failed to fetch games');\r\n      setGameObject({});\r\n    }\r\n  }\r\n\r\n  async function editGame() {\r\n    let editGameResponse = await UpdateGame(gameObject);\r\n    if (editGameResponse.status === 200) {\r\n      props.history.push(\"/admin\");\r\n    } else if (editGameResponse.status === 400) {\r\n      alert(\"Game name must be unique!\");\r\n    } else {\r\n      alert(\"Something went wrong while updating the game.\");\r\n    }\r\n  }\r\n\r\n  const onGameNameChange = ev => {\r\n    let currentGameName = ev.target.value;\r\n    if (currentGameName.length < 4) {\r\n      setValidGameName(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentGameName\r\n      }));\r\n      setValidGameName(true);\r\n    }\r\n  }\r\n\r\n  const onGameDescriptionChange = ev => {\r\n    let currentGameDescription = ev.target.value;\r\n    if (currentGameDescription.length < 4) {\r\n      setValidGameDescription(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        description: currentGameDescription\r\n      }));\r\n      setValidGameDescription(true);\r\n    }\r\n  }\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n  const onSizeChange = ev => {\r\n    let numPlayers = ev.target.value;\r\n    if (numPlayers > 0) {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        maxNumberOfPlayers: numPlayers\r\n      }));\r\n    }\r\n  }\r\n\r\n  async function onDeleteClicked() {\r\n    let gameResponse = await DeleteGame(gameObject.gameId);\r\n    if (gameResponse === 200) {\r\n      props.history.push(\"/currentgames\");\r\n    } else {\r\n      console.log(\"Something went wrong when trying to delete the game.\");\r\n    }\r\n  }\r\n\r\n  const onCheckBoxChanged = ev => {\r\n    setDeleteGame(!deleteGame);\r\n  }\r\n\r\n  function handleChangeGameToUpdate(ev) {\r\n    let selectedGame = ev.target.value;\r\n    if (selectedGame !== \"0\") {\r\n      setSelectedGameId(selectedGame)\r\n      setGameObject({})\r\n    }\r\n    else {\r\n      setSelectedGameId(null);\r\n    }\r\n  }\r\n\r\n  function isEmpty(obj) {\r\n    for (var prop in obj) {\r\n      if (obj.hasOwnProperty(prop))\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  return (\r\n    <>\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <Header />\r\n          <GameMenu />\r\n          <h1>Edit game</h1>\r\n          <br />\r\n          <Form.Group>\r\n\r\n            <Form.Control\r\n              onChange={handleChangeGameToUpdate}\r\n              className=\"mb-4\"\r\n              as=\"select\">\r\n              <option value=\"0\">Select game...</option>\r\n              {allGames.filter(game => game.gameState !== 'COMPLETED').map(filteredGame => (\r\n                <option key={filteredGame.gameId} value={filteredGame.gameId}>\r\n                  {filteredGame.name}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n\r\n            {selectedGameId !== null && !isEmpty(gameObject) ?\r\n              <div>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter game name...\"\r\n                  defaultValue={gameObject.name}\r\n                  onChange={onGameNameChange} />\r\n                <br />\r\n                <Form.Control\r\n                  placeholder=\"Enter game description...\"\r\n                  as=\"textarea\"\r\n                  defaultValue={gameObject.description}\r\n                  rows={3}\r\n                  onChange={onGameDescriptionChange} />\r\n                <br />\r\n                <TextField\r\n                  id=\"datetime-local\"\r\n                  label=\"Start time\"\r\n                  type=\"datetime-local\"\r\n                  defaultValue={gameObject.startTime.substring(0, 16)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n\r\n                  onChange={onStartTimeChange}\r\n                />\r\n                <br />  <br />\r\n                <TextField\r\n                  id=\"datetime-local\"\r\n                  label=\"End time\"\r\n                  type=\"datetime-local\"\r\n                  defaultValue={gameObject.endTime.substring(0, 16)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  onChange={onEndTimeChange}\r\n                />\r\n                <br />\r\n                <br />\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  defaultValue={gameObject.maxNumberOfPlayers}\r\n                  size=\"sm\"\r\n                  onChange={onSizeChange}\r\n                  placeholder=\"Max number of players...\">\r\n\r\n                </Form.Control>\r\n                <br /> <br />\r\n                <Button disabled={!validGameName || !validGameDescription} onClick={editGame}>Update Game</Button>\r\n                <Button disabled={!deleteGame} onClick={onDeleteClicked}>Delete Game</Button>\r\n                <Form.Group controlId=\"deleteGameCheckbox\">\r\n                  <Form.Check type=\"checkbox\" label=\"Delete Game?\" onChange={onCheckBoxChanged} />\r\n                </Form.Group>\r\n              </div>\r\n              : null}\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default EditGame;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js",["231"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\n\r\nconst Admin = () => {\r\n\r\n  return (\r\n    <>\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <Header />\r\n          <GameMenu />\r\n          <h1>Admin</h1>\r\n          <Link to=\"/creategame\">Create Game</Link>\r\n          <Link to=\"/editgame\">Edit Game</Link>\r\n          <Link to=\"#\">Edit Player State</Link>\r\n          <Link to=\"/create/missionmarker\">Create Mission Marker</Link>\r\n          <Link to=\"/edit/missionmarker\">Edit Mission Marker</Link>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Admin;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js",["232"],"import React, { useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { CreateGame } from \"../../utils/GameStorage\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst AdminCreateGame = (props) => {\r\n    const [validGameName, setValidGameName] = useState(false);\r\n    const [validGameDescription, setValidGameDescription] = useState(false);\r\n    const [gameObject, setGameObject] = useState(\r\n        {\r\n            name: \"\",\r\n            gameState: \"PREPARATION\",\r\n            startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n            endTime: \"2021-01-02T08:00:00.000+00:00\",\r\n            maxNumberOfPlayers: 50,\r\n            description: \"\"\r\n        })\r\n\r\n    async function createGame() {\r\n        if (validGameDescription === true && validGameName === true) {\r\n            let createGameResponse = await CreateGame(gameObject);\r\n            if (createGameResponse.status === 201) {\r\n                props.history.push(\"/currentgames\");\r\n            } else if (createGameResponse.status === 400) {\r\n                alert(\"Game name must be unique!\");\r\n            } else {\r\n                alert(\"Something went wrong while creating the game.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const onGameNameChange = ev => {\r\n        let currentGameName = ev.target.value;\r\n        if (currentGameName.length < 4) {\r\n            setValidGameName(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                name: currentGameName\r\n            }));\r\n            setValidGameName(true);\r\n        }\r\n    }\r\n\r\n    const onGameDescriptionChange = ev => {\r\n        let currentGameDescription = ev.target.value;\r\n        if (currentGameDescription.length < 4) {\r\n            setValidGameDescription(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                description: currentGameDescription\r\n            }));\r\n            setValidGameDescription(true);\r\n        }\r\n    }\r\n\r\n    const onStartTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            startTime: time\r\n        }));\r\n    }\r\n\r\n    const onEndTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            endTime: time\r\n        }));\r\n    }\r\n\r\n    const onSizeChange = ev => {\r\n        let numPlayers = ev.target.value;\r\n        if (numPlayers > 0) {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                maxNumberOfPlayers: numPlayers\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <GameMenu />\r\n                    <h1>Create game</h1>\r\n                    <br />\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter game name...\" onChange={onGameNameChange} />\r\n                        <br />\r\n                        <Form.Control placeholder=\"Enter game description...\" as=\"textarea\" rows={3} onChange={onGameDescriptionChange} />\r\n                        <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"Start time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-01T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onStartTimeChange}\r\n                        />\r\n                        <br />  <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"End time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-02T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onEndTimeChange}\r\n                        />\r\n                        <br />\r\n\r\n                        <br />\r\n                        <Form.Control type=\"number\" size=\"sm\" onChange={onSizeChange} placeholder=\"Max number of players...\">\r\n\r\n                        </Form.Control>\r\n                        <br /> <br />\r\n                        <Button disabled={!validGameName || !validGameDescription} onClick={createGame}>Create</Button>\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\nexport default AdminCreateGame;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js",["233","234"],"import React, { Component, useEffect, useState } from 'react';\r\nimport Header from '../StylingComponents/Header';\r\n\r\nconst BiteHuman = ({history}) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId)).json();\r\n        setCurrentPlayer(response);\r\n    }\r\n\r\n\r\n    if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n            </div>\r\n        )\r\n    } else if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div id=\"codeEntryContainer\">\r\n                    <h2>BITE CODE ENTRY</h2>\r\n                    <input type=\"text\" placeholder=\"CODE-HERE\" />\r\n                    <br/>\r\n                    <button>Make Zombie</button>\r\n                    <button>Kill</button>\r\n                </div>\r\n        \r\n                <br/>\r\n        \r\n                <div id=\"killContainer\">\r\n                    <input type=\"text\" placeholder=\"Coordinates (auto)\" />\r\n                    <br/>\r\n                    <input type=\"text\" placeholder=\"Victim Description\" />\r\n                    <br/>\r\n                    <button>Submit</button>\r\n                    <button>Cancel</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h3>Something went wrong...</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BiteHuman;\r\n\r\n\r\n\r\n\r\n/* class BiteHuman extends Component {\r\n\r\n    state = {\r\n        details: []\r\n    };\r\n\r\n    componentDidMount() {\r\n      fetch('/api/fetch/player/1')\r\n          .then(res => res.json())\r\n          .then((data) => {\r\n              this.setState({details: data})\r\n          })\r\n          .catch(console.log);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{this.state.details.biteCode}</div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BiteHuman; */","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js",["235"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CreatePlayer } from \"../../utils/PlayerStorage\";\r\nimport HeaderOutside from '../StylingComponents/HeaderOutside';\r\n\r\nconst ChooseFaction = (props) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let currentPlayer = localStorage.getItem(\"Faction\");\r\n\r\n    async function joinHumans() {\r\n        let response = await CreatePlayer(gameId, userId, 'HUMAN');\r\n        if (response === null) {\r\n            alert(\"Failed to create player!\");\r\n        }\r\n        props.history.push('/landing');\r\n    }\r\n\r\n    async function joinZombies() {\r\n        let response = await CreatePlayer(gameId, userId, 'ZOMBIE');\r\n        if (response === null) {\r\n            alert(\"Failed to create player!\");\r\n        }\r\n        props.history.push('/landing');\r\n    }\r\n\r\n    function alreadyHasFaction() {\r\n        props.history.push('/landing');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderOutside />\r\n            <section className=\"home\">\r\n                {currentPlayer\r\n                    ?\r\n                    alreadyHasFaction()\r\n                    :\r\n                    <>\r\n                        <div className=\"container\">\r\n                            <h1>Choose your faction!</h1>\r\n                            <br></br>\r\n                            <button type=\"button\" onClick={() => joinHumans()}>Humans</button>\r\n                            <button type=\"button\" onClick={() => joinZombies()}>Zombies</button>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChooseFaction;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js",["236"],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from \"../../utils/firebase\";\r\nimport { getUser } from \"../../utils/localstorage.js\";\r\nimport { Button } from 'react-bootstrap';\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\nimport { clearUser } from \"../../utils/localstorage\";\r\nimport { fetchUser } from \"../../utils/dbstorage\";\r\n\r\nconst Home = (props) => {\r\n\r\n  const user = getUser();\r\n  const isVerified = firebase.auth().currentUser.emailVerified;\r\n  const userPhone = firebase.auth().currentUser.phoneNumber;\r\n  const userId = localStorage.getItem(\"User ID\")\r\n  const usersPhone = localStorage.getItem(\"User Phone\")\r\n\r\n  useEffect(() => {\r\n    fetchUserID();\r\n  }, [])\r\n\r\n  async function fetchUserID() {\r\n    await fetchUser(userId).then(result => {\r\n      localStorage.setItem(\"User Phone\", result.phoneNumber)\r\n    })\r\n  }\r\n\r\n  const handleSignOut = () => {\r\n    firebase.auth().signOut()\r\n    clearUser();\r\n  }\r\n\r\n\r\n  // The usertype should be determined by calling the database, not by using local storage as that can be edited.\r\n  // This should be updated ASAP.\r\n  const userType = localStorage.getItem('Usertype');\r\n\r\n  function handleAdminAccess() {\r\n    if (userType === 'Admin') {\r\n      props.history.push('/admin')\r\n    } else {\r\n      alert('You do not have access to the admin menu')\r\n    }\r\n  }\r\n\r\n  if (!isVerified && userPhone === null) {\r\n    return (\r\n      <>\r\n        <section className=\"home\">\r\n          <div className=\"container\">\r\n            <HeaderOutside />\r\n            <h1>Home</h1>\r\n            <p>Welcome, {user}</p>\r\n            <p>A verification link has been sent to your email. Please verify your email to register your phone.</p>\r\n            <Button variant=\"dark\" onClick={() => props.history.push(\"/currentgames\")}>Browse Games</Button>\r\n            <br />\r\n            <Button variant=\"dark\" onClick={handleAdminAccess}>ADMIN</Button>\r\n            <br />\r\n            <Button variant=\"dark\" onClick={handleSignOut}>Sign out</Button>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } else if (isVerified && !usersPhone) {\r\n    if (window.localStorage) {\r\n      if (!localStorage.getItem('firstLoad')) {\r\n        localStorage['firstLoad'] = true;\r\n        window.location.reload();\r\n      }\r\n      else\r\n        localStorage.removeItem('firstLoad');\r\n    }\r\n    return (\r\n      <>\r\n        <section className=\"home\">\r\n          <div className=\"container\">\r\n            <HeaderOutside />\r\n            <h1>Home</h1>\r\n            <p>Welcome, {user}</p>\r\n            <p><Link to=\"/registerphone\">You may now register your phone!</Link></p>\r\n            <Button variant=\"dark\" onClick={() => props.history.push(\"/currentgames\")}>Browse Games</Button>\r\n            <br />\r\n            <Button variant=\"dark\" onClick={handleAdminAccess}>ADMIN</Button>\r\n            <br />\r\n            <Button variant=\"dark\" onClick={handleSignOut}>Sign out</Button>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <section className=\"home\">\r\n          <div className=\"container\">\r\n            <HeaderOutside />\r\n            <h1>Home</h1>\r\n            <p>Welcome, {user}</p>\r\n            <Button variant=\"dark\" onClick={() => props.history.push(\"/currentgames\")}>Browse Games</Button>\r\n            <br />\r\n            <Button variant=\"dark\" onClick={handleAdminAccess}>ADMIN</Button>\r\n            <br />\r\n            <Button variant=\"dark\" onClick={handleSignOut}>Sign out</Button>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js",["237","238"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js",["239","240","241","242","243","244","245"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { CreateSquadCheckin } from '../../utils/squadCheckinStorage';\r\nimport { UpdateSquadMember } from '../../utils/SquadMemberStorage';\r\nimport GameMenu from '../StylingComponents/GameMenu';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadDetail = ({ history }) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let squadMemberId = localStorage.getItem('SquadMember ID');\r\n    let squadRank = localStorage.getItem('Squad Rank');\r\n    let dateObject = new Date();\r\n\r\n    const [squadMembers, setSquadMembers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMembers();\r\n    }, [])\r\n\r\n    // A check should be added depending on response code, see function below this one\r\n    async function fetchSquadMembers() {\r\n        const memberResponse = await fetch('/api/fetch/squadmember/details/game=' + gameId + '/squad=' + squadId);\r\n        let body;\r\n        if (memberResponse.status === 200) {\r\n            body = await memberResponse.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquadMembers(body);\r\n    }\r\n\r\n    // The below function doesn't work as is, but should be implemented instead of the one above\r\n    // async function fetchSquadMembers() {\r\n    //     const response = await (await fetch('/api/fetch/squadmember/details/game=' + gameId + '/squad=' + squadId)).json();\r\n    //     let body;\r\n    //     if (response.status === 200) {\r\n    //         body = response.json();\r\n    //     } else {\r\n    //         body = [];\r\n    //     }\r\n    //     setSquadMembers(body);\r\n    // }\r\n\r\n    function getLocation() {\r\n        let lng = localStorage.getItem(\"Squad Lng: \")\r\n        let lat = localStorage.getItem(\"Squad Lat: \")\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        }\r\n        CreateSquadCheckin(gameId, squadId, squadMemberId, dateObject, lng, lat)\r\n        \r\n    }\r\n\r\n    function showPosition(position) {\r\n        let squadLng = position.coords.longitude.toFixed(4);\r\n        let squadLat = position.coords.latitude.toFixed(4);\r\n        let currentPosition = document.getElementById(\"current-location\");\r\n        currentPosition.innerHTML = \"Longitude: \" + squadLng +\r\n            \"<br>Latitude: \" + squadLat;\r\n        localStorage.setItem(\"Squad Lng: \", squadLng)\r\n        localStorage.setItem(\"Squad Lat: \", squadLat)\r\n    }\r\n\r\n    const [squad, setSquad] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquad();\r\n    }, [])\r\n\r\n    async function fetchSquad() {\r\n        const response = await fetch('/api/fetch/squad/' + squadId);\r\n        let body;\r\n        if (response.status === 200) {\r\n            body = await response.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquad(body);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId);\r\n        if (playerResponse.status === 200) {\r\n            let body = await playerResponse.json();\r\n            setCurrentPlayer(body);\r\n        } else {\r\n            setCurrentPlayer({});\r\n        }\r\n    }\r\n\r\n\r\n    async function handleLeaveSquad() {\r\n        let response = await UpdateSquadMember(squadMemberId, null);\r\n        if (response !== null) {\r\n            localStorage.setItem('Squad ID', response.squadId);\r\n            localStorage.setItem('SquadMember ID', null)\r\n            history.push('/squads');\r\n        } else {\r\n            alert('Failed to leave squad.');\r\n        }\r\n    }\r\n\r\n\r\n    function handleDisbandSquad() {\r\n        if (squadRank === \"LEADER\") {\r\n            fetch('/api/delete/squad/' + squadId, {\r\n                method: 'DELETE',\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => console.log(res));\r\n            localStorage.setItem('Squad ID', 'null');\r\n            localStorage.setItem('Squad Member ID', 'null');\r\n            localStorage.setItem('Squad Rank', 'null');\r\n            history.push('/squads');\r\n        } else {\r\n            alert(\"You must be a leader to disband the squad.\")\r\n        }\r\n    }\r\n\r\n\r\n    if (squadMemberId === 'null' || squadMemberId === 'undefined') {\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <h3>Forbidden</h3>\r\n                    <p>You must first join a squad to gain access to the squad detail page.</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n\r\n                        <h1>{squad.name}\r\n                            {console.log(squad)}\r\n                            {console.log(squadMembers)}\r\n                            {console.log(currentPlayer)}</h1>\r\n                        <br />\r\n\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Alive</th>\r\n                                    <th>Rank</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {squadMembers.map((s) =>\r\n                                    <tr>\r\n                                        <td>{s.username}</td>\r\n                                        <td>{s.alive.toString()}</td>\r\n                                        <td>{s.squadRank}</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <br />\r\n\r\n                        <button onClick={getLocation}>Mark location</button>\r\n                        <p id=\"current-location\"></p>\r\n                        <button type=\"button\" onClick={() => handleLeaveSquad()}>Leave Squad</button>\r\n\r\n                        <br />\r\n                        <button type=\"button\" onClick={() => handleDisbandSquad()}>Disband Squad (only available to the leader)</button>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SquadDetail;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js",["246","247","248","249","250"],"import React, { Component } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport { FetchAllMissions } from '../../utils/missionStorage';\r\nimport { FetchAllSquadCheckin } from '../../utils/squadCheckinStorage';\r\n\r\n//mapboxgl.accessToken = 'pk.eyJ1IjoicGVyY2hyaXN0ZXI3IiwiYSI6ImNraWhqYTJqejF2engyc3BvbTdrcHhsNzIifQ.SE5ympIl6CiI_0GCnrRNnA';\r\nmapboxgl.accessToken = 'pk.eyJ1IjoicGVyY2hyaXN0ZXI3IiwiYSI6ImNramlpcXF6aTB5dHMydHFveHE0cDdleXMifQ.cOdCvVE4RuyE_0SRtC-1ww'\r\n\r\nclass MainMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: 18.0622,\r\n      lat: 59.3319,\r\n      zoom: 5\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let coordinates = document.getElementById('coordinates');\r\n    const map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom\r\n    });\r\n\r\n    let marker = new mapboxgl.Marker({\r\n      draggable: true\r\n    });\r\n\r\n    let missions = FetchAllMissions();\r\n    let squadCheckins = FetchAllSquadCheckin();\r\n\r\n    let faction = localStorage.getItem(\"Faction\")\r\n    let user = localStorage.getItem(\"Username\")\r\n\r\n    missions\r\n      .then(response =>\r\n        response.map((m) => {\r\n\r\n          let mission = document.createElement('div');\r\n          mission.className = 'mission';\r\n          let missionMarker = new mapboxgl.Marker(mission);\r\n\r\n          let popup = new mapboxgl.Popup({ offset: 25 })\r\n            .setText('Name: ' + m.name);\r\n\r\n          if (m.missionPoint !== null && m.factionVisibility === faction) {\r\n            missionMarker\r\n              .setLngLat([m.missionPoint.x, m.missionPoint.y]).setPopup(popup).addTo(map)\r\n          }\r\n        })\r\n      )\r\n\r\n      squadCheckins\r\n      .then(response =>\r\n        response.map((sq) => {\r\n\r\n          let squadCheckin = document.createElement('div');\r\n          squadCheckin.className = 'squad';\r\n          let squadCheckinMarker = new mapboxgl.Marker(squadCheckin);\r\n\r\n          let popup = new mapboxgl.Popup({ offset: 25 })\r\n            .setText('Hello, ' + user);\r\n\r\n          if (sq.position !== null  && sq.squadId !== null || sq.squadId !== undefined) {\r\n            squadCheckinMarker\r\n              .setLngLat([sq.position.x, sq.position.y]).setPopup(popup).addTo(map)\r\n          }\r\n        })\r\n      )\r\n\r\n\r\n    let gravestone = document.createElement('div');\r\n    gravestone.className = 'gravestone';\r\n    let graveStoneMarker = new mapboxgl.Marker(gravestone);\r\n    graveStoneMarker.setLngLat([14.1618, 57.7826]).addTo(map);\r\n\r\n    function onDragEnd() {\r\n      let lngLat = marker.getLngLat();\r\n      let lngValue = lngLat.lng.toFixed(4);\r\n      let latValue = lngLat.lat.toFixed(4);\r\n      coordinates.innerHTML =\r\n        'Longitude: ' + lngValue + '<br />Latitude: ' + latValue;\r\n      localStorage.setItem(\"Lng: \", lngValue);\r\n      localStorage.setItem(\"Lat: \", latValue);\r\n    }\r\n\r\n    marker.on('dragend', onDragEnd);\r\n\r\n    function showPosition(position) {\r\n      let currentPosition = document.getElementById(\"current-position\");\r\n      // currentPosition.innerHTML = \"Longitude: \" + position.coords.longitude +\r\n      //   \"<br>Latitude: \" + position.coords.latitude;\r\n      marker.setLngLat([position.coords.longitude.toFixed(4), position.coords.latitude.toFixed(4)]).addTo(map)\r\n      localStorage.setItem('Current Position Lng: ', position.coords.longitude.toFixed(4))\r\n      localStorage.setItem('Current Position Lat: ', position.coords.latitude.toFixed(4))\r\n    }\r\n\r\n    if (navigator.geolocation) {\r\n      map.addControl(\r\n        new mapboxgl.GeolocateControl({\r\n          positionOptions: {\r\n            enableHighAccuracy: true,\r\n          },\r\n          trackUserLocation: true\r\n        }),\r\n        navigator.geolocation.getCurrentPosition(showPosition)\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <link href=\"https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css\" rel=\"stylesheet\" />\r\n        <script src='https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.js'></script>\r\n        <div ref={el => this.mapContainer = el} className='leaflet-container'></div>\r\n        <label>Marker Location: </label>\r\n        <p id=\"coordinates\"></p>\r\n        {/* <label>Current Location: </label> */}\r\n        <p id=\"current-position\"></p>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainMap","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js",["251","252","253"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\nimport { storeSquadDB } from '../../utils/squadstorage';\r\n\r\nconst SquadCreate = ({ history }) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let hasSquadMemberObject = localStorage.getItem('SquadMember ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    // The userId doesn't work properly (it only works with the dummy data), so we can't fetch the current player\r\n    async function fetchCurrentPlayer() {                                                                    // user should be set to userId, not 1\r\n        const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId);\r\n        let body;\r\n        if (playerResponse.status === 200) {\r\n            body = await playerResponse.json();\r\n        } else {\r\n            body = null;\r\n        }\r\n        setCurrentPlayer(body);\r\n    }\r\n\r\n    localStorage.setItem('Faction', currentPlayer.faction);\r\n\r\n    async function handleCreateSquad(event) {\r\n        event.preventDefault();\r\n\r\n        const { squadName, squadMemberAmount } = event.target.elements;\r\n        console.log(squadName.value, squadMemberAmount.value)\r\n        let createSquadRepsonse = await storeSquadDB(squadName.value, currentPlayer.faction, squadMemberAmount.value);\r\n\r\n        if (createSquadRepsonse === 201) {\r\n            let squadMemberExists = await fetch('/api/fetch/squadmember/game=' + gameId + '/player=' + playerId);\r\n            let newSquadId = localStorage.getItem('Squad ID');\r\n            if (squadMemberExists.status === 200) {\r\n                let response = await fetch('/api/update/squadmember/' + hasSquadMemberObject, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squad: {\r\n                            squadId: newSquadId\r\n                        },\r\n                        squadRank: \"LEADER\",\r\n                        squadMemberId: hasSquadMemberObject\r\n                    })\r\n                });\r\n                let body = await response.json();\r\n                localStorage.setItem('SquadMember ID', body.squadMemberId);\r\n\r\n                history.push('/squaddetails/');\r\n            } else if (squadMemberExists.status === 404) {\r\n                let newSquadId = localStorage.getItem('Squad ID');\r\n                let response = await fetch('/api/create/squadmember/' + gameId + '/' + newSquadId + '/' + playerId, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squadId: squadId,\r\n                        squadRank: \"LEADER\"\r\n                    })\r\n                });\r\n                if (response.status === 201) {\r\n                    let body = await response.json();\r\n                    localStorage.setItem('SquadMember ID', body.squadMemberId);\r\n                    localStorage.setItem('Squad Rank', 'LEADER');\r\n                } else {\r\n                    alert(\"Failed to create squad member!\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // function handleSquadName() {\r\n    //     console.log(document.getElementById('squadName').value);\r\n    //     localStorage.setItem('squadName', (document.getElementById('squadName').value));\r\n    // }\r\n\r\n    // function handleSquadMemberAmount() {\r\n    //     console.log(document.getElementById('squadMemberAmount').value);\r\n    //     localStorage.setItem('squadMemberAmount', (document.getElementById('squadMemberAmount').value));\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"container\">\r\n                <div id=\"squadCreateForm\">\r\n                    <h2>Create Squad\r\n                    {console.log(currentPlayer)}\r\n                    </h2>\r\n                    <Form onSubmit={handleCreateSquad}>\r\n                        <Form.Group controlId=\"formSquadName\">\r\n                            {/* <Form.Label>Squad Name: </Form.Label> */}\r\n                            <Form.Control id=\"squadName\" name=\"squadName\" type=\"text\" placeholder=\"Squad Name\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadMemberLimit\">\r\n                            {/* <Form.Label>Squad Member Amount: </Form.Label> */}\r\n                            <Form.Control id=\"squadMemberAmount\" name=\"squadMemberAmount\" type=\"text\" placeholder=\"Squad Members (XX max)\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadFaction\">\r\n                            {/* <Form.Label>Squad Faction: </Form.Label> */}\r\n                            <Form.Control name=\"squadFaction\" type=\"text\" value={currentPlayer.faction} required></Form.Control>\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Create</button>\r\n                        <Link to=\"squads\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadCreate","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js",["254","255","256","257","258","259"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { CreateSquadMember, UpdateSquadMember } from '../../utils/SquadMemberStorage';\r\nimport GameMenu from '../StylingComponents/GameMenu';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadList = ({ history }) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let storageSquadId = localStorage.getItem('Squad ID');\r\n    let squadMemberId = localStorage.getItem('SquadMember ID');\r\n    let currentFaction = localStorage.getItem('Faction');\r\n\r\n    const [squads, setSquads] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquads();\r\n    }, [])\r\n\r\n    async function fetchSquads() {\r\n        const squadResponse = await fetch('/api/fetch/squad/details/game=' + gameId);\r\n        let body;\r\n        if (squadResponse.status === 200) {\r\n            body = await squadResponse.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquads(body);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId));\r\n        setCurrentPlayer(playerResponse);\r\n    }\r\n\r\n\r\n    const [squadMember, setSquadMember] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMember();\r\n    }, [])\r\n\r\n    async function fetchSquadMember() {\r\n        const response = await (await fetch('/api/fetch/squadmember/game=' + gameId + '/player=' + playerId));\r\n        setSquadMember(response);\r\n    }\r\n\r\n    async function handleJoinSquad(squadId) {\r\n        if (squadMemberId === 'null') {\r\n            //Player do not have a SquadMember Object yet. Create one.\r\n            let response = await CreateSquadMember(gameId, squadId, playerId, 'MEMBER');\r\n            if (response !== null) {\r\n                localStorage.setItem('Squad ID', response.squadId);\r\n                localStorage.setItem('SquadMember ID', response.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'MEMBER');\r\n                history.push('squaddetails');\r\n            } else {\r\n                alert('Failed to join squad! Post failed.');\r\n            }\r\n        } else if (storageSquadId === 'null') {\r\n            //Player has a SquadMember Object but is not assigned to a squad yet. Patch it.\r\n            let response = await UpdateSquadMember(squadMemberId, squadId);\r\n            if (response !== null) {\r\n                localStorage.setItem('Squad ID', response.squadId);\r\n                localStorage.setItem('SquadMember ID', response.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'MEMBER');\r\n                history.push('/squaddetails');\r\n            } else {\r\n                alert('Failed to join squad! Patch failed.');\r\n                console.log(response);\r\n            }\r\n        } else {\r\n            //Player is already a member of a squad. Prompt them to leave squad before trying again.\r\n            alert('You are already in a squad. Leave current squad and try again.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <h1>Active Squads</h1>\r\n                    <div>\r\n                        {console.log(\"This is the current player: \\n\" + currentPlayer)}\r\n                        {console.log(\"This is the current squad member: \\n\" + squadMember)}\r\n                    </div>\r\n\r\n                    {/* <div>\r\n                        <button type=\"button\" onClick={assignSquadMemberId}>ASSIGN SM ID</button>\r\n                    </div> */}\r\n\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Members</th>\r\n                                <th>Faction</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {squads.map((s) =>\r\n                                <tr>\r\n                                    <td>{s.squadName}</td>\r\n                                    <td>{s.numberOfRegisteredMembers} / {s.maxNumberOfMembers}</td>\r\n                                    <td>{s.faction}</td>\r\n                                    <td>\r\n                                        <button type=\"button\" disabled={s.faction !== currentFaction || s.numberOfRegisteredMembers >= s.maxNumberOfMembers} onClick={() => handleJoinSquad(s.squadId)}>JOIN</button>\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <br />\r\n                    <Link to=\"createsquad\">\r\n                        <button>Create New Squad</button>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadList;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js",["260"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport GameMenu from './GameMenu';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n\r\n                <div id=\"gameMenu\">\r\n                    <GameMenu />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js",["261","262","263"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ButtonGroup, Button, Form } from 'react-bootstrap';\r\nimport { CreateMessage, GetBundleOfChatMessages, DeleteChatMessage, UpdateChatMessage } from '../../utils/ChatMessageStorage';\r\nimport { ThemeProvider, ChatList, ChatListItem, Avatar, Column, Subtitle, Row, Title, IconButton, SendIcon } from '@livechat/ui-kit'\r\n\r\n\r\nconst ChatMessage = props => {\r\n\r\n    let userId = localStorage.getItem('User ID');\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerFaction = localStorage.getItem('Faction');\r\n\r\n    const [chatRoom, setChatRoom] = useState('ALL');\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [chatMessages, setChatMessages] = useState([]);\r\n    const [validInput, setValidInput] = useState(false);\r\n    const [messageToUpdateId, setMessageToUpdateId] = useState(null);\r\n    const [isEditingMessage, setIsEditingMessage] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (userId !== 'null' && userId !== null) {\r\n            if (playerId !== 'null' && playerId !== null) {\r\n                if (gameId !== 'null' && gameId !== null) {\r\n                    if (playerFaction !== 'null' && playerFaction !== null) {\r\n                        let request = {\r\n                            gameId: gameId,\r\n                            playerId: playerId,\r\n                            squadId: null,\r\n                            faction: chatRoom\r\n                        }\r\n                        fetchMessages();\r\n                    } else {\r\n                        alert('Faction missing.');\r\n                        props.history.push(\"/landing\");\r\n                    }\r\n                } else {\r\n                    alert('Game ID missing.');\r\n                    props.history.push(\"/landing\");\r\n                }\r\n            } else {\r\n                alert('Player ID missing.');\r\n                props.history.push(\"/landing\");\r\n            }\r\n        } else {\r\n            alert('User ID missing.');\r\n            props.history.push(\"/landing\");\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchMessages();\r\n    }, [refresh])\r\n\r\n    useInterval(() => {\r\n        fetchMessages()\r\n    }, 5000);\r\n\r\n    function useInterval(callback, delay) {\r\n        const savedCallback = useRef();\r\n\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    async function fetchMessages() {\r\n        let request;\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: null,\r\n                    faction: 'ALL'\r\n                }\r\n                break;\r\n            case 'FACTION':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: null,\r\n                    faction: playerFaction\r\n                }\r\n                break;\r\n            case 'SQUAD':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: squadId,\r\n                    faction: playerFaction\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        let messages = await GetBundleOfChatMessages(request);\r\n        if (messages !== null) {\r\n            setChatMessages(messages);\r\n        } else {\r\n            alert('Failed to fetch messages');\r\n            setChatMessages([]);\r\n        }\r\n    }\r\n\r\n    function selectChatRoom(ev) {\r\n        let room = ev.target.value;\r\n        setChatRoom(room);\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onMsgChanged = ev => {\r\n        let currentInput = ev.target.value;\r\n        if (currentInput.length < 1) {\r\n            setValidInput(false);\r\n        }\r\n        else {\r\n            setValidInput(true);\r\n        }\r\n        setMessage(currentInput);\r\n    }\r\n\r\n    const prepareMessageObject = () => {\r\n        let msgObject;\r\n        let time = new Date().getTime();\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: 'ALL',\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: 'null',\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            case 'FACTION':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: playerFaction,\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: 'null',\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            case 'SQUAD':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: playerFaction,\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: squadId,\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return msgObject;\r\n    }\r\n\r\n    async function sendMessage() {\r\n        let msg = prepareMessageObject();\r\n        const response = await CreateMessage(msg);\r\n        resetTextField()\r\n        if (response !== null) {\r\n            setRefresh(!refresh);\r\n        } else {\r\n            alert(\"Failed to send message! Failed to create.\")\r\n        }\r\n    }\r\n\r\n    async function handleDeleteMessage(msgId) {\r\n        const response = await DeleteChatMessage(msgId);\r\n        if (response !== null) {\r\n            setRefresh(!refresh);\r\n        } else {\r\n            alert(\"Failed to send message! Failed to delete.\")\r\n        }\r\n\r\n    }\r\n\r\n    function checkIfPlayerIsAuthor(msgAuthorId) {\r\n        if (playerId === msgAuthorId.toString()) {\r\n            return true;\r\n        }\r\n    }\r\n    function handleEditMessage(msgId) {\r\n        setMessageToUpdateId(msgId)\r\n        setIsEditingMessage(true)\r\n    }\r\n\r\n    function handleUpdateMessage(msgId) {\r\n        if (msgId === messageToUpdateId) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function resetTextField() {\r\n        const textField = document.getElementById(\"messageInput\");\r\n        textField.value = \"\"\r\n    }\r\n    async function sendUpdatedMessage() {\r\n        let updatedMesageObj = {\r\n            message: message,\r\n            chatMessageId: messageToUpdateId\r\n        }\r\n        let response = await UpdateChatMessage(updatedMesageObj)\r\n\r\n        if (response !== null) {\r\n            setIsEditingMessage(false);\r\n            setRefresh(!refresh);\r\n            setMessageToUpdateId(null)\r\n        } else {\r\n            alert(\"Failed to edit message! Failed to delete.\")\r\n        }\r\n    }\r\n    function handleCancelEditingMessage() {\r\n        setIsEditingMessage(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup >\r\n                <Button variant=\"dark\" onClick={selectChatRoom} value=\"ALL\" >Global</Button>\r\n                <Button variant=\"dark\" onClick={selectChatRoom} value=\"FACTION\">Faction</Button>\r\n                <Button variant=\"dark\" disabled={squadId === 'null'} onClick={selectChatRoom} value=\"SQUAD\">Squad</Button>\r\n            </ButtonGroup>\r\n            <br />\r\n            <ThemeProvider>\r\n                <ChatList >\r\n                    {chatMessages.map((chatMessage) =>\r\n                        <ChatListItem key={chatMessage.chatMessageId}>\r\n                            <Avatar imgUrl=\"https://livechat.s3.amazonaws.com/default/avatars/male_8.jpg\" />\r\n                            <Column fill>\r\n                                <Row justify>\r\n                                    <Title ellipsis>{chatMessage.username}</Title>\r\n                                    <Subtitle nowrap>{chatMessage.stringTimestamp}</Subtitle>\r\n                                </Row>\r\n                                <Subtitle >\r\n                                    <div>\r\n                                        {handleUpdateMessage(chatMessage.chatMessageId) && isEditingMessage ? <Form.Group>\r\n                                            <Form.Control type=\"text\"\r\n                                                placeholder=\"Edit your message...\"\r\n                                                onChange={onMsgChanged}\r\n                                                defaultValue={chatMessage.message} />\r\n                                            <Button variant=\"info\" size=\"sm\" onClick={sendUpdatedMessage}>Update</Button>\r\n                                            <Button className=\"m-2\" size=\"sm\" variant=\"secondary\"  onClick={handleCancelEditingMessage}>Cancel</Button>\r\n                                        </Form.Group>\r\n                                            : chatMessage.message\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <div>\r\n                                        {checkIfPlayerIsAuthor(chatMessage.playerId) && !isEditingMessage ?\r\n                                            <Subtitle >\r\n                                                <Button className=\"m-1\" variant=\"secondary\" size=\"sm\" onClick={() => handleEditMessage(chatMessage.chatMessageId)}> Edit</Button>\r\n                                                <Button variant=\"danger\" size=\"sm\" onClick={() => handleDeleteMessage(chatMessage.chatMessageId)}> Delete</Button>\r\n                                            </Subtitle>\r\n                                            : null}\r\n                                    </div>\r\n                                </Subtitle>\r\n                            </Column>\r\n                        </ChatListItem>\r\n                    )}\r\n                </ChatList>\r\n\r\n                <Form.Group>\r\n                    <Form.Control id=\"messageInput\" type=\"text\" placeholder=\"Enter a message\" onChange={onMsgChanged} />\r\n                    <IconButton disabled={!validInput} onClick={sendMessage}>\r\n                        <SendIcon />\r\n                    </IconButton>\r\n                </Form.Group>\r\n            </ThemeProvider>\r\n        </>\r\n    );\r\n};\r\nexport default ChatMessage;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js",["264","265","266"],"import { TextField } from \"@material-ui/core\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CreateMission } from '../../utils/missionStorage'\r\nimport MainMap from \"../MapComponents/MainMap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst CreateMissionMarker = (props) => {\r\n  let gameId = localStorage.getItem(\"Game ID\")\r\n  let userId = localStorage.getItem(\"User ID\")\r\n\r\n  const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchCurrentPlayer();\r\n  }, [])\r\n\r\n  async function fetchCurrentPlayer() {                                                                    // user should be set to userId, not 1\r\n    const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId);\r\n    let body;\r\n    if (playerResponse.status === 200) {\r\n      body = await playerResponse.json();\r\n    } else {\r\n      body = null;\r\n    }\r\n    setCurrentPlayer(body);\r\n  }\r\n\r\n  const [validMissionName, setValidMissionName] = useState(false);\r\n  const [validDescription, setValidDescription] = useState(true);\r\n  const [missionObject, setMissionObject] = useState(\r\n    {\r\n      name: \"\",\r\n      missionDescription: \"\",\r\n      factionVisibility: \"HUMAN\",\r\n      missionPoint: {\r\n        x: 18.0249,\r\n        y: 59.2132\r\n      },\r\n      startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n      endTime: \"2021-01-02T08:00:00.000+00:00\"\r\n    })\r\n\r\n  async function createMission() {\r\n    if (validMissionName === true) {\r\n      let createMissionResponse = await CreateMission(missionObject);\r\n      if (createMissionResponse.status === 201) {\r\n        props.history.push(\"/missions\");\r\n      } else if (createMissionResponse.status === 400) {\r\n        alert(\"Mission name must be unique!\");\r\n      } else {\r\n        alert(\"Something went wrong while creating the mission.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  const onMissionNameChange = ev => {\r\n    let currentMissionName = ev.target.value;\r\n    if (currentMissionName.length < 4) {\r\n      setValidMissionName(false);\r\n    }\r\n    else {\r\n      setMissionObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentMissionName\r\n      }));\r\n      setValidMissionName(true);\r\n    }\r\n    localStorage.setItem(\"Mission Name: \", ev.target.value)\r\n  }\r\n\r\n  const onDescriptionChange = ev => {\r\n    let currentDescription = ev.target.value;\r\n    if (currentDescription.length < 4) {\r\n      setValidDescription(false);\r\n    }\r\n    else {\r\n      setMissionObject((prevState) => ({\r\n        ...prevState,\r\n        missionDescription: currentDescription\r\n      }));\r\n      setValidDescription(true);\r\n    }\r\n  }\r\n\r\n  const onFactionChange = ev => {\r\n    let currentFaction = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      factionVisibility: currentFaction\r\n    }));\r\n  }\r\n\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n const onLngChange = ev => {\r\n  let lng = ev.target.value;\r\n  setMissionObject((prevState) => ({\r\n    ...prevState,\r\n    missionPoint: {\r\n      x: lng,\r\n      y: missionObject.missionPoint.y\r\n    }\r\n  }));\r\n}\r\n\r\nconst onLatChange = ev => {\r\n  let lat = ev.target.value;\r\n  setMissionObject((prevState) => ({\r\n    ...prevState,\r\n    missionPoint: {\r\n      x: missionObject.missionPoint.x,\r\n      y: lat\r\n    }\r\n  }));\r\n}\r\n\r\n  function getCoordinates() {\r\n    let lngValue = localStorage.getItem(\"Lng: \")\r\n    let latValue = localStorage.getItem(\"Lat: \")\r\n\r\n    let lng = document.getElementById('p-lng');\r\n    lng.value = lngValue;\r\n\r\n    let lat = document.getElementById('p-lat');\r\n    lat.value = latValue;\r\n  }\r\n\r\n  function getLng() {\r\n    let copyText = document.getElementById(\"p-lng\");\r\n\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999);\r\n\r\n    document.execCommand(\"copy\");\r\n\r\n    alert(\"Copied the text: \" + copyText.value);\r\n  }\r\n\r\n  function getLat() {\r\n    let copyText = document.getElementById(\"p-lat\");\r\n\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999);\r\n\r\n    document.execCommand(\"copy\");\r\n\r\n    alert(\"Copied the text: \" + copyText.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <NavBar />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Create Mission Marker</h1>\r\n          <Form.Group>\r\n            <Form.Control type=\"text\" placeholder=\"Enter mission name\" onChange={onMissionNameChange} />\r\n            <br />\r\n            <Form.Control type=\"text\" placeholder=\"Mission description...\" onChange={onDescriptionChange} />\r\n            <br />\r\n            <label>Faction: </label>\r\n            <Form.Control as=\"select\" placeholder=\"Faction\" onChange={onFactionChange}>\r\n              <option>HUMAN</option>\r\n              <option>ZOMBIE</option>\r\n              <option>ALL</option>\r\n            </Form.Control>\r\n            <br />\r\n            <Form.Control type=\"text\" placeholder=\"Longitude\" onChange={onLngChange} />\r\n            <Form.Control type=\"text\" placeholder=\"Latitude\" onChange={onLatChange} />\r\n            <br />\r\n            <MainMap />\r\n            <input id=\"p-lng\" />\r\n            <button onClick={getLng}>Copy Lng</button>\r\n            <input id=\"p-lat\" />\r\n            <button onClick={getLat}>Copy Lat</button>\r\n            <br></br>\r\n            <button onClick={getCoordinates}>Get Coords</button>\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"Start time\"\r\n              type=\"datetime-local\"\r\n              defaultValue=\"2021-01-01T08:00\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onStartTimeChange}\r\n            />\r\n            <br />  <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"End time\"\r\n              type=\"datetime-local\"\r\n              defaultValue=\"2021-01-02T08:00\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onEndTimeChange}\r\n            />\r\n            <br /><br />\r\n            <Button disabled={!validMissionName || !validDescription} onClick={createMission}>Create</Button><Link to=\"/admin\"><Button>Cancel</Button></Link>\r\n            <br></br>\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateMissionMarker;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js",["267","268"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\n\r\nconst HeaderOutside = () => {\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeaderOutside;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js",["269","270","271","272"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Modal from './Modal';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst BUTTON_WRAPPER_STYLES = {\r\n    position: 'relative',\r\n    zIndex: 1,\r\n    backgroundColor: 'rgb(221, 221, 221)',\r\n    height: '60px',\r\n    width: '60px'\r\n}\r\n\r\nconst GameMenu = ({history}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId);\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            setCurrentPlayer(body);\r\n        }else {\r\n            alert('Could not fetch current player.');\r\n            setCurrentPlayer({});\r\n        }\r\n    }\r\n\r\n\r\n    function handleBitePage() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        }\r\n    }\r\n\r\n    function showPosition(position) {\r\n        let currentLatitude = position.coords.latitude;\r\n        let currentLongitude = position.coords.longitude;\r\n        localStorage.setItem('Latitude', currentLatitude);\r\n        localStorage.setItem('Longitude', currentLongitude);\r\n        history.push('/bite');\r\n    }\r\n\r\n\r\n    // function handleBitePage() {\r\n    //     if (currentPlayer.faction === 'HUMAN') {\r\n    //         history.push('/bitehuman');\r\n    //     } else if (currentPlayer.faction === 'ZOMBIE') {\r\n    //         history.push('/bitezombie');\r\n    //     } else {\r\n    //         alert('Something went wrong, please try again.');\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div onClick={() => console.log(\"clicked\")}>\r\n                <Button variant=\"dark\" onClick={() => setIsOpen(true)}>Menu</Button>\r\n            \r\n                <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n                    <Link to=\"landing\">\r\n                        <div>Landing/Rules</div>\r\n                    </Link>\r\n                    <Link to=\"map\">\r\n                        <div>Map</div>\r\n                    </Link>\r\n                    \r\n                    <div onClick={handleBitePage}>Bite</div>\r\n                    \r\n                    {/* <div onClick={handleBitePage}>Bite</div>\r\n                    <Link to=\"bitehuman\">\r\n                        <div>Bite Human</div>\r\n                    </Link>\r\n                    <Link to=\"bitezombie\">\r\n                        <div>Bite Zombie</div>\r\n                    </Link> */}\r\n                    <Link to=\"chat\">\r\n                        <div>Chat</div>\r\n                    </Link>\r\n                    <Link to=\"squads\">\r\n                        <div>Squads</div>\r\n                    </Link>\r\n                    <Link to=\"squaddetails\">\r\n                        <div>Squad Details</div>\r\n                    </Link>\r\n                    <Link to=\"admin\">\r\n                        <div>Admin</div>\r\n                    </Link>\r\n                    <div>\r\n                        <button onClick={handleSignOut}>Sign out</button>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter (GameMenu);","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js",["273","274","275"],"import React, { Component, useEffect, useState } from 'react';\r\nimport Header from '../StylingComponents/Header';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nconst Bite = ({ history }) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let latitude = localStorage.getItem('Latitude');\r\n    let longitude = localStorage.getItem('Longitude');\r\n\r\n    let currentCoordinates = ('Coordinates: \\nLatitude: ' + latitude + ' \\nLongitude: ' + longitude);\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId)).json();\r\n        setCurrentPlayer(response);\r\n    }\r\n\r\n    const [validBiteCode, setValidBiteCode] = useState(false);\r\n    // const [victim, setVictim] = useState(\r\n    //     {\r\n    //         playerId: '',\r\n    //         biteCode: '1234ABCD',\r\n    //         faction: '',\r\n    //         isAlive: true,\r\n    //         isPatientZero: false\r\n    //     })\r\n\r\n    // Need to get the player object through their bite code\r\n    // if the victimPlayer.biteCode === the bite code input into the form the victim can be either turned or killed\r\n\r\n    const [currentBiteCode, setCurrentBiteCode] = useState([]);\r\n    const [currentVictim, setCurrentVictim] = useState([]);\r\n    \r\n\r\n    const onBiteCodeChange = ev => {\r\n        let biteCodeInput = ev.target.value;\r\n        if (biteCodeInput.length < 8 || biteCodeInput.length > 8 /* || currentBiteCode !== victimBiteCode */) {\r\n            setValidBiteCode(false);\r\n        } else /* (currentBiteCode === currentVictim.biteCode) */ {\r\n            console.log('That is a valid bite code');\r\n            \r\n            setValidBiteCode(true);\r\n            \r\n            /* fetchCurrentVictim().then(data => {\r\n                console.log('Look here at this cool data: ' + data);\r\n            }) */\r\n        }\r\n        setCurrentBiteCode(biteCodeInput);\r\n        // The function call below doesn't work properly... It doesn't setCurrentVictim correctly, but it DOES log the final message to the console...\r\n        fetchCurrentVictim();\r\n        return currentVictim;\r\n    }\r\n\r\n\r\n    async function fetchCurrentVictim() {\r\n        const response = await (await fetch('/api/fetch/player/' + gameId + '/' + currentBiteCode)).json();\r\n        setCurrentVictim(await response);\r\n        console.log('You did a victim fetch');\r\n        console.log('Check this data yo: ' + response.playerId);\r\n        return currentVictim;\r\n    }\r\n\r\n\r\n    async function testVictim() {\r\n        console.log('This is the bite code input from the form: ' + currentBiteCode);\r\n        console.log('This is the current player object: ' + currentPlayer.playerId);\r\n        console.log('This is the victim\\'s bite code according to victim fetch: ' + currentVictim.biteCode);\r\n    }\r\n\r\n\r\n    const [currentVictimSquadMember, setCurrentVictimSquadMember] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentVictimSquadMember();\r\n    }, [])\r\n\r\n    async function fetchCurrentVictimSquadMember() {\r\n        const response = await (await fetch('/api/fetch/squadmember/game=' + gameId + '/player=' + currentVictim.playerId)).json();\r\n        setCurrentVictimSquadMember(response);\r\n    }\r\n\r\n\r\n    // I need to pause the testVictim function, so it doesn't get called until the fetchCurrentVictim function has finished running.\r\n    // How the frick do I do that? HELP ON MONDAY.\r\n\r\n/*     async function victimMaster() {\r\n        const fetchVictim = await fetchCurrentVictim();\r\n        console.log(fetchVictim);\r\n\r\n        const testBiteCode = await testVictim();\r\n        console.log(testBiteCode);\r\n    } */\r\n\r\n\r\n    async function handleZombie() {\r\n        // Need to add a function that creates a grave stone on the map, using the auto fetched coordinates\r\n        // and the victim description from the form\r\n        console.log('The player was turned into a ZOMBIE');\r\n        if (validBiteCode === true) {\r\n            let playerResponse = await fetch('/api/update/player/' + currentVictim.playerId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    faction: 'ZOMBIE'\r\n                })\r\n            });\r\n            if (playerResponse.status === 200) {\r\n                let body = await playerResponse.json();\r\n                console.log(body);\r\n                return body;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        // Need to find a way to update the player's squad member object as well... It currently doesn't work.\r\n        let squadMemberResponse = await fetch ('/api/update/squadmember/' + currentVictimSquadMember.squadMemberId, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                squadId: null\r\n            })\r\n        });\r\n        if (squadMemberResponse.status === 200) {\r\n            let body = await squadMemberResponse.json();\r\n            console.log(body);\r\n            return body;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Need a check on other pages that limits access if the player's isAlive = false\r\n    async function handleKill() {\r\n        console.log('The player was killed');\r\n        if (validBiteCode === true) {\r\n            let response = await fetch('/api/update/player/' + currentVictim.playerId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    isAlive: false\r\n                })\r\n            });\r\n            if (response.status === 200) {\r\n                let body = await response.json();\r\n                console.log(body);\r\n                return body;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // The factions need to be switched back, the current state is for testing\r\n    if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n            </div>\r\n        )\r\n    } else if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div id=\"codeEntryContainer\">\r\n                    <h2>BITE CODE ENTRY\r\n                        {console.log(currentPlayer)}\r\n                    </h2>\r\n                    <Form>\r\n                        <Form.Control onChange={onBiteCodeChange} id=\"biteCode\" type=\"text\" placeholder=\"Bite Code\" required></Form.Control>\r\n                        <br/>\r\n                        <Form.Control id=\"coordinates\" as=\"textarea\" rows={3} value={currentCoordinates} required></Form.Control>\r\n                        <br/>\r\n                        <Form.Control id=\"victimDescription\" placeholder=\"Enter victim description...\" as=\"textarea\" rows={3} required></Form.Control>\r\n                    </Form>\r\n                    <br/>\r\n                    <button onClick={fetchCurrentVictim}>FETCH VICTIM</button>\r\n                    <button onClick={testVictim}>TEST VICTIM</button>\r\n                    {/* <button onClick={victimMaster}>VICTIM MASTER</button> */}\r\n                    <button onClick={handleZombie}>Turn into ZOMBIE</button>\r\n                    <button onClick={handleKill}>Kill victim</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h3>***</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bite;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditMissionMarker.js",["276","277"],"import { TextField } from \"@material-ui/core\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DeleteMission, UpdateMission, FetchMission, FetchAllMissions } from '../../utils/missionStorage'\r\nimport MainMap from \"../MapComponents/MainMap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst EditMissionMarker = (props) => {\r\n\r\n    const [validMissionName, setValidMissionName] = useState(false);\r\n    const [validDescription, setValidDescription] = useState(true);\r\n    const [deleteMission, setDeleteMission] = useState(false);\r\n    const [allMissions, setAllMissions] = useState([])\r\n    const [selectedMissionId, setSelectedMissionId] = useState(null);\r\n    const [missionObject, setMissionObject] = useState({})\r\n\r\n    useEffect(() => {\r\n        fetchAllMissions();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedMissionId !== null) {\r\n            fetchMission()\r\n        }\r\n        else {\r\n            setMissionObject({})\r\n        }\r\n    }, [selectedMissionId]);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [missionObject]);\r\n\r\n    async function fetchAllMissions() {\r\n        let allMissions = await FetchAllMissions();\r\n        if (allMissions !== null) {\r\n            setAllMissions(allMissions);\r\n        } else {\r\n            alert('Failed to fetch missions');\r\n            setAllMissions([]);\r\n        }\r\n    }\r\n\r\n    async function fetchMission() {\r\n        let mission = await FetchMission(selectedMissionId);\r\n        if (mission !== null) {\r\n            setMissionObject(\r\n                {\r\n                    missionId: mission.missionId,\r\n                    name: mission.name,\r\n                    missionDescription: mission.missionDescription,\r\n                    factionVisibility: mission.factionVisibility,\r\n                    missionPoint: {\r\n                        x: mission.missionPoint.x,\r\n                        y: mission.missionPoint.y\r\n                    },\r\n                    missionState: mission.missionState,\r\n                    startTime: mission.startTime,\r\n                    endTime: mission.endTime\r\n                }\r\n            );\r\n        } else {\r\n            alert('Failed to fetch missions');\r\n            setMissionObject({});\r\n        }\r\n    }\r\n\r\n    async function editMission() {\r\n        let editMissionResponse = await UpdateMission(missionObject);\r\n        if (editMissionResponse.status === 200) {\r\n            props.history.push(\"/admin\");\r\n        } else if (editMissionResponse.status === 400) {\r\n            alert(\"Mission name must be unique!\");\r\n        } else {\r\n            alert(\"Something went wrong while updating the mission.\");\r\n        }\r\n    }\r\n\r\n    const onMissionNameChange = ev => {\r\n        let currentMissionName = ev.target.value;\r\n        if (currentMissionName.length < 4) {\r\n            setValidMissionName(false);\r\n        }\r\n        else {\r\n            setMissionObject((prevState) => ({\r\n                ...prevState,\r\n                name: currentMissionName\r\n            }));\r\n            setValidMissionName(true);\r\n        }\r\n        localStorage.setItem(\"Mission Name: \", ev.target.value)\r\n    }\r\n\r\n    const onDescriptionChange = ev => {\r\n        let currentDescription = ev.target.value;\r\n        if (currentDescription.length < 4) {\r\n            setValidDescription(false);\r\n        }\r\n        else {\r\n            setMissionObject((prevState) => ({\r\n                ...prevState,\r\n                missionDescription: currentDescription\r\n            }));\r\n            setValidDescription(true);\r\n        }\r\n    }\r\n\r\n    const onFactionChange = ev => {\r\n        let currentFaction = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            factionVisibility: currentFaction\r\n        }));\r\n    }\r\n\r\n\r\n    const onStartTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            startTime: time\r\n        }));\r\n    }\r\n\r\n    const onEndTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            endTime: time\r\n        }));\r\n    }\r\n\r\n    const onLngChange = ev => {\r\n        let lng = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            missionPoint: {\r\n                x: lng,\r\n                y: missionObject.missionPoint.y\r\n            }\r\n        }));\r\n    }\r\n\r\n    const onLatChange = ev => {\r\n        let lat = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            missionPoint: {\r\n                x: missionObject.missionPoint.x,\r\n                y: lat\r\n            }\r\n        }));\r\n    }\r\n\r\n    function getCoordinates() {\r\n        let lngValue = localStorage.getItem(\"Lng: \")\r\n        let latValue = localStorage.getItem(\"Lat: \")\r\n\r\n        let lng = document.getElementById('p-lng');\r\n        lng.value = lngValue;\r\n\r\n        let lat = document.getElementById('p-lat');\r\n        lat.value = latValue;\r\n    }\r\n\r\n    function getLng() {\r\n        let copyText = document.getElementById(\"p-lng\");\r\n\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n\r\n        document.execCommand(\"copy\");\r\n\r\n        alert(\"Copied the text: \" + copyText.value);\r\n    }\r\n\r\n    function getLat() {\r\n        let copyText = document.getElementById(\"p-lat\");\r\n\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n\r\n        document.execCommand(\"copy\");\r\n\r\n        alert(\"Copied the text: \" + copyText.value);\r\n    }\r\n    async function onDeleteClicked() {\r\n        let missionResponse = await DeleteMission(missionObject.missionId);\r\n        if (missionResponse === 200) {\r\n            props.history.push(\"/missions\");\r\n        } else {\r\n            console.log(\"Something went wrong when trying to delete the mission.\");\r\n        }\r\n    }\r\n\r\n    const onCheckBoxChanged = ev => {\r\n        setDeleteMission(!deleteMission);\r\n    }\r\n\r\n    function handleChangeMissionToUpdate(ev) {\r\n        let selectedMission = ev.target.value;\r\n        localStorage.setItem(\"Mission ID\", selectedMission)\r\n        if (selectedMission !== \"0\") {\r\n            setSelectedMissionId(selectedMission)\r\n            setMissionObject({})\r\n        }\r\n        else {\r\n            setSelectedMissionId(null);\r\n        }\r\n    }\r\n\r\n    function isEmpty(obj) {\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop))\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <NavBar />\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <h1>Edit Mission Marker</h1>\r\n                    <Form.Group>\r\n\r\n                        <Form.Control\r\n                            onChange={handleChangeMissionToUpdate}\r\n                            className=\"mb-4\"\r\n                            as=\"select\">\r\n                            <option value=\"0\">Select mission...</option>\r\n                            {allMissions.filter(mission => mission.factionVisibility !== 'ALL').map(filteredMission => (\r\n                                <option key={filteredMission.missionId} value={filteredMission.missionId}>\r\n                                    {filteredMission.name}\r\n                                </option>\r\n                            ))}\r\n                        </Form.Control>\r\n\r\n\r\n                        {selectedMissionId !== null && !isEmpty(missionObject) ?\r\n                            <div>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter mission name\" defaultValue={missionObject.name} onChange={onMissionNameChange} />\r\n                                <br />\r\n                                <Form.Control type=\"text\" placeholder=\"Mission description...\" defaultValue={missionObject.missionDescription} onChange={onDescriptionChange} />\r\n                                <br />\r\n                                <label>Faction: </label>\r\n                                <Form.Control as=\"select\" placeholder=\"Faction\" defaultValue={missionObject.factionVisibility} onChange={onFactionChange}>\r\n                                    <option>HUMAN</option>\r\n                                    <option>ZOMBIE</option>\r\n                                    <option>ALL</option>\r\n                                </Form.Control>\r\n                                <br />\r\n                                <Form.Control type=\"text\" placeholder=\"Longitude\" defaultValue={missionObject.missionPoint.x} onChange={onLngChange} />\r\n                                <Form.Control type=\"text\" placeholder=\"Latitude\" defaultValue={missionObject.missionPoint.y} onChange={onLatChange} />\r\n                                <br />\r\n                                <MainMap />\r\n                                <input id=\"p-lng\" />\r\n                                <button onClick={getLng}>Copy Lng</button>\r\n                                <input id=\"p-lat\" />\r\n                                <button onClick={getLat}>Copy Lat</button>\r\n                                <br></br>\r\n                                <button onClick={getCoordinates}>Get Coords</button>\r\n                                <br />\r\n                                <br />\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    label=\"Start time\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue={missionObject.startTime.substring(0, 16)}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    onChange={onStartTimeChange}\r\n                                />\r\n                                <br />  <br />\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    label=\"End time\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue={missionObject.endTime.substring(0, 16)}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    onChange={onEndTimeChange}\r\n                                />\r\n                                <br /><br />\r\n                                <Button disabled={!validMissionName || !validDescription} onClick={editMission}>Update Mission</Button>\r\n                                <Button disabled={!deleteMission} onClick={onDeleteClicked}>Delete Mission</Button>\r\n                                <Form.Group controlId=\"deleteMissionCheckbox\">\r\n                                    <Form.Check type=\"checkbox\" label=\"Delete Mission?\" onChange={onCheckBoxChanged} />\r\n                                </Form.Group>\r\n\r\n                            </div>\r\n                            : null}\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditMissionMarker;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js",["278"],"import { getBaseUrl } from \"./baseUrl\";\r\n\r\nlet lng = localStorage.getItem('Current Position Lng: ')\r\nlet lat = localStorage.getItem('Current Position Lat: ')\r\n\r\n\r\nexport async function FetchAllGames() {\r\n    let url = getBaseUrl() + \"fetch/game/all\";\r\n    const response = await fetch(url);\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function FetchGame(gameId) {\r\n    let url = getBaseUrl() + \"fetch/game/\" + gameId;\r\n    const response = await fetch(url);\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport async function CreateGame(gameData) {\r\n    let url = getBaseUrl() + \"create/game\"\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            name: gameData.name,\r\n            gameState: gameData.gameState,\r\n            startTime: gameData.startTime,\r\n            nwPoint: {\r\n                \"x\": lng,\r\n                \"y\": lat\r\n            },\r\n            sePoint: {\r\n                \"x\": lng,\r\n                \"y\": lat\r\n            },\r\n            endTime: gameData.endTime,\r\n            maxNumberOfPlayers: gameData.maxNumberOfPlayers,\r\n            description: gameData.description\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function UpdateGame(gameData) {\r\n    let url = getBaseUrl() + \"update/game/\" + gameData.gameId;\r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            name: gameData.name,\r\n            description: gameData.description,\r\n            gameState: gameData.gameState,\r\n            startTime: gameData.startTime,\r\n            endTime: gameData.endTime,\r\n            maxNumberOfPlayers: gameData.maxNumberOfPlayers,\r\n            description: gameData.description\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function DeleteGame(gameId) {\r\n    let url = getBaseUrl() + \"delete/game/\" + gameId;\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    });\r\n    return response.status;\r\n}","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\missionStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Missions.js",["279","280","281"],"import { Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getPlayerInfo } from \"../../utils/gamedbstorage\";\r\nimport { FetchAllMissions } from '../../utils/missionStorage';\r\n\r\nconst Missions = (props) => {\r\n\r\n    const [missions, setMissions] = useState([]);\r\n    const [missionFilter, setmissionFilter] = useState('ALL');\r\n    let faction = localStorage.getItem(\"Faction\")\r\n\r\n    useEffect(() => {\r\n        fetchMissions();\r\n        getPlayerInfo();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [missionFilter])\r\n\r\n    async function fetchMissions() {\r\n        const missions = await FetchAllMissions();\r\n        if (missions != null) {\r\n            setMissions(missions);\r\n        } else {\r\n            setMissions([]);\r\n        }\r\n    }\r\n\r\n    function handlePreview(id) {\r\n        localStorage.setItem(\"Mission ID\", id);\r\n        props.history.push(\"/mission\");\r\n    }\r\n\r\n    const onFilterButtonClicked = ev => {\r\n        let filter = ev.target.value;\r\n        setmissionFilter(filter);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div>\r\n                    <h1>Game Name- Map</h1>\r\n                    <h2>Current Missions</h2>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Mission</th>\r\n                                <th>Description</th>\r\n                                <th>Faction</th>\r\n                                <th>Start</th>\r\n                                <th>End</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {missions.map((m) =>\r\n                                <tr key={m.missionId}>\r\n                                    {m.name && m.factionVisibility === faction ? <td>{m.name}</td> : null}\r\n                                    {m.missionDescription && m.factionVisibility === faction ? <td>{m.missionDescription}</td> : null}\r\n                                    {m.factionVisibility  && m.factionVisibility === faction ? <td>{m.factionVisibility}</td> : null}\r\n                                    {m.startTime && m.factionVisibility === faction ? <td>{m.startTime}</td> : null}\r\n                                    {m.endTime && m.factionVisibility === faction ? <td>{m.endTime}</td> : null}\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    <br></br>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Missions;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js",["282","283","284"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst Chat = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <ChatMessage />\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js",[],["285","286"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\GameMap.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadCheckinStorage.js",["287"],"import { getBaseUrl } from \"./baseUrl\";\r\n\r\nexport async function FetchAllSquadCheckin() {\r\n    let url = getBaseUrl() + \"fetch/squadcheckin/all\";\r\n    const response = await fetch(url);\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function FetchGame(squadCheckinId) {\r\n    let url = getBaseUrl() + \"fetch/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url);\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function CreateSquadCheckin(gameId, squadId, squadMemberId, currentTime, lng, lat) {\r\n    let url = getBaseUrl() + \"create/squadcheckin/\" + gameId + '/' + squadId + '/' + squadMemberId\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            pointOfTime: currentTime,\r\n            position: {\r\n                x: lng,\r\n                y: lat\r\n            },\r\n            gameId: gameId,\r\n            squadId: squadId,\r\n            squadMemberId: squadMemberId\r\n        })\r\n    })\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n    return response;\r\n}\r\n\r\nexport async function UpdateSquadCheckin(squadCheckinId, gameId, squadId, squadMemberId, currentTime, lng, lat) {\r\n    let url = getBaseUrl() + \"/update/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            pointOfTime: currentTime,\r\n            position: {\r\n                x: lng,\r\n                y: lat\r\n            },\r\n            gameId: gameId,\r\n            squadId: squadId,\r\n            squadMemberId: squadMemberId\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function DeleteSquadCheckin(squadCheckinId) {\r\n    let url = getBaseUrl() + \"delete/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    });\r\n    return response.status;\r\n}",{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":3,"column":42,"nodeType":"294","messageId":"295","endLine":3,"endColumn":48},{"ruleId":"292","severity":1,"message":"296","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":18},{"ruleId":"292","severity":1,"message":"297","line":7,"column":10,"nodeType":"294","messageId":"295","endLine":7,"endColumn":21},{"ruleId":"292","severity":1,"message":"298","line":26,"column":13,"nodeType":"294","messageId":"295","endLine":26,"endColumn":24},{"ruleId":"299","severity":1,"message":"300","line":29,"column":6,"nodeType":"301","endLine":29,"endColumn":22,"suggestions":"302"},{"ruleId":"303","severity":1,"message":"304","line":57,"column":11,"nodeType":"305","messageId":"306","endLine":57,"endColumn":22},{"ruleId":"292","severity":1,"message":"307","line":5,"column":8,"nodeType":"294","messageId":"295","endLine":5,"endColumn":14},{"ruleId":"292","severity":1,"message":"308","line":10,"column":7,"nodeType":"294","messageId":"295","endLine":10,"endColumn":16},{"ruleId":"292","severity":1,"message":"309","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"299","severity":1,"message":"310","line":13,"column":8,"nodeType":"301","endLine":13,"endColumn":10,"suggestions":"311"},{"ruleId":"292","severity":1,"message":"312","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":14},{"ruleId":"299","severity":1,"message":"313","line":20,"column":6,"nodeType":"301","endLine":20,"endColumn":8,"suggestions":"314"},{"ruleId":"292","severity":1,"message":"315","line":7,"column":8,"nodeType":"294","messageId":"295","endLine":7,"endColumn":16},{"ruleId":"299","severity":1,"message":"316","line":52,"column":8,"nodeType":"301","endLine":52,"endColumn":10,"suggestions":"317"},{"ruleId":"292","severity":1,"message":"309","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"292","severity":1,"message":"315","line":4,"column":8,"nodeType":"294","messageId":"295","endLine":4,"endColumn":16},{"ruleId":"292","severity":1,"message":"307","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":14},{"ruleId":"292","severity":1,"message":"318","line":12,"column":9,"nodeType":"294","messageId":"295","endLine":12,"endColumn":17},{"ruleId":"299","severity":1,"message":"319","line":21,"column":8,"nodeType":"301","endLine":21,"endColumn":10,"suggestions":"320"},{"ruleId":"299","severity":1,"message":"321","line":71,"column":8,"nodeType":"301","endLine":71,"endColumn":10,"suggestions":"322"},{"ruleId":"299","severity":1,"message":"310","line":89,"column":8,"nodeType":"301","endLine":89,"endColumn":10,"suggestions":"323"},{"ruleId":"324","severity":1,"message":"325","line":40,"column":26,"nodeType":"326","messageId":"327","endLine":40,"endColumn":28},{"ruleId":"324","severity":1,"message":"325","line":58,"column":27,"nodeType":"326","messageId":"327","endLine":58,"endColumn":29},{"ruleId":"328","severity":1,"message":"329","line":67,"column":37,"nodeType":"330","messageId":"331","endLine":67,"endColumn":39},{"ruleId":"328","severity":1,"message":"329","line":67,"column":60,"nodeType":"330","messageId":"331","endLine":67,"endColumn":62},{"ruleId":"292","severity":1,"message":"332","line":93,"column":11,"nodeType":"294","messageId":"295","endLine":93,"endColumn":26},{"ruleId":"292","severity":1,"message":"309","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"292","severity":1,"message":"307","line":5,"column":8,"nodeType":"294","messageId":"295","endLine":5,"endColumn":14},{"ruleId":"299","severity":1,"message":"310","line":20,"column":8,"nodeType":"301","endLine":20,"endColumn":10,"suggestions":"333"},{"ruleId":"292","severity":1,"message":"309","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"292","severity":1,"message":"315","line":4,"column":8,"nodeType":"294","messageId":"295","endLine":4,"endColumn":16},{"ruleId":"292","severity":1,"message":"307","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":14},{"ruleId":"299","severity":1,"message":"334","line":20,"column":8,"nodeType":"301","endLine":20,"endColumn":10,"suggestions":"335"},{"ruleId":"299","severity":1,"message":"310","line":38,"column":8,"nodeType":"301","endLine":38,"endColumn":10,"suggestions":"336"},{"ruleId":"299","severity":1,"message":"337","line":50,"column":8,"nodeType":"301","endLine":50,"endColumn":10,"suggestions":"338"},{"ruleId":"292","severity":1,"message":"312","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":14},{"ruleId":"292","severity":1,"message":"339","line":29,"column":29,"nodeType":"294","messageId":"295","endLine":29,"endColumn":36},{"ruleId":"299","severity":1,"message":"340","line":52,"column":8,"nodeType":"301","endLine":52,"endColumn":10,"suggestions":"341"},{"ruleId":"299","severity":1,"message":"342","line":56,"column":8,"nodeType":"301","endLine":56,"endColumn":17,"suggestions":"343"},{"ruleId":"292","severity":1,"message":"308","line":11,"column":7,"nodeType":"294","messageId":"295","endLine":11,"endColumn":16},{"ruleId":"292","severity":1,"message":"344","line":27,"column":10,"nodeType":"294","messageId":"295","endLine":27,"endColumn":23},{"ruleId":"299","severity":1,"message":"310","line":31,"column":6,"nodeType":"301","endLine":31,"endColumn":8,"suggestions":"345"},{"ruleId":"292","severity":1,"message":"312","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":14},{"ruleId":"292","severity":1,"message":"346","line":9,"column":11,"nodeType":"294","messageId":"295","endLine":9,"endColumn":24},{"ruleId":"292","severity":1,"message":"309","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"292","severity":1,"message":"347","line":8,"column":7,"nodeType":"294","messageId":"295","endLine":8,"endColumn":28},{"ruleId":"292","severity":1,"message":"344","line":28,"column":12,"nodeType":"294","messageId":"295","endLine":28,"endColumn":25},{"ruleId":"299","severity":1,"message":"310","line":32,"column":8,"nodeType":"301","endLine":32,"endColumn":10,"suggestions":"348"},{"ruleId":"292","severity":1,"message":"309","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"299","severity":1,"message":"310","line":18,"column":8,"nodeType":"301","endLine":18,"endColumn":10,"suggestions":"349"},{"ruleId":"299","severity":1,"message":"350","line":82,"column":8,"nodeType":"301","endLine":82,"endColumn":10,"suggestions":"351"},{"ruleId":"292","severity":1,"message":"308","line":10,"column":7,"nodeType":"294","messageId":"295","endLine":10,"endColumn":16},{"ruleId":"299","severity":1,"message":"352","line":42,"column":8,"nodeType":"301","endLine":42,"endColumn":27,"suggestions":"353"},{"ruleId":"303","severity":1,"message":"304","line":71,"column":13,"nodeType":"305","messageId":"306","endLine":71,"endColumn":24},{"ruleId":"292","severity":1,"message":"354","line":1,"column":10,"nodeType":"294","messageId":"295","endLine":1,"endColumn":16},{"ruleId":"292","severity":1,"message":"355","line":30,"column":14,"nodeType":"294","messageId":"295","endLine":30,"endColumn":27},{"ruleId":"292","severity":1,"message":"356","line":35,"column":11,"nodeType":"294","messageId":"295","endLine":35,"endColumn":32},{"ruleId":"292","severity":1,"message":"357","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"292","severity":1,"message":"358","line":1,"column":28,"nodeType":"294","messageId":"295","endLine":1,"endColumn":36},{"ruleId":"292","severity":1,"message":"308","line":7,"column":7,"nodeType":"294","messageId":"295","endLine":7,"endColumn":16},{"ruleId":"288","replacedBy":"359"},{"ruleId":"290","replacedBy":"360"},{"ruleId":"361","severity":1,"message":"362","line":49,"column":5,"nodeType":"363","messageId":"364","endLine":49,"endColumn":21},"no-native-reassign",["365"],"no-negated-in-lhs",["366"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'getUserInfo' is defined but never used.","'currentUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchGame'. Either include it or remove the dependency array.","ArrayExpression",["367"],"no-dupe-keys","Duplicate key 'description'.","ObjectExpression","unexpected","'NavBar' is defined but never used.","'useStyles' is assigned a value but never used.","'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCurrentPlayer'. Either include it or remove the dependency array.",["368"],"'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchUserID'. Either include it or remove the dependency array.",["369"],"'GameMenu' is defined but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["370"],"'playerId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSquadMembers'. Either include it or remove the dependency array.",["371"],"React Hook useEffect has a missing dependency: 'fetchSquad'. Either include it or remove the dependency array.",["372"],["373"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'currentPosition' is assigned a value but never used.",["374"],"React Hook useEffect has a missing dependency: 'fetchSquads'. Either include it or remove the dependency array.",["375"],["376"],"React Hook useEffect has a missing dependency: 'fetchSquadMember'. Either include it or remove the dependency array.",["377"],"'request' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chatRoom', 'fetchMessages', 'gameId', 'playerFaction', 'playerId', 'props.history', and 'userId'. Either include them or remove the dependency array.",["378"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["379"],"'currentPlayer' is assigned a value but never used.",["380"],"'handleSignOut' is assigned a value but never used.","'BUTTON_WRAPPER_STYLES' is assigned a value but never used.",["381"],["382"],"React Hook useEffect has a missing dependency: 'fetchCurrentVictimSquadMember'. Either include it or remove the dependency array.",["383"],"React Hook useEffect has a missing dependency: 'fetchMission'. Either include it or remove the dependency array.",["384"],"'Button' is defined but never used.","'handlePreview' is defined but never used.","'onFilterButtonClicked' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",["365"],["366"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"387","fix":"397"},{"desc":"387","fix":"398"},{"desc":"399","fix":"400"},{"desc":"387","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"387","fix":"408"},{"desc":"387","fix":"409"},{"desc":"387","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},"Update the dependencies array to be: [fetchGame, selectedGameId]",{"range":"415","text":"416"},"Update the dependencies array to be: [fetchCurrentPlayer]",{"range":"417","text":"418"},"Update the dependencies array to be: [fetchUserID]",{"range":"419","text":"420"},"Update the dependencies array to be: [props.history]",{"range":"421","text":"422"},"Update the dependencies array to be: [fetchSquadMembers]",{"range":"423","text":"424"},"Update the dependencies array to be: [fetchSquad]",{"range":"425","text":"426"},{"range":"427","text":"418"},{"range":"428","text":"418"},"Update the dependencies array to be: [fetchSquads]",{"range":"429","text":"430"},{"range":"431","text":"418"},"Update the dependencies array to be: [fetchSquadMember]",{"range":"432","text":"433"},"Update the dependencies array to be: [chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",{"range":"434","text":"435"},"Update the dependencies array to be: [fetchMessages, refresh]",{"range":"436","text":"437"},{"range":"438","text":"418"},{"range":"439","text":"418"},{"range":"440","text":"418"},"Update the dependencies array to be: [fetchCurrentVictimSquadMember]",{"range":"441","text":"442"},"Update the dependencies array to be: [fetchMission, selectedMissionId]",{"range":"443","text":"444"},[985,1001],"[fetchGame, selectedGameId]",[383,385],"[fetchCurrentPlayer]",[742,744],"[fetchUserID]",[2392,2394],"[props.history]",[892,894],"[fetchSquadMembers]",[2760,2762],"[fetchSquad]",[3187,3189],[759,761],[837,839],"[fetchSquads]",[1293,1295],[1624,1626],"[fetchSquadMember]",[2289,2291],"[chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",[2353,2362],"[fetchMessages, refresh]",[944,946],[876,878],[636,638],[3145,3147],"[fetchCurrentVictimSquadMember]",[1397,1416],"[fetchMission, selectedMissionId]"]
