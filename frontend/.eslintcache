[{"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\index.js":"1","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\App.js":"3","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js":"4","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js":"5","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js":"6","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js":"7","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js":"8","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js":"9","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js":"10","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js":"11","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js":"12","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\chatMessageStorge.js":"13","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js":"14","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js":"15","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js":"16","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js":"17","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js":"18","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js":"19","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js":"20","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\MissionMarker.js":"21","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js":"22","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js":"23","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js":"24","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js":"25","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js":"26","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js":"27","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js":"28","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js":"29","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js":"30","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js":"31","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js":"32","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js":"33","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js":"34","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js":"35","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\AdminDbStorge.js":"36","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\MenuTest.js":"37"},{"size":517,"mtime":1608212992086,"results":"38","hashOfConfig":"39"},{"size":375,"mtime":1608212992088,"results":"40","hashOfConfig":"39"},{"size":3289,"mtime":1608305880290,"results":"41","hashOfConfig":"39"},{"size":577,"mtime":1608212992093,"results":"42","hashOfConfig":"39"},{"size":651,"mtime":1608212992092,"results":"43","hashOfConfig":"39"},{"size":4090,"mtime":1608305880301,"results":"44","hashOfConfig":"39"},{"size":2677,"mtime":1608305880299,"results":"45","hashOfConfig":"39"},{"size":2898,"mtime":1608305880314,"results":"46","hashOfConfig":"39"},{"size":537,"mtime":1608305880335,"results":"47","hashOfConfig":"39"},{"size":820,"mtime":1608212992096,"results":"48","hashOfConfig":"39"},{"size":2250,"mtime":1608305880332,"results":"49","hashOfConfig":"39"},{"size":5902,"mtime":1608305867909,"results":"50","hashOfConfig":"39"},{"size":1154,"mtime":1608305867930,"results":"51","hashOfConfig":"39"},{"size":106,"mtime":1608305863110,"results":"52","hashOfConfig":"39"},{"size":284,"mtime":1608305880422,"results":"53","hashOfConfig":"39"},{"size":1394,"mtime":1608305880300,"results":"54","hashOfConfig":"39"},{"size":1444,"mtime":1608305880302,"results":"55","hashOfConfig":"39"},{"size":676,"mtime":1608305880461,"results":"56","hashOfConfig":"39"},{"size":669,"mtime":1608305880459,"results":"57","hashOfConfig":"39"},{"size":694,"mtime":1608305880455,"results":"58","hashOfConfig":"39"},{"size":852,"mtime":1608305880457,"results":"59","hashOfConfig":"39"},{"size":692,"mtime":1608305880452,"results":"60","hashOfConfig":"39"},{"size":4546,"mtime":1608305880437,"results":"61","hashOfConfig":"39"},{"size":971,"mtime":1608305880310,"results":"62","hashOfConfig":"39"},{"size":4291,"mtime":1608305880294,"results":"63","hashOfConfig":"39"},{"size":1067,"mtime":1608305880450,"results":"64","hashOfConfig":"39"},{"size":3674,"mtime":1608305880316,"results":"65","hashOfConfig":"39"},{"size":3419,"mtime":1608305880319,"results":"66","hashOfConfig":"39"},{"size":4596,"mtime":1608305880434,"results":"67","hashOfConfig":"39"},{"size":949,"mtime":1608306301966,"results":"68","hashOfConfig":"39"},{"size":9566,"mtime":1608306201768,"results":"69","hashOfConfig":"39"},{"size":986,"mtime":1608305880428,"results":"70","hashOfConfig":"39"},{"size":891,"mtime":1608305880425,"results":"71","hashOfConfig":"39"},{"size":292,"mtime":1608305880334,"results":"72","hashOfConfig":"39"},{"size":561,"mtime":1608305880337,"results":"73","hashOfConfig":"39"},{"size":641,"mtime":1608305880331,"results":"74","hashOfConfig":"39"},{"size":1745,"mtime":1608305880426,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1fv28qr",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\index.js",[],["161","162"],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\App.js",["163"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"./utils/PrivateRoute\";\r\nimport Login from './components/AuthComponents/Login'\r\nimport Register from './components/AuthComponents/Register'\r\nimport Phone from './components/AuthComponents/Phone'\r\nimport RegisterPhone from './components/AuthComponents/RegisterPhone'\r\nimport Admin from './components/AdminComponents/Admin'\r\nimport EditGame from './components/AdminComponents/EditGame'\r\nimport PlayerState from './components/AdminComponents/PlayerState'\r\nimport MissionMarker from './components/AdminComponents/MissionMarker'\r\nimport BiteHuman from './components/GameComponents/BiteHuman'\r\nimport BiteZombie from './components/GameComponents/BiteZombie'\r\nimport ChooseFaction from './components/GameComponents/ChooseFaction'\r\nimport CurrentGames from './components/GameComponents/CurrentGames'\r\nimport Home from './components/HomeComponents/Home'\r\nimport LandingPage from './components/HomeComponents/LandingPage'\r\nimport MainMap from './components/MapComponents/MainMap'\r\nimport SquadCreate from './components/SquadComponents/SquadCreate'\r\nimport SquadDetail from './components/SquadComponents/SquadDetail'\r\nimport SquadList from './components/SquadComponents/SquadList'\r\nimport NotFound from './components/StylingComponents/NotFound'\r\nimport { AuthProvider } from \"./utils/Auth\";\r\nimport './components/StylingComponents/Components.css'\r\nimport AdminCreateGame from './components/AdminComponents/AdminCreateGame'\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/phone\" component={Phone} />\r\n          <Route exact path=\"/registerphone\" component={RegisterPhone} />\r\n          <PrivateRoute exact path=\"/\" component={Home} />\r\n          <PrivateRoute exact path=\"/landing\" component={LandingPage} />\r\n          <PrivateRoute exact path=\"/bitehuman\" component={BiteHuman} />\r\n          <PrivateRoute exact path=\"/bitezombie\" component={BiteZombie} />\r\n          <PrivateRoute exact path=\"/squads\" component={SquadList} />\r\n          <PrivateRoute exact path=\"/squaddetails\" component={SquadDetail} />\r\n          <PrivateRoute exact path=\"/createsquad\" component={SquadCreate} />\r\n          <PrivateRoute exact path=\"/currentgames\" component={CurrentGames} />\r\n          <PrivateRoute exact path=\"/admin\" component={Admin} />\r\n          <PrivateRoute exact path=\"/game\" component={EditGame} />\r\n          <PrivateRoute exact path=\"/playerstate\" component={PlayerState} />\r\n          <PrivateRoute exact path=\"/missionmarker\" component={MissionMarker} />\r\n          <PrivateRoute exact path=\"/map\" component={MainMap} />\r\n          <PrivateRoute exact path=\"/choosefaction\" component={ChooseFaction} />\r\n          <PrivateRoute exact path=\"/create/game\" component={AdminCreateGame} />\r\n          <Route path='*'>\r\n            <NotFound header='Page not found' message='The page you requested does not exist' />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\nexport default App;","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js",["164"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { AuthContext } from \"../../utils/Auth\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { loginUser } from \"../../utils/dbstorage.js\";\r\nimport Phone from \"./Phone.js\";\r\n\r\nconst Login = ({ history }) => {\r\n\r\n    const handleLogin =\r\n        async event => {\r\n\r\n            event.preventDefault();\r\n            const { email, password } = event.target.elements;\r\n            try {\r\n                const status = await loginUser(email.value, password.value)\r\n                if (status === 200) {\r\n                    await firebase\r\n                        .auth()\r\n                        .signInWithEmailAndPassword(email.value, password.value)\r\n                        .catch(err => {\r\n                            alert(err.message)\r\n                            history.push(\"/\")\r\n                        });\r\n                } else {\r\n                    alert(\"Incorrect email or password!\")\r\n                }\r\n            } catch (error) {\r\n                alert(error);\r\n            }\r\n        };\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"login-register\">\r\n                <div className=\"container\">\r\n                    <h1>Log in</h1>\r\n                    <Form onSubmit={handleLogin} name=\"loginForm\">\r\n                        <Form.Group controlId=\"formEmail\">\r\n                            <Form.Label>Email: </Form.Label>\r\n                            <Form.Control name=\"email\" type=\"email\" placeholder=\"Email\" required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formPassword\">\r\n                            <Form.Label>Password: </Form.Label>\r\n                            <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" required />\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Log in</button>\r\n                        <Link to=\"/login\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                    <Link to=\"/register\">Don't have an account? Register here.</Link>\r\n                    <p>Or</p>\r\n                    <Link to=\"/phone\">Login with your phone!*</Link>\r\n                    <p><i>* Must be verified first!</i></p>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(Login);","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js",["165","166","167","168","169"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ButtonGroup, Button, Form, Container } from 'react-bootstrap';\r\nimport { CreateMessage, GetBundleOfChatMessages } from '../../utils/chatMessageStorge';\r\nimport { ThemeProvider, ChatList, ChatListItem, Avatar, Column, Subtitle, Row, Title, IconButton, SendIcon } from '@livechat/ui-kit'\r\n\r\n\r\nconst ChatMessage = props => {\r\n\r\n    const [chatMessage, setMsgText] = useState('');\r\n    const [validInput, setValidInput] = useState(false);\r\n    const [invalidInputMessage, setInvalidInputMessage] = useState('');\r\n    const [playerId, setPlayerId] = useState(localStorage.getItem('Player ID'));\r\n    const [gameId, setGameId] = useState(localStorage.getItem('Game ID'));\r\n    const [squadId, setSquadId] = useState(0);\r\n    const [msgObject, setMsgObject] = useState(\r\n        {\r\n            gameId: gameId,\r\n            playerId: playerId,\r\n            squadId: squadId,\r\n            message: chatMessage,\r\n            faction: 'ALL',\r\n            timestamp: getTime()\r\n        })\r\n    const [allChatMessages, setAllChatMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getChatMessagesBySelectedChatRoom(msgObject)\r\n    }, [msgObject.faction]);\r\n\r\n    function useInterval(callback, delay) {\r\n        const savedCallback = useRef();\r\n\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('Squad ID') !== null) {\r\n            setSquadId(localStorage.getItem('Squad ID'))\r\n            setMsgObject((prevState) => ({\r\n                ...prevState,\r\n                squadId: squadId,\r\n            }));\r\n        }\r\n    }, []);\r\n\r\n    useInterval(() => {\r\n        getChatMessagesBySelectedChatRoom(msgObject)\r\n    }, 1000);\r\n\r\n    function getSelectedChatRoom(ev) {\r\n        let chatRoom = ev.target.value;\r\n        let selectedRoom;\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                selectedRoom = 'ALL'\r\n                break;\r\n\r\n            case 'SQUAD':\r\n                selectedRoom = 'ZOMBIE'\r\n                break\r\n\r\n            case 'FACTION':\r\n                selectedRoom = 'HUMAN'\r\n                break;\r\n            default:\r\n                console.log(\"Default\")\r\n        }\r\n        createMessagesObjectByChatRoom(selectedRoom);\r\n        getChatMessagesBySelectedChatRoom(msgObject)\r\n\r\n        return chatRoom;\r\n    }\r\n\r\n    function createMessagesObjectByChatRoom(selectedRoom) {\r\n        setMsgObject((prevState) => ({\r\n            ...prevState,\r\n            faction: selectedRoom\r\n        }));\r\n    }\r\n\r\n    function getChatMessagesBySelectedChatRoom(request) {\r\n        GetBundleOfChatMessages(request)\r\n            .then(response => response.json())\r\n            .then(data => setAllChatMessages(data));\r\n    }\r\n\r\n    function getTime() {\r\n        let today = new Date();\r\n        let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n        return date;\r\n    }\r\n\r\n    const onMsgChanged = ev => {\r\n        let currentInput = ev.target.value;\r\n        setMsgText(currentInput);\r\n        createMessageObject(currentInput)\r\n        if (currentInput.length < 2) {\r\n            setValidInput(false);\r\n        }\r\n        else {\r\n            setValidInput(true);\r\n        }\r\n    }\r\n\r\n    function createMessageObject(msg) {\r\n        setMsgObject((prevState) => ({\r\n            ...prevState,\r\n            message: msg,\r\n        }));\r\n    }\r\n\r\n    const sendMessage = (ev) => {\r\n        CreateMessage(msgObject)\r\n        getChatMessagesBySelectedChatRoom(msgObject)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container >\r\n                <ButtonGroup >\r\n                    <Button variant=\"secondary\" onClick={getSelectedChatRoom} value=\"ALL\">Global</Button>\r\n                    <Button variant=\"secondary\" onClick={getSelectedChatRoom} value=\"FACTION\">faction</Button>\r\n                    <Button variant=\"secondary\" onClick={getSelectedChatRoom} value=\"SQUAD\">Squad</Button>\r\n                </ButtonGroup>\r\n                <br />\r\n                <ThemeProvider>\r\n                    <ChatList >\r\n                        {allChatMessages.map((chatMessage) =>\r\n                            <ChatListItem key={chatMessage.chatMessageId}>\r\n                                <Avatar imgUrl=\"https://livechat.s3.amazonaws.com/default/avatars/male_8.jpg\" />\r\n                                <Column fill>\r\n                                    <Row justify>\r\n                                        <Title ellipsis>{'Michael'}</Title>\r\n                                        <Subtitle nowrap>{'14:31 PM'}</Subtitle>\r\n                                    </Row>\r\n                                    <Subtitle >\r\n                                        {chatMessage.message}\r\n                                    </Subtitle>\r\n                                </Column>\r\n                            </ChatListItem>\r\n                        )}\r\n                    </ChatList>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter a message\" onChange={onMsgChanged} />\r\n                        {!validInput ? <p>{invalidInputMessage}</p> : null}\r\n                        <IconButton disabled={!validInput} onClick={sendMessage}>\r\n                            <SendIcon />\r\n                        </IconButton>\r\n                    </Form.Group>\r\n                </ThemeProvider>\r\n            </Container>\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n};\r\nexport default ChatMessage;","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\chatMessageStorge.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js",["170","171","172"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { AuthContext } from \"../../utils/Auth.js\";\r\nimport { storePhone } from \"../../utils/dbstorage.js\";\r\n\r\nconst RegisterPhone = ({ history }) => {\r\n\r\n    const handleRegister = async event => {\r\n        event.preventDefault();\r\n        const { phone } = event.target.elements;\r\n        storePhone(phone.value);\r\n    }\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <>\r\n            <section className=\"login-register\">\r\n                <div className=\"container\">\r\n                    <h1>Register Phone</h1>\r\n                    <Form onSubmit={handleRegister} name=\"loginForm\">\r\n                        <Form.Group controlId=\"formPhone\">\r\n                            <Form.Label>Phone Number: </Form.Label>\r\n                            <Form.Control name=\"phone\" type=\"tel\" required />\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Register</button>\r\n                        <Link to=\"/registerphone\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterPhone);","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\MissionMarker.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js",["173"],"import React, { useEffect, useState } from \"react\";\r\nimport firebase from \"../../utils/firebase\";\r\nimport { getPlayerInfo } from \"../../utils/gamedbstorage\";\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\n\r\nconst CurrentGames = (props) => {\r\n\r\n    const [games, setGames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchGames();\r\n        getPlayerInfo();\r\n    }, []);\r\n\r\n    async function fetchGames() {\r\n        const response = await (await fetch('http://localhost:8080/api/fetch/game/all')).json();\r\n        setGames(response)\r\n    }\r\n\r\n    function handleJoin(id) {\r\n        localStorage.setItem(\"Game ID\", id);\r\n        loadPlayerInformationToLocalStorage(id);\r\n        props.history.push(\"/landing\");\r\n        console.log(id);\r\n    }\r\n\r\n    async function loadPlayerInformationToLocalStorage(gameId) {\r\n        let userId = localStorage.getItem(\"User ID\");\r\n        let status = await fetchPlayerObjectFromDB(gameId);\r\n        if (status === true) {\r\n            console.log(\"User already had a Player.\");\r\n        } else {\r\n            console.log(\"User did not have a Player object. Attempting to create one.\");\r\n            status = await createPlayerObject(gameId, userId);\r\n            if(status === true) {\r\n                console.log(\"Player object created successfully.\");\r\n            } else {\r\n                console.log(\"Failed to create Player Object.\");\r\n            }\r\n        }\r\n        let playerId = localStorage.getItem(\"Player ID\");\r\n        status = await fetchSquadFromDB(gameId, playerId);\r\n        if (status === true) {\r\n            console.log(\"Player belongs to a Squad.\")\r\n        } else {\r\n            console.log(\"Player does not belong to a Squad.\");\r\n        }  \r\n    }\r\n\r\n    async function fetchPlayerObjectFromDB(gameId) {\r\n        let userId = localStorage.getItem(\"User ID\");\r\n        let response = await fetch(\"http://localhost:8080/api/fetch/player/game=\" + gameId + \"/user=\" + userId);\r\n        let status = await response.status;\r\n        if (status === 200) {\r\n            let body = await response.json();\r\n            localStorage.setItem(\"Player ID\", body.playerId);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async function createPlayerObject(gameId, userId) {\r\n        let response = await fetch(\"http://localhost:8080/api/create/player/\" + userId + \"/\" + gameId, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    playerId: null,\r\n                    faction: 'HUMAN',\r\n                    alive: true,\r\n                    patientZero: false\r\n                })\r\n            });\r\n            if (response.status === 201) {\r\n                let body = await response.json();\r\n                localStorage.setItem(\"Player ID\", body.playerId);\r\n                return true;\r\n            } else {\r\n                localStorage.setItem(\"Player ID\", null);\r\n                return false;\r\n            }\r\n    }\r\n\r\n    async function fetchSquadFromDB(gameId, playerId,) {\r\n        let response = await fetch(\"http://localhost:8080/api/fetch/squad/game=\" + gameId + \"/player=\" + playerId);\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            localStorage.setItem(\"Squad ID\", body.squadId);\r\n            return true;\r\n        } else {\r\n            localStorage.setItem(\"Squad ID\", null);\r\n            return false;\r\n        }   \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <NavBar />\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <h1>Current Games</h1>\r\n                    <table>\r\n                        <tr>\r\n                            <th>Game</th>\r\n                            <th>Status</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        {games.map((g) =>\r\n                            <tr>\r\n                                <td>{g.name}</td>\r\n                                <td>{g.gameState}</td>\r\n                                <th><button type=\"button\" onClick={() => handleJoin(g.gameId)}>Join</button></th>\r\n                            </tr>\r\n                        )}\r\n                    </table>\r\n                    <br></br>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CurrentGames;","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js",["174","175"],"import React, { useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { CreateGame } from \"../../utils/AdminDbStorge\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst AdminCreateGame = () => {\r\n    const [validGameName, setValidGameName] = useState(false);\r\n    const [validGameDescription, setValidGameDiscription] = useState(false);\r\n    const [gameObject, setGameObject] = useState(\r\n        {\r\n            name: \"\",\r\n            gameState: null,\r\n            startTime: \"2010-10-10T00:00:00.000+00:00\",\r\n            endTime: \"2010-11-10T00:00:00.000+00:00\",\r\n            maxNumberOfPlayers: 5,\r\n            description: \"\"\r\n        })\r\n\r\n    function createGame() {\r\n        CreateGame(gameObject);\r\n    }\r\n\r\n    const onGameNameChange = ev => {\r\n        let currentGameName = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            name: currentGameName\r\n        }));\r\n\r\n        if (currentGameName.length < 2) {\r\n            setValidGameName(false);\r\n        }\r\n        else {\r\n            setValidGameName(true);\r\n        }\r\n    }\r\n\r\n    const onGameDiscriptionChange = ev => {\r\n        let currentGameDiscription = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            description: currentGameDiscription\r\n        }));\r\n\r\n        if (currentGameDiscription.length < 5) {\r\n            setValidGameDiscription(false);\r\n        }\r\n        else {\r\n            setValidGameDiscription(true);\r\n        }\r\n    }\r\n\r\n    \r\n    function handleStartTime(e){\r\n        console.log(e)\r\n   \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <NavBar />\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <h1>Create game</h1>\r\n                    <br />\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter game name...\" onChange={onGameNameChange} />\r\n                        <br />\r\n                        <Form.Control placeholder=\"Enter game description...\" as=\"textarea\" rows={3} onChange={onGameDiscriptionChange} />\r\n                        <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"Start time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2017-05-24T10:30\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <br />  <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"End time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2017-05-24T10:30\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <br />\r\n        \r\n                        <br />\r\n                        <Form.Control as=\"select\" size=\"sm\" custom>\r\n                            <option>Maximum players</option>\r\n                            <option>1</option>\r\n                            <option>2</option>\r\n                            <option>3</option>\r\n                            <option>4</option>\r\n                            <option>5</option>\r\n                        </Form.Control>\r\n                        <br /> <br />\r\n                        <Button disabled={!validGameName || !validGameDescription} onClick={createGame}>Create</Button>\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\nexport default AdminCreateGame;","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js",["176","177","178"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\nimport { storeSquadDB } from '../../utils/squadstorage';\r\n\r\nconst SquadCreate = ({ history }) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    // The userId doesn't work properly (it only works with the dummy data), so we can't fetch the current player\r\n    async function fetchCurrentPlayer() {                                                                    // user should be set to userId, not 1\r\n        const playerResponse = await (await fetch('http://localhost:8080/api/fetch/player/game=' + gameId + '/user=' + 1)).json();\r\n        setCurrentPlayer(playerResponse);\r\n    }\r\n\r\n    localStorage.setItem('squadFaction', currentPlayer.faction);\r\n\r\n\r\n    async function handleCreateSquad(event) {\r\n        event.preventDefault();\r\n        const { squadName, squadMemberAmount } = event.target.elements;\r\n        console.log(squadName.value, squadMemberAmount.value)\r\n        await storeSquadDB(squadName.value, currentPlayer.faction, squadMemberAmount.value);\r\n        history.push(\"/squads\")\r\n    }\r\n\r\n\r\n    // function handleSquadName() {\r\n    //     console.log(document.getElementById('squadName').value);\r\n    //     localStorage.setItem('squadName', (document.getElementById('squadName').value));\r\n    // }\r\n\r\n    // function handleSquadMemberAmount() {\r\n    //     console.log(document.getElementById('squadMemberAmount').value);\r\n    //     localStorage.setItem('squadMemberAmount', (document.getElementById('squadMemberAmount').value));\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <NavBar />\r\n            <div className=\"container\">\r\n                <div id=\"squadCreateForm\">\r\n                    <h2>Create Squad\r\n                    {console.log(currentPlayer)}\r\n                    </h2>\r\n                    <Form onSubmit={handleCreateSquad}>\r\n                        <Form.Group controlId=\"formSquadName\">\r\n                            {/* <Form.Label>Squad Name: </Form.Label> */}\r\n                            <Form.Control id=\"squadName\" name=\"squadName\" type=\"text\" placeholder=\"Squad Name\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadMemberLimit\">\r\n                            {/* <Form.Label>Squad Member Amount: </Form.Label> */}\r\n                            <Form.Control id=\"squadMemberAmount\" name=\"squadMemberAmount\" type=\"text\" placeholder=\"Squad Members (XX max)\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadFaction\">\r\n                            {/* <Form.Label>Squad Faction: </Form.Label> */}\r\n                            <Form.Control name=\"squadFaction\" as=\"select\" required>\r\n                                <option>HUMAN</option>\r\n                                <option>ZOMBIE</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Create</button>\r\n                        <Link to=\"squads\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadCreate","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js",["179","180","181"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadList = () => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [squads, setSquads] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquads();\r\n    }, [])\r\n\r\n    async function fetchSquads() {\r\n        const response = await (await fetch('http://localhost:8080/api/fetch/squad/details/game=' + gameId)).json();\r\n        setSquads(response);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    // The userId doesn't work properly (it only works with the dummy data), so we can't fetch the current player\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await (await fetch('http://localhost:8080/api/fetch/player/game=' + gameId + '/user=' + userId));\r\n        setCurrentPlayer(playerResponse);\r\n    }\r\n\r\n    // Need the current player's playerId in order to push a new squad member to the database\r\n    function handleJoinSquad(id) {\r\n        localStorage.setItem('Squad ID', id);\r\n        console.log(id);\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <NavBar />\r\n                <div className=\"container\">\r\n                    <section className=\"squadList\">\r\n                        <div className=\"container\">\r\n                            <h1>Active Squads</h1>\r\n                            <div>{console.log(squads)}\r\n                                {console.log(currentPlayer)}</div>\r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Members</th>\r\n                                        <th>Faction</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {squads.map((s) =>\r\n                                        <tr>\r\n                                            <td>{s.squadName}</td>\r\n                                            <td>{s.numberOfRegisteredMembers} / {s.maxNumberOfMembers}</td>\r\n                                            <td>{s.faction}</td>\r\n                                            <td>\r\n                                                <Link to=\"squaddetails\">\r\n                                                    <button type=\"button\" onClick={() => handleJoinSquad(s.squadId)}>JOIN</button>\r\n                                                </Link>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <br />\r\n                            <Link to=\"createsquad\">\r\n                                <button>Create New Squad</button>\r\n                            </Link>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadList;","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js",["182","183","184","185","186"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadDetail = (props) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [squadMembers, setSquadMembers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMembers();\r\n    }, [])\r\n\r\n    async function fetchSquadMembers() {\r\n        const response = await (await fetch('http://localhost:8080/api/fetch/squadmember/details/game=' + gameId + '/squad=' + squadId)).json();\r\n        setSquadMembers(response);\r\n    }\r\n\r\n    function getLocation() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        }\r\n    }\r\n\r\n    function showPosition(position) {\r\n        let currentPosition = document.getElementById(\"current-location\");\r\n        currentPosition.innerHTML = \"Latitude: \" + position.coords.latitude +\r\n            \"<br>Longitude: \" + position.coords.longitude;\r\n    }\r\n\r\n    const [squad, setSquad] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquad();\r\n    }, [])\r\n\r\n    async function fetchSquad() {\r\n        const squadResponse = await (await fetch('http://localhost:8080/api/fetch/squad/' + squadId)).json();\r\n        setSquad(squadResponse);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    // The userId doesn't work properly (it only works with the dummy data), so we can't fetch the current player\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await (await fetch('http://localhost:8080/api/fetch/player/game=' + gameId + '/user=' + userId));\r\n        setCurrentPlayer(playerResponse);\r\n    }\r\n\r\n\r\n    function handleLeaveSquad() {\r\n        localStorage.removeItem('Squad ID');\r\n        props.history.push('/squads');\r\n    }\r\n\r\n\r\n    // Need to fetch the current player's id and squad rank in order to make this work properly\r\n    /*     function handleDisbandSquad() {\r\n            if (squadRank = \"LEADER\") {\r\n                fetch('http://localhost:8080/api/delete/squad/' + squadId, {\r\n                method: 'DELETE',\r\n                })\r\n                    .then(res => res.json())\r\n                    .then(res => console.log(res));\r\n                localStorage.removeItem('squadId');\r\n                props.history.push('/squads');\r\n            } else {\r\n                prompt(\"You must be the leader to disband the squad.\")\r\n            }\r\n        } */\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <NavBar />\r\n            <div className=\"container\">\r\n                <section className=\"squadDetail\">\r\n                    <div className=\"container\">\r\n                        <h1>{squad.name}\r\n                            {console.log(squad)}\r\n                            {console.log(squadMembers)}\r\n                            {console.log(currentPlayer)}</h1>\r\n                        <br />\r\n\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Alive</th>\r\n                                    <th>Rank</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {squadMembers.map((s) =>\r\n                                    <tr>\r\n                                        <td>{s.username}</td>\r\n                                        <td>{s.alive.toString()}</td>\r\n                                        <td>{s.squadRank}</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <br />\r\n\r\n                        <button onClick={getLocation}>Mark location</button>\r\n                        <p id=\"current-location\"></p>\r\n                        <button type=\"button\" onClick={() => handleLeaveSquad()}>Leave Squad</button>\r\n\r\n                        <br />\r\n                        <button type=\"button\" /* onClick={() => handleDisbandSquad()} */>Disband Squad (only available to the leader)</button>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadDetail;","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js",["187"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport MenuTest from './MenuTest';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n\r\n                <div id=\"gameMenu\">\r\n\r\n                    <MenuTest />\r\n\r\n                    {/* <div id=\"menuSymbol\">≡</div>\r\n                    <div id=\"menuOptions\" hidden>\r\n                        <div>Map</div>\r\n                        <div>Bite</div>\r\n                        <div>Chat</div>\r\n                        <div>Squads</div>\r\n                        <div>Rules/Home</div>\r\n                        <div>Admin</div>\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\utils\\AdminDbStorge.js",[],"C:\\Users\\shassa\\Desktop\\Final project\\Solution\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\MenuTest.js",[],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":3,"column":42,"nodeType":"194","messageId":"195","endLine":3,"endColumn":48},{"ruleId":"192","severity":1,"message":"196","line":8,"column":8,"nodeType":"194","messageId":"195","endLine":8,"endColumn":13},{"ruleId":"192","severity":1,"message":"197","line":12,"column":33,"nodeType":"194","messageId":"195","endLine":12,"endColumn":55},{"ruleId":"192","severity":1,"message":"198","line":13,"column":22,"nodeType":"194","messageId":"195","endLine":13,"endColumn":33},{"ruleId":"192","severity":1,"message":"199","line":14,"column":20,"nodeType":"194","messageId":"195","endLine":14,"endColumn":29},{"ruleId":"200","severity":1,"message":"201","line":29,"column":8,"nodeType":"202","endLine":29,"endColumn":27,"suggestions":"203"},{"ruleId":"200","severity":1,"message":"204","line":57,"column":8,"nodeType":"202","endLine":57,"endColumn":10,"suggestions":"205"},{"ruleId":"192","severity":1,"message":"206","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":18},{"ruleId":"192","severity":1,"message":"207","line":3,"column":8,"nodeType":"194","messageId":"195","endLine":3,"endColumn":16},{"ruleId":"192","severity":1,"message":"208","line":17,"column":13,"nodeType":"194","messageId":"195","endLine":17,"endColumn":24},{"ruleId":"192","severity":1,"message":"207","line":2,"column":8,"nodeType":"194","messageId":"195","endLine":2,"endColumn":16},{"ruleId":"192","severity":1,"message":"209","line":10,"column":7,"nodeType":"194","messageId":"195","endLine":10,"endColumn":16},{"ruleId":"192","severity":1,"message":"210","line":70,"column":14,"nodeType":"194","messageId":"195","endLine":70,"endColumn":29},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":26},{"ruleId":"192","severity":1,"message":"212","line":11,"column":9,"nodeType":"194","messageId":"195","endLine":11,"endColumn":15},{"ruleId":"200","severity":1,"message":"213","line":17,"column":8,"nodeType":"202","endLine":17,"endColumn":10,"suggestions":"214"},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":26},{"ruleId":"200","severity":1,"message":"215","line":14,"column":8,"nodeType":"202","endLine":14,"endColumn":10,"suggestions":"216"},{"ruleId":"200","severity":1,"message":"213","line":26,"column":8,"nodeType":"202","endLine":26,"endColumn":10,"suggestions":"217"},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":26},{"ruleId":"192","severity":1,"message":"218","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":14},{"ruleId":"200","severity":1,"message":"219","line":15,"column":8,"nodeType":"202","endLine":15,"endColumn":10,"suggestions":"220"},{"ruleId":"200","severity":1,"message":"221","line":38,"column":8,"nodeType":"202","endLine":38,"endColumn":10,"suggestions":"222"},{"ruleId":"200","severity":1,"message":"213","line":50,"column":8,"nodeType":"202","endLine":50,"endColumn":10,"suggestions":"223"},{"ruleId":"192","severity":1,"message":"218","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":14},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Phone' is defined but never used.","'setInvalidInputMessage' is assigned a value but never used.","'setPlayerId' is assigned a value but never used.","'setGameId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'msgObject'. Either include it or remove the dependency array.","ArrayExpression",["226"],"React Hook useEffect has a missing dependency: 'squadId'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMsgObject' needs the current value of 'squadId'.",["227"],"'Redirect' is defined but never used.","'firebase' is defined but never used.","'currentUser' is assigned a value but never used.","'useStyles' is assigned a value but never used.","'handleStartTime' is defined but never used.","'Component' is defined but never used.","'userId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCurrentPlayer'. Either include it or remove the dependency array.",["228"],"React Hook useEffect has a missing dependency: 'fetchSquads'. Either include it or remove the dependency array.",["229"],["230"],"'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSquadMembers'. Either include it or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'fetchSquad'. Either include it or remove the dependency array.",["232"],["233"],"no-global-assign","no-unsafe-negation",{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"238","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"238","fix":"247"},"Update the dependencies array to be: [msgObject, msgObject.faction]",{"range":"248","text":"249"},"Update the dependencies array to be: [squadId]",{"range":"250","text":"251"},"Update the dependencies array to be: [fetchCurrentPlayer]",{"range":"252","text":"253"},"Update the dependencies array to be: [fetchSquads]",{"range":"254","text":"255"},{"range":"256","text":"253"},"Update the dependencies array to be: [fetchSquadMembers]",{"range":"257","text":"258"},"Update the dependencies array to be: [fetchSquad]",{"range":"259","text":"260"},{"range":"261","text":"253"},[1247,1266],"[msgObject, msgObject.faction]",[2043,2045],"[squadId]",[579,581],"[fetchCurrentPlayer]",[444,446],"[fetchSquads]",[770,772],[522,524],"[fetchSquadMembers]",[1282,1284],"[fetchSquad]",[1604,1606]]