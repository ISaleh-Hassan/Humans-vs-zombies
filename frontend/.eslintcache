[{"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\index.js":"1","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\App.js":"2","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js":"4","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js":"5","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js":"6","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js":"7","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js":"8","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js":"9","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js":"10","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js":"11","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js":"12","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js":"13","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js":"14","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js":"15","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js":"16","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js":"17","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js":"18","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js":"19","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js":"20","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js":"21","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js":"22","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js":"23","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js":"24","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js":"25","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js":"26","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js":"27","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js":"28","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js":"29","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js":"30","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js":"31","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js":"32","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js":"33","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js":"34","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js":"35","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js":"36","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js":"37","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js":"38","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js":"39","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js":"40","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js":"41","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js":"42","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js":"43","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js":"44","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\KillStorage.js":"45","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditMissionMarker.js":"46","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Missions.js":"47","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\GameMap.js":"48","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\missionStorage.js":"49","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadCheckinStorage.js":"50"},{"size":517,"mtime":1609756958787,"results":"51","hashOfConfig":"52"},{"size":3867,"mtime":1609925183502,"results":"53","hashOfConfig":"52"},{"size":375,"mtime":1606999392896,"results":"54","hashOfConfig":"52"},{"size":651,"mtime":1608055777032,"results":"55","hashOfConfig":"52"},{"size":577,"mtime":1608055765360,"results":"56","hashOfConfig":"52"},{"size":336,"mtime":1608625691474,"results":"57","hashOfConfig":"52"},{"size":4366,"mtime":1609873619363,"results":"58","hashOfConfig":"52"},{"size":2826,"mtime":1609873619359,"results":"59","hashOfConfig":"52"},{"size":1830,"mtime":1609878104072,"results":"60","hashOfConfig":"52"},{"size":2055,"mtime":1609844200500,"results":"61","hashOfConfig":"52"},{"size":7137,"mtime":1609927714468,"results":"62","hashOfConfig":"52"},{"size":3032,"mtime":1609925155780,"results":"63","hashOfConfig":"52"},{"size":5165,"mtime":1609927720210,"results":"64","hashOfConfig":"52"},{"size":9062,"mtime":1609863323970,"results":"65","hashOfConfig":"52"},{"size":2613,"mtime":1609788451456,"results":"66","hashOfConfig":"52"},{"size":1067,"mtime":1608304779964,"results":"67","hashOfConfig":"52"},{"size":1298,"mtime":1609856892061,"results":"68","hashOfConfig":"52"},{"size":3934,"mtime":1609873619376,"results":"69","hashOfConfig":"52"},{"size":5945,"mtime":1609873619371,"results":"70","hashOfConfig":"52"},{"size":12492,"mtime":1609873619380,"results":"71","hashOfConfig":"52"},{"size":7409,"mtime":1609873619389,"results":"72","hashOfConfig":"52"},{"size":5973,"mtime":1609925115596,"results":"73","hashOfConfig":"52"},{"size":7506,"mtime":1609873619384,"results":"74","hashOfConfig":"52"},{"size":6048,"mtime":1609873619394,"results":"75","hashOfConfig":"52"},{"size":820,"mtime":1608055777039,"results":"76","hashOfConfig":"52"},{"size":3814,"mtime":1609856892102,"results":"77","hashOfConfig":"52"},{"size":602,"mtime":1609842202376,"results":"78","hashOfConfig":"52"},{"size":505,"mtime":1609927787598,"results":"79","hashOfConfig":"52"},{"size":891,"mtime":1608304780024,"results":"80","hashOfConfig":"52"},{"size":773,"mtime":1609788451464,"results":"81","hashOfConfig":"52"},{"size":406,"mtime":1609788451463,"results":"82","hashOfConfig":"52"},{"size":13095,"mtime":1609873619367,"results":"83","hashOfConfig":"52"},{"size":85,"mtime":1608536296998,"results":"84","hashOfConfig":"52"},{"size":7011,"mtime":1609927694680,"results":"85","hashOfConfig":"52"},{"size":671,"mtime":1608625691467,"results":"86","hashOfConfig":"52"},{"size":5674,"mtime":1609927812273,"results":"87","hashOfConfig":"52"},{"size":1057,"mtime":1609856892097,"results":"88","hashOfConfig":"52"},{"size":11204,"mtime":1609863323972,"results":"89","hashOfConfig":"52"},{"size":4247,"mtime":1609863323982,"results":"90","hashOfConfig":"52"},{"size":1989,"mtime":1609842202369,"results":"91","hashOfConfig":"52"},{"size":3056,"mtime":1609842202365,"results":"92","hashOfConfig":"52"},{"size":813,"mtime":1608734385947,"results":"93","hashOfConfig":"52"},{"size":3406,"mtime":1609842202362,"results":"94","hashOfConfig":"52"},{"size":183,"mtime":1609842202379,"results":"95","hashOfConfig":"52"},{"size":455,"mtime":1609839696434,"results":"96","hashOfConfig":"52"},{"size":11629,"mtime":1609927727401,"results":"97","hashOfConfig":"52"},{"size":2615,"mtime":1609850850715,"results":"98","hashOfConfig":"52"},{"size":605,"mtime":1609842202276,"results":"99","hashOfConfig":"52"},{"size":3144,"mtime":1609842202382,"results":"100","hashOfConfig":"52"},{"size":2834,"mtime":1609842202409,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"pqs3e0",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"104"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"104"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"104"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"104"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"104"},"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\index.js",[],["222","223"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\App.js",["224"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js",["225"],"import React, { useContext, useState } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { storeUserDB } from \"../../utils/dbstorage\";\r\nimport firebase from \"../../utils/firebase\";\r\nimport Form from 'react-bootstrap/Form'\r\nimport { AuthContext } from \"../../utils/Auth\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { clearUser } from \"../../utils/localstorage\";\r\n\r\nconst Register = ({ history }) => {\r\n\r\n    const BUTTON_STYLES = {\r\n        width: '120px',\r\n        height: '40px',\r\n        margin: '2px',\r\n        padding: '1px'\r\n    }\r\n\r\n    let [userType, setUserType] = useState(\"PLAYER\");\r\n\r\n    const handleRegister = async event => {\r\n        event.preventDefault();\r\n        let { username, email, password, firstname, lastname } = event.target.elements;\r\n        if (password.lenght < 6) {\r\n            alert(\"Password should be more than 6\")\r\n        }\r\n        try {\r\n            const status = await storeUserDB(username.value, firstname.value, lastname.value, userType, password.value, email.value);\r\n            if (status === 201) {\r\n                firebase.auth().createUserWithEmailAndPassword(email.value, password.value)\r\n                    .then(userData => {\r\n                        userData.user.sendEmailVerification();\r\n                        history.push(\"/login\")\r\n                    })\r\n                    .catch(err => {\r\n                        alert(err.message);\r\n                    });\r\n            } else {\r\n                alert(\"Username or email already in use!\")\r\n            }\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n    }\r\n\r\n    const handleCheckbox = e => {\r\n        const target = e.target;\r\n        let isChecked = target.checked;\r\n        if (isChecked) {\r\n            setUserType('ADMINISTRATOR')\r\n        } else {\r\n            setUserType('PLAYER')\r\n        }\r\n    }\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderOutside />\r\n            <section className=\"login-register\">\r\n                <div className=\"container\">\r\n                    <h1>Register</h1>\r\n                    <Form onSubmit={handleRegister}>\r\n                        <Form.Group controlId=\"formFirstName\">\r\n                            <Form.Label>First Name: </Form.Label>\r\n                            <Form.Control name=\"firstname\" type=\"text\" placeholder=\"First Name\" required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formLastName\">\r\n                            <Form.Label>Last Name: </Form.Label>\r\n                            <Form.Control name=\"lastname\" type=\"text\" placeholder=\"Last Name\" required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formUserName\">\r\n                            <Form.Label>User Name: </Form.Label>\r\n                            <Form.Control name=\"username\" type=\"text\" placeholder=\"Username\" required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formPassword\">\r\n                            <Form.Label>Password: </Form.Label>\r\n                            <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formEmail\">\r\n                            <Form.Label>Email: </Form.Label>\r\n                            <Form.Control name=\"email\" type=\"email\" placeholder=\"Email\" required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formAdminCheckbox\">\r\n                            <Form.Check type=\"checkbox\" label=\"Register as admin?\" onChange={handleCheckbox} />\r\n                        </Form.Group>\r\n                        <Button variant=\"dark\" style={BUTTON_STYLES} type=\"submit\">Register</Button>\r\n                        <Link to=\"/login\">\r\n                            <Button variant=\"danger\" style={BUTTON_STYLES}>Cancel</Button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(Register);","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js",["226","227","228"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { AuthContext } from \"../../utils/Auth.js\";\r\nimport { getUserInfo, storePhone } from \"../../utils/dbstorage.js\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\n\r\nconst RegisterPhone = ({ history }) => {\r\n\r\n    let userId = localStorage.getItem(\"User ID\")\r\n    const isVerified = firebase.auth().currentUser.emailVerified;\r\n\r\n    const handleRegister = async event => {\r\n        event.preventDefault();\r\n        const { phone } = event.target.elements;\r\n        storePhone(userId, phone.value);\r\n        history.push('/');\r\n    }\r\n\r\n    function redirectToIndex() {\r\n        history.push('/');\r\n    }\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <>\r\n            {isVerified\r\n                ?\r\n                <>\r\n                    <HeaderOutside />\r\n                    <section className=\"login-register\">\r\n                        <div className=\"container\">\r\n                            <h1>Register Phone</h1>\r\n                            <Form onSubmit={handleRegister} name=\"loginForm\">\r\n                                <Form.Group controlId=\"formPhone\">\r\n                                    <Form.Label>Phone Number: </Form.Label>\r\n                                    <Form.Control name=\"phone\" type=\"tel\" required />\r\n                                </Form.Group>\r\n                                <button type=\"submit\">Register</button>\r\n                                <Link to=\"/\">\r\n                                    <button>Cancel</button>\r\n                                </Link>\r\n                            </Form>\r\n                        </div>\r\n                    </section>\r\n                </>\r\n                : \r\n                redirectToIndex()\r\n                }\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterPhone);","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js",["229","230"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js",["231"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js",["232"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js",["233","234","235","236"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from '../StylingComponents/Header';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { FetchAllPlayers, GetPlayerData, UpdatePlayer, DeletePlayer, FetchAllPlayersByGameId } from \"../../utils/PlayerStorage\";\r\nimport { FetchAllGames } from \"../../utils/GameStorage\";\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\n\r\nconst PlayerState = (props) => {\r\n  const [allPlayers, setAllPlayers] = useState([])\r\n  const [playerObject, setPlayerObject] = useState({})\r\n  const [allGames, setAllGames] = useState([])\r\n  const [selectedPlayerId, setSelectedPlayerId] = useState(null);\r\n  const [selectedGameId, setSelectedGameId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllGames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedPlayerId !== null) {\r\n      fetchPlayer()\r\n    }\r\n    else {\r\n      setPlayerObject({})\r\n    }\r\n  }, [selectedPlayerId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedGameId !== null) {\r\n      fetchAllPlayersByGameId()\r\n    }\r\n    else {\r\n      setPlayerObject({})\r\n    }\r\n  }, [selectedGameId]);\r\n\r\n  useEffect(() => {\r\n\r\n  }, [playerObject]);\r\n\r\n  async function fetchAllGames() {\r\n    let response = await FetchAllGames();\r\n    if (response !== null) {\r\n      setAllGames(response);\r\n    } else {\r\n      alert('Failed to fetch games');\r\n      setAllGames([]);\r\n    }\r\n  }\r\n\r\n  async function fetchAllPlayersByGameId() {\r\n    let response = await FetchAllPlayersByGameId(selectedGameId);\r\n    if (response !== null) {\r\n      setAllPlayers(response)\r\n    } else {\r\n      alert('Failed to fetch player by id');\r\n      setAllPlayers([]);\r\n    }\r\n  }\r\n\r\n  async function fetchPlayer() {\r\n    let response = await GetPlayerData(selectedPlayerId);\r\n    if (response !== null) {\r\n      setPlayerObject(response);\r\n    } else {\r\n      alert('Failed to fetch player');\r\n      setPlayerObject({});\r\n    }\r\n  }\r\n\r\n  function cancelEditingPlayer() {\r\n    props.history.push(\"/admin\");\r\n  }\r\n\r\n  async function editPlayer() {\r\n    let response = await UpdatePlayer(playerObject);\r\n    if (response.status === 200) {\r\n      props.history.push(\"/admin\");\r\n    } else if (response.status === 400) {\r\n      alert(\"Game name must be unique!\");\r\n    } else {\r\n      alert(\"Something went wrong while updating the player.\");\r\n    }\r\n  }\r\n\r\n  async function deletePlayer() {\r\n    let response = await DeletePlayer(selectedPlayerId);\r\n    if (response.status === 200) {\r\n      props.history.push(\"/admin\");\r\n    }\r\n    else {\r\n      alert(\"Something went wrong while deleting the player.\");\r\n    }\r\n  }\r\n\r\n  function isEmpty(obj) {\r\n    for (var prop in obj) {\r\n      if (obj.hasOwnProperty(prop))\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function handleChangePlayerToUpdate(ev) {\r\n    let selectedPlayer = ev.target.value;\r\n    if (selectedPlayer !== \"0\") {\r\n      setSelectedPlayerId(selectedPlayer)\r\n      setPlayerObject({})\r\n    }\r\n    else {\r\n      setSelectedPlayerId(null);\r\n    }\r\n  }\r\n\r\n  function handleChangePlayerFaction(ev) {\r\n    let selectedFaction = ev.target.value;\r\n    if (selectedFaction !== \"0\") {\r\n      setPlayerObject((prevState) => ({\r\n        ...prevState,\r\n        faction: selectedFaction\r\n      }));\r\n    }\r\n    else {\r\n      setSelectedPlayerId(null);\r\n    }\r\n  }\r\n\r\n  function handleChangePlayerIsPatientZero(ev) {\r\n    let selectedState = ev.target.value;\r\n    if (selectedState !== \"0\") {\r\n      setPlayerObject((prevState) => ({\r\n        ...prevState,\r\n        patientZero: convertStringValueToBoolean(selectedState)\r\n      }));\r\n    }\r\n    else {\r\n      setSelectedPlayerId(null);\r\n    }\r\n  }\r\n\r\n  function convertStringValueToBoolean(value) {\r\n    if (value === \"true\") {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n  function handleChangePlayerIsAlive(ev) {\r\n    let selectedState = ev.target.value;\r\n    if (selectedState !== \"0\") {\r\n      setPlayerObject((prevState) => ({\r\n        ...prevState,\r\n        alive: convertStringValueToBoolean(selectedState)\r\n      }));\r\n    }\r\n    else {\r\n      setSelectedPlayerId(null);\r\n    }\r\n  }\r\n\r\n  function handleChangeGame(ev) {\r\n    let selectedGame = ev.target.value;\r\n    if (selectedGame !== \"0\") {\r\n      setSelectedGameId(selectedGame)\r\n    }\r\n    else {\r\n      setSelectedGameId(null);\r\n      setSelectedPlayerId(null)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Header />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Edit Player State</h1>\r\n\r\n          <Form.Group>\r\n            <Form.Control\r\n              onChange={handleChangeGame}\r\n              className=\"mb-4\"\r\n              as=\"select\">\r\n              <option value=\"0\">Select game...</option>\r\n              {allGames.filter(game => game.gameState !== 'COMPLETED').map(filteredGame => (\r\n                <option key={filteredGame.gameId} value={filteredGame.gameId}>\r\n                  {filteredGame.name}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n            {selectedGameId !== null ?\r\n              <>\r\n                <Form.Label>All players</Form.Label>\r\n                <Form.Control\r\n                  onChange={handleChangePlayerToUpdate}\r\n                  className=\"mb-2\"\r\n                  as=\"select\">\r\n                  <option value=\"0\">Select player...</option>\r\n                  {allPlayers.map(player => (\r\n                    <option key={player.playerId} value={player.playerId}>\r\n                      {player.playerId}\r\n                    </option>\r\n                  ))}\r\n                </Form.Control>\r\n              </>:null}\r\n          </Form.Group>\r\n\r\n          {selectedPlayerId !== null && !isEmpty(playerObject) ?\r\n            <div>\r\n              <Form.Label>Faction</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                className=\"mb-2\"\r\n                onChange={handleChangePlayerFaction}>\r\n                {playerObject.faction === 'HUMAN' ?\r\n                  <>\r\n                    <option selected value=\"HUMAN\">Human</option>\r\n                    <option value=\"ZOMBIE\">Zombie</option>\r\n                  </>\r\n                  :\r\n                  <>\r\n                    <option\r\n                      value=\"HUMAN\">Human</option>\r\n                    <option\r\n                      selected\r\n                      value=\"ZOMBIE\">Zombie</option>\r\n                  </>\r\n                }\r\n\r\n              </Form.Control>\r\n\r\n              {playerObject.faction === \"HUMAN\" ?\r\n                <>\r\n                  <Form.Label>Is alive</Form.Label>\r\n                  <Form.Control\r\n                    className=\"mb-2\"\r\n                    onChange={handleChangePlayerIsAlive}\r\n                    as=\"select\">\r\n                    {playerObject.alive ?\r\n                      <>\r\n                        <option\r\n                          selected\r\n                          value={true}>Yes</option>\r\n                        <option\r\n                          value={false}>No</option>\r\n                      </>\r\n                      :\r\n                      <>\r\n                        <option\r\n                          value={true}>Alive</option>\r\n                        <option\r\n                          selected\r\n                          value={false}>Dead</option>\r\n                      </>\r\n                    }\r\n                  </Form.Control>\r\n                </>\r\n                : null}\r\n\r\n              {playerObject.faction === \"ZOMBIE\" ?\r\n                <>\r\n                  <Form.Label>Is patient zero</Form.Label>\r\n                  <Form.Control\r\n                    onChange={handleChangePlayerIsPatientZero}\r\n                    as=\"select\">\r\n                    {playerObject.patientZero ?\r\n                      <>\r\n                        <option selected value={true}>Yes</option>\r\n                        <option value={false}>No</option>\r\n                      </>\r\n                      :\r\n                      <>\r\n                        <option >Yes</option>\r\n                        <option selected>No</option>\r\n                      </>\r\n                    }\r\n                  </Form.Control>\r\n                </>\r\n                : null}\r\n            </div> : null\r\n          }\r\n          {selectedPlayerId && selectedGameId ?\r\n            <>\r\n              <Button\r\n                onClick={editPlayer}\r\n                className=\"m-1\"\r\n                size=\"sm\"\r\n                disabled={isEmpty(playerObject)}>Update</Button>\r\n\r\n              <Button\r\n                onClick={deletePlayer}\r\n                className=\"m-1\"\r\n                size=\"sm\"\r\n                disabled={isEmpty(playerObject)}\r\n                variant=\"danger\">Delete</Button>\r\n\r\n              <Button\r\n                onClick={cancelEditingPlayer}\r\n                className=\"m-1\"\r\n                size=\"sm\"\r\n                variant=\"warning\">Cancel</Button>\r\n            </> : null}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlayerState;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js",["237","238"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\nimport Header from '../StylingComponents/Header';\r\n\r\nconst BiteHuman = ({history}) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await FetchPlayer(gameId, userId);\r\n        if (response !== null) {\r\n            setCurrentPlayer(response);\r\n        } else {\r\n            alert(\"Could not find Player object.\");\r\n        }\r\n    }\r\n\r\n\r\n    if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n            </div>\r\n        )\r\n    } else if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div id=\"codeEntryContainer\">\r\n                    <h2>BITE CODE ENTRY</h2>\r\n                    <input type=\"text\" placeholder=\"CODE-HERE\" />\r\n                    <br/>\r\n                    <button>Make Zombie</button>\r\n                    <button>Kill</button>\r\n                </div>\r\n        \r\n                <br/>\r\n        \r\n                <div id=\"killContainer\">\r\n                    <input type=\"text\" placeholder=\"Coordinates (auto)\" />\r\n                    <br/>\r\n                    <input type=\"text\" placeholder=\"Victim Description\" />\r\n                    <br/>\r\n                    <button>Submit</button>\r\n                    <button>Cancel</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h3>Something went wrong...</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BiteHuman;\r\n\r\n\r\n\r\n\r\n/* class BiteHuman extends Component {\r\n\r\n    state = {\r\n        details: []\r\n    };\r\n\r\n    componentDidMount() {\r\n      fetch('/api/fetch/player/1')\r\n          .then(res => res.json())\r\n          .then((data) => {\r\n              this.setState({details: data})\r\n          })\r\n          .catch(console.log);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{this.state.details.biteCode}</div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BiteHuman; */","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js",["239","240"],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from \"../../utils/firebase\";\r\nimport { getUser } from \"../../utils/localstorage.js\";\r\nimport { Button } from 'react-bootstrap';\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\nimport { clearUser } from \"../../utils/localstorage\";\r\nimport { fetchUser } from \"../../utils/dbstorage\";\r\n\r\nconst Home = (props) => {\r\n\r\n  const username = getUser();\r\n  const isVerified = firebase.auth().currentUser.emailVerified;\r\n  const userPhone = firebase.auth().currentUser.phoneNumber;\r\n  const userId = localStorage.getItem(\"User ID\")\r\n  const usersPhone = localStorage.getItem(\"User Phone\")\r\n  const user = localStorage.getItem('Usertype');\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('jwt') === 'undefined') {\r\n      handleSignOut();\r\n    } else {\r\n      fetchUserID();\r\n    }\r\n  }, [])\r\n\r\n  async function fetchUserID() {\r\n    // user = await fetchUser(userId);\r\n    // if (user != null) {\r\n    //   console.log(user)\r\n    // } \r\n}\r\n\r\n  const handleSignOut = () => {\r\n    firebase.auth().signOut()\r\n    clearUser();\r\n  }\r\n\r\n\r\n  // The usertype should be determined by calling the database, not by using local storage as that can be edited.\r\n  // This should be updated ASAP.\r\n  const userType = localStorage.getItem('Usertype');\r\n\r\n  function handleAdminAccess() {\r\n    if (userType === 'ADMINISTRATOR') {\r\n      props.history.push('/admin')\r\n    } else {\r\n      alert('You do not have access to the admin menu')\r\n    }\r\n  }\r\n\r\n  if (!isVerified && userPhone === null) {\r\n    return (\r\n      <>\r\n        <section className=\"home\">\r\n          <div className=\"container\">\r\n            <HeaderOutside />\r\n            <h1>Home</h1>\r\n            <p>Welcome, {user}</p>\r\n            <p>A verification link has been sent to your email. Please verify your email to register your phone.</p>\r\n            {userType === 'ADMINISTRATOR' ? <Button variant=\"dark\" onClick={handleAdminAccess}>ADMIN</Button> : null}\r\n            <br />\r\n            <Button variant=\"dark\" onClick={() => props.history.push(\"/currentgames\")}>Browse Games</Button>\r\n            <br />\r\n            <Button variant=\"danger\" onClick={handleSignOut}>Sign out</Button>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } else if (isVerified && !usersPhone) {\r\n    // if (window.localStorage) {\r\n    //   if (!localStorage.getItem('firstLoad')) {\r\n    //     localStorage['firstLoad'] = true;\r\n    //     window.location.reload();\r\n    //   }\r\n    //   else\r\n    //     localStorage.removeItem('firstLoad');\r\n    // }\r\n    return (\r\n      <>\r\n        <section className=\"home\">\r\n          <div className=\"container\">\r\n            <HeaderOutside />\r\n            <h1>Home</h1>\r\n            <p>Welcome, {username}</p>\r\n            <p><Link to=\"/registerphone\">You may now register your phone!</Link></p>\r\n            {userType === 'ADMINISTRATOR' ? <Button variant=\"dark\" onClick={handleAdminAccess}>ADMIN</Button> : null}\r\n            <br />\r\n            <Button variant=\"dark\" onClick={() => props.history.push(\"/currentgames\")}>Browse Games</Button>\r\n            <br />\r\n            <Button variant=\"dark\" onClick={handleSignOut}>Sign out</Button>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <section className=\"home\">\r\n          <div className=\"container\">\r\n            <HeaderOutside />\r\n            <h1>Home</h1>\r\n            <p>Welcome, {user}</p>\r\n            {userType === 'ADMINISTRATOR' ? <Button variant=\"dark\" onClick={handleAdminAccess}>ADMIN</Button> : null}\r\n            <br />\r\n            <Button variant=\"dark\" onClick={() => props.history.push(\"/currentgames\")}>Browse Games</Button>\r\n            <br />\r\n            <Button variant=\"dark\" onClick={handleSignOut}>Sign out</Button>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js",["241"],"import React, { useEffect, useState } from 'react';\r\nimport Header from '../StylingComponents/Header';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FetchGame } from '../../utils/GameStorage';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\nimport { FetchSquadMember } from '../../utils/SquadMemberStorage';\r\nimport HeaderOutside from '../StylingComponents/HeaderOutside';\r\n\r\nconst LandingPage = (props) => {\r\n\r\n    const [hasJoined, setHasJoined] = useState(false);\r\n    const [gameDetails, setGameDetails] = useState({});\r\n    const [currentUser, setCurrentUser] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let gameId = localStorage.getItem('Game ID');\r\n        let userId = localStorage.getItem('User ID');\r\n        fetchCurrentUser();\r\n        FetchGame(gameId).then(data => {\r\n            if (data !== null) {\r\n                setGameDetails(data);\r\n            } else {\r\n                alert(\"GAME NOT FOUND!\");\r\n                props.history.push(\"/currentgames\");\r\n            }\r\n        }).then(() => {\r\n            FetchPlayer(gameId, userId).then(data => {\r\n                if (data !== null) {\r\n                    setHasJoined(true);\r\n                    localStorage.setItem('Player ID', data.playerId);\r\n                    localStorage.setItem('Faction', data.faction);\r\n                    FetchSquadMember(gameId, data.playerId).then(data2 => {\r\n                        if (data2 !== null) {\r\n                            localStorage.setItem('SquadMember ID', data2.squadMemberId);\r\n                            localStorage.setItem('Squad ID', data2.squadId);\r\n                            localStorage.setItem('Squad Rank', data2.squadRank);\r\n                        } else {\r\n                            localStorage.setItem('SquadMember ID', null);\r\n                            localStorage.setItem('Squad ID', null);\r\n                            localStorage.setItem('Squad Rank', null);\r\n                        }\r\n                    });\r\n                } else {\r\n                    localStorage.setItem('Player ID', null);\r\n                    localStorage.setItem('Faction', null);\r\n                    localStorage.setItem('Squad ID', null);\r\n                    localStorage.setItem('SquadMember ID', null);\r\n                    localStorage.setItem('Squad Rank', null);\r\n                }\r\n            })\r\n        });\r\n    }, []);\r\n\r\n\r\n    async function fetchCurrentUser() {\r\n        const token = localStorage.getItem('jwt');\r\n        const userId = localStorage.getItem('User ID');\r\n        const response = await fetch('/api/fetch/useraccount/' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            setCurrentUser(body);\r\n        } else {\r\n            alert(\"Could not find user object.\")\r\n            setCurrentUser({});\r\n        }\r\n    };\r\n    \r\n\r\n    const handleJoinGame = () => {\r\n        props.history.push('/choosefaction');\r\n    };\r\n    \r\n    // Need to remove the game id from the current player in the database as well?\r\n    const handleLeaveGame = () => {\r\n        localStorage.removeItem('Game ID');\r\n        localStorage.removeItem('Player ID');\r\n        localStorage.removeItem('Squad ID');\r\n        localStorage.removeItem('SquadMember ID');\r\n        localStorage.removeItem('Faction');\r\n        localStorage.removeItem('Squad Rank');\r\n        props.history.push('/currentgames');\r\n    };\r\n\r\n    const BUTTON_STYLES = {\r\n    width: '150px',\r\n    height: '40px',\r\n    margin: '2px',\r\n    padding: '1px'\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    {hasJoined ? <Header /> : <HeaderOutside />}\r\n                    <div id=\"landing\">\r\n                        <h2> {gameDetails.name}</h2>\r\n                        <div id=\"description\">\r\n                            <br />\r\n                            <h3>Description: </h3>\r\n                            <p> {gameDetails.description} </p>\r\n                            <br />\r\n                            <h4>Start Time: {gameDetails.stringStart}</h4>\r\n                            <br />\r\n                            <h4>End Time: {gameDetails.stringEnd}</h4>\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span>\r\n                            {hasJoined ?\r\n                                <>\r\n                                {gameDetails.calculatedGameState === 'PREPARATION' ? <Button disabled={true} variant=\"success\" style={BUTTON_STYLES} >Already Joined</Button> : null }\r\n                                </> :\r\n                                <>\r\n                                {gameDetails.calculatedGameState === 'PREPARATION' ? <Button variant=\"success\" style={BUTTON_STYLES} disabled={currentUser.userType === 'ADMINISTRATOR'} onClick={handleJoinGame}>Join Game</Button> : null }\r\n                                </>\r\n                            }\r\n                                <Button variant=\"secondary\" style={BUTTON_STYLES} onClick={handleLeaveGame}>Go Back</Button>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div id=\"rules\">\r\n                        <br />\r\n                        <h3>Rules: </h3>\r\n                        <div>\r\n                            <h4>Overview</h4>\r\n                            <ul>\r\n                                <li>Humans vs. Zombies is a game of tag.</li>\r\n                                <li>All players begin as humans, and one is randomly chosen to be the “Original Zombie”.</li>\r\n                                <li>The Original Zombie tags human players and turns them into zombies.</li>\r\n                                <li>Zombies must tag and eat a human every 24 hours or they starve to death and are out of the game.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Objective</h4>\r\n                            <ul>\r\n                                <li>The Zombies win when all human players have been tagged and turned into zombies.</li>\r\n                                <li>The Humans win by surviving long enough for all of the zombies to starve.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Equipment</h4>\r\n                            <ul>\r\n                                <li>Bandana</li>\r\n                                <li>Foam Dart Blaster (aka Nerf Gun)</li>\r\n                                <li>Marshmallow Launcher</li>\r\n                                <li>Rolled up (CLEAN) socks</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Safe Zones</h4>\r\n                            <p>Some areas on campus are “no play zones,” where the game is permanently suspended. Blasters must be concealed and no players may be stunned or tagged. </p>\r\n                            <br />\r\n                            <p>These areas include:</p>\r\n                            <ul>\r\n                                <li>Bathrooms</li>\r\n                                <li>Health Centers</li>\r\n                                <li>Libraries</li>\r\n                                <li>Indoor Athletic Facilities</li>\r\n                                <li>Academic Buildings</li>\r\n                            </ul>\r\n                            <br />\r\n                            <p>Other areas on campus are merely \"safe zones\", where gameplay continues but humans can't be tagged (unless a zombie has both of their feet outside the safe zone). These areas include: Dorm rooms and Dining Halls</p>\r\n                            <br />\r\n\r\n                            <h4>Safety Rules</h4>\r\n                            <p>Rules created for the safety of all players are strictly enforced. Violation of safety rules will result in a ban from the game.</p>\r\n                            <br />\r\n                            <ul>\r\n                                <li>No realistic looking weaponry. Blasters must be brightly colored and have blaze-orange tips.</li>\r\n                                <li>Blasters may not be visible inside of academic buildings or jobs on campus.</li>\r\n                                <li>Players may not use cars or play where there is traffic.</li>\r\n                                <li>Socks, Darts or Marshmallows must not hurt on impact.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Human Rules</h4>\r\n                            <ul>\r\n                                <li>Wearing a Bandanna: Humans must wear a headband around an arm or leg to identify them as players of the game. (This headband will come in handy when you become a zombie!)</li>\r\n                                <li>Stunning a Zombie: Humans may stun a Zombie for 15 minutes by blasting them with a blaster or throwing a sock at them.</li>\r\n                                <li>When Tagged By a Zombie: When tagged by a Zombie, a Human is required to distribute their ID card. One hour after being tagged, tie your bandanna around your head – you are now a member of the Zombie team! Go tag some Humans.</li>\r\n                                <li>Staying On Campus: Humans must sleep on campus. If you need to leave campus for longer than 24 hours, contact the game moderators and remove yourself from the game.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Zombie Rules</h4>\r\n                            <ul>\r\n                                <li>Feeding: Zombies must feed every 24 hours. A zombie feeds by reporting their tag on the app.</li>\r\n                                <li>Tagging: A tag is a firm touch to any part of a Human. After tagging a Human the Zombie must collect their Bite Code and report it in the app.</li>\r\n                                <li>Getting Shot: When hit with a dart, a marshmallow, or a sock, a Zombie is stunned for 15 minutes. A stunned zombie may not interact with the game in any way. This includes shielding other zombies from bullets or continuing to run toward a human. If shot while stunned, the zombie’s stun timer is reset back to 15 minutes.</li>\r\n                                <li>Wearing A Headband: Zombies must wear a bandanna around their heads at all times. The Original Zombie does not need to wear a headband.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Other Rules</h4>\r\n                            <ul>\r\n                                <li>Blasting Non-Players: Blasting non-players is a bannable offense.</li>\r\n                                <li>Non-Player Interference: People who are not registered participants may not directly interact with the game. This includes bringing food to humans or spying for either team.</li>\r\n                                <li>Safe Zones: A zombie must have both feet outside of a safe zone to tag a human. Humans can stun zombies from inside of a safe-zone.</li>\r\n                                <li>No Shields: Zombies may not use shields to deflect foam darts, marshmallows or socks.</li>\r\n                                <li>Athletes: Athletes are safe during official practices, but not on the way to or from practice.</li>\r\n                                <li>Required Academic Events: Similarly, students at required academic events are safe for the duration of the event (even if this event is in a free-play zone), but they are not safe on the way to or from the event.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>DBag Clause</h4>\r\n                            <p>Don’t be a douchebag. Everyone plays Humans vs. Zombies to have fun, and the rules of HvZ only exist because we agree they do. That’s why the most important rule of Humans vs. Zombies is to treat your fellow players with respect, and gracefully accept when you have been tagged or stunned.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LandingPage;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js",["242","243","244","245","246"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { CreateSquadCheckin } from '../../utils/squadCheckinStorage';\r\nimport { FetchSquadMember, UpdateSquadMember } from '../../utils/SquadMemberStorage';\r\nimport Header from '../StylingComponents/Header';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst SquadDetail = ({ history }) => {\r\n\r\n    const BUTTON_STYLES = {\r\n        width: '100%',\r\n        height: '40px',\r\n        margin: '2px',\r\n        padding: '1px'\r\n    }\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let squadMemberId = localStorage.getItem('SquadMember ID');\r\n    let squadRank = localStorage.getItem('Squad Rank');\r\n    let dateObject = new Date();\r\n\r\n    const [squadMembers, setSquadMembers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMembers();\r\n    }, [])\r\n\r\n    // A check should be added depending on response code, see function below this one\r\n    async function fetchSquadMembers() {\r\n        const token = localStorage.getItem('jwt');\r\n        const memberResponse = await fetch('/api/fetch/squadmember/details/game=' + gameId + '/squad=' + squadId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        let body;\r\n        if (memberResponse.status === 200) {\r\n            body = await memberResponse.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquadMembers(body);\r\n    }\r\n    \r\n\r\n    function getLocation() {\r\n        let lng = localStorage.getItem(\"Squad Lng: \")\r\n        let lat = localStorage.getItem(\"Squad Lat: \")\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        }\r\n        CreateSquadCheckin(gameId, squadId, squadMemberId, dateObject, lng, lat)\r\n        \r\n    }\r\n\r\n    function showPosition(position) {\r\n        let squadLng = position.coords.longitude.toFixed(4);\r\n        let squadLat = position.coords.latitude.toFixed(4);\r\n        let currentPosition = document.getElementById(\"current-location\");\r\n        currentPosition.innerHTML = \"Longitude: \" + squadLng +\r\n            \"<br>Latitude: \" + squadLat;\r\n        localStorage.setItem(\"Squad Lng: \", squadLng)\r\n        localStorage.setItem(\"Squad Lat: \", squadLat)\r\n    }\r\n\r\n    const [squad, setSquad] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquad();\r\n    }, [])\r\n\r\n    async function fetchSquad() {\r\n        const token = localStorage.getItem('jwt');\r\n        const response = await fetch('/api/fetch/squad/' + squadId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        let body;\r\n        if (response.status === 200) {\r\n            body = await response.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquad(body);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const token = localStorage.getItem('jwt');\r\n        const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (playerResponse.status === 200) {\r\n            let body = await playerResponse.json();\r\n            setCurrentPlayer(body);\r\n        } else {\r\n            setCurrentPlayer({});\r\n        }\r\n    }\r\n\r\n\r\n    function handleAlive(alive) {\r\n        if (alive === true) {\r\n            return 'Alive';\r\n        } else {\r\n            return 'Dead';\r\n        }\r\n    }\r\n\r\n\r\n    async function handleLeaveSquad() {\r\n        let squadMemberBody = await FetchSquadMember(gameId, playerId);\r\n        if (squadMemberBody !== null) {\r\n            if (squadMemberBody.squadRank === 'LEADER') {\r\n                handleDisbandSquad();\r\n            }\r\n        }\r\n        let response = await UpdateSquadMember(squadMemberId, null);\r\n        if (response !== null) {\r\n            localStorage.setItem('Squad ID', response.squadId);\r\n            history.push('/squads');\r\n        } else {\r\n            alert('Failed to leave squad.');\r\n        }\r\n    }\r\n\r\n\r\n    function handleDisbandSquad() {\r\n        const token = localStorage.getItem('jwt');\r\n        if (squadRank === \"LEADER\") {\r\n            fetch('/api/delete/squad/' + squadId, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token \r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => console.log(res));\r\n            localStorage.setItem('Squad ID', 'null');\r\n            localStorage.setItem('SquadMember ID', 'null');\r\n            localStorage.setItem('Squad Rank', 'null');\r\n            history.push('/squads');\r\n        } else {\r\n            alert(\"You do not have permission to disband the squad.\")\r\n        }\r\n    }\r\n\r\n\r\n    if (squadMemberId === 'null' || squadMemberId === 'undefined') {\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <h3>Forbidden</h3>\r\n                    <p>You must first join a squad to gain access to the squad detail page.</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n\r\n                        <h1>{squad.name}</h1>\r\n                        <br />\r\n\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Status</th>\r\n                                    <th>Rank</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {squadMembers.map((s) =>\r\n                                    <tr key={s.username}>\r\n                                        <td>{s.username}</td>\r\n                                        <td>{handleAlive(s.alive)}</td>\r\n                                        <td>{s.squadRank}</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <br />\r\n\r\n                        <Button variant=\"dark\" style={BUTTON_STYLES} onClick={getLocation}>Mark location</Button>\r\n                        <p id=\"current-location\"></p>\r\n                        { squadRank === 'MEMBER' ? <Button type=\"button\" variant=\"dark\" style={BUTTON_STYLES} onClick={() => handleLeaveSquad()}>Leave Squad</Button> : null }\r\n                        { squadRank === 'LEADER' ? <Button type=\"button\" variant=\"dark\" style={BUTTON_STYLES} disabled={squadRank !== 'LEADER'} onClick={() => handleDisbandSquad()}>Disband Squad</Button> : null }\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SquadDetail;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js",["247","248","249","250","251","252","253","254"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js",["255","256"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Header from '../StylingComponents/Header';\r\nimport { storeSquadDB } from '../../utils/squadstorage';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst SquadCreate = ({ history }) => {\r\n\r\n    const BUTTON_STYLES = {\r\n        width: '120px',\r\n        height: '40px',\r\n        margin: '2px',\r\n        padding: '1px'\r\n    }\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let hasSquadMemberObject = localStorage.getItem('SquadMember ID');\r\n    let token = localStorage.getItem('jwt');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n    const [currentUser, setCurrentUser] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n        fetchCurrentUser();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {  \r\n        const playerResponse = await FetchPlayer(gameId, userId);\r\n        if(playerResponse !== null) {\r\n            setCurrentPlayer(playerResponse);\r\n        } else {\r\n            alert(\"Could not find Player object.\");\r\n        }\r\n    }\r\n\r\n\r\n    async function fetchCurrentUser() {\r\n        const response = await fetch('/api/fetch/useraccount/' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            setCurrentUser(body);\r\n        } else {\r\n            alert(\"Could not find user object.\")\r\n            setCurrentUser({});\r\n        }\r\n    };\r\n\r\n\r\n    localStorage.setItem('Faction', currentPlayer.faction);\r\n\r\n    async function handleCreateSquad(event) {\r\n        event.preventDefault();\r\n        const token = localStorage.getItem('jwt');\r\n        const { squadName, squadMemberAmount } = event.target.elements;\r\n        let createSquadRepsonse = await storeSquadDB(squadName.value, currentPlayer.faction, squadMemberAmount.value);\r\n\r\n        if (createSquadRepsonse === 201) {\r\n            let squadMemberExists = await fetch('/api/fetch/squadmember/game=' + gameId + '/player=' + playerId, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token \r\n                }\r\n            });\r\n            let newSquadId = localStorage.getItem('Squad ID');\r\n            if (squadMemberExists.status === 200) {\r\n                let squadMemberBody = await squadMemberExists.json();\r\n                let response = await fetch('/api/update/squadmember/' + squadMemberBody.squadMemberId, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squad: {\r\n                            squadId: newSquadId\r\n                        },\r\n                        squadRank: \"LEADER\",\r\n                        squadMemberId: hasSquadMemberObject\r\n                    })\r\n                });\r\n                let body = await response.json();\r\n                localStorage.setItem('SquadMember ID', body.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'LEADER');\r\n                history.push('/squaddetails');\r\n            } else if (squadMemberExists.status === 404) {\r\n                let newSquadId = localStorage.getItem('Squad ID');\r\n                let response = await fetch('/api/create/squadmember/' + gameId + '/' + newSquadId + '/' + playerId, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squadId: squadId,\r\n                        squadRank: \"LEADER\"\r\n                    })\r\n                });\r\n                if (response.status === 201) {\r\n                    let body = await response.json();\r\n                    localStorage.setItem('SquadMember ID', body.squadMemberId);\r\n                    localStorage.setItem('Squad Rank', 'LEADER');\r\n                    history.push('/squaddetails');\r\n                } else {\r\n                    alert(\"Failed to create squad member!\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    if (currentUser.userType === 'ADMINISTRATOR') {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h3>Forbidden</h3>\r\n                        <p>You do not have access to the squad creation page.</p>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    } else if (currentUser.userType === 'PLAYER') {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <div className=\"container\">\r\n                            <div id=\"squadCreateForm\">\r\n                                <h2>Create Squad</h2>\r\n                                <Form onSubmit={handleCreateSquad}>\r\n                                    <Form.Group controlId=\"formSquadName\">\r\n                                        <Form.Control id=\"squadName\" name=\"squadName\" type=\"text\" placeholder=\"Squad Name\" required></Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formSquadMemberLimit\">\r\n                                        <Form.Control id=\"squadMemberAmount\" name=\"squadMemberAmount\" type=\"text\" maxLength=\"2\" placeholder=\"Squad Members (99 max)\" required></Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formSquadFaction\">\r\n                                        <Form.Control disabled={true} name=\"squadFaction\" type=\"text\" value={currentPlayer.faction} required></Form.Control>\r\n                                    </Form.Group>\r\n                                    <Button variant=\"dark\" style={BUTTON_STYLES} type=\"submit\">Create</Button>\r\n                                    <Link to=\"squads\">\r\n                                        <Button variant=\"danger\" style={BUTTON_STYLES}>Cancel</Button>\r\n                                    </Link>\r\n                                </Form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h3>***</h3>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SquadCreate","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js",["257","258","259","260","261"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\nimport { CreateSquadMember, FetchSquadMember, UpdateSquadMember } from '../../utils/SquadMemberStorage';\r\nimport Header from '../StylingComponents/Header';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst SquadList = ({ history }) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let storageSquadId = localStorage.getItem('Squad ID');\r\n    let squadMemberId = localStorage.getItem('SquadMember ID');\r\n    let currentFaction = localStorage.getItem('Faction');\r\n    let token = localStorage.getItem('jwt');\r\n\r\n    const [squads, setSquads] = useState([]);\r\n    const [currentUser, setCurrentUser] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquads();\r\n        fetchCurrentUser();\r\n    }, [])\r\n\r\n    async function fetchSquads() {\r\n        const token = localStorage.getItem('jwt');\r\n        const squadResponse = await fetch('/api/fetch/squad/details/game=' + gameId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        let body;\r\n        if (squadResponse.status === 200) {\r\n            body = await squadResponse.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquads(body);\r\n    }\r\n\r\n\r\n    async function fetchCurrentUser() {\r\n        const response = await fetch('/api/fetch/useraccount/' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            setCurrentUser(body);\r\n        } else {\r\n            alert(\"Could not find user object.\")\r\n            setCurrentUser({});\r\n        }\r\n    };\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await FetchPlayer(gameId, userId);\r\n        if (playerResponse !== null) {\r\n            setCurrentPlayer(playerResponse);\r\n        } else {\r\n            alert(\"Could not find Player object\");\r\n        }\r\n    }\r\n\r\n\r\n    const [squadMember, setSquadMember] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMember();\r\n    }, [])\r\n\r\n    async function fetchSquadMember() {\r\n        const response = FetchSquadMember(gameId, playerId);\r\n        if (response !== null) {\r\n            setSquadMember(response);\r\n        } else {\r\n            alert(\"Could not find SquadMember object.\");\r\n        }\r\n    }\r\n\r\n    async function handleJoinSquad(squadId) {\r\n        if (squadMemberId === 'null') {\r\n            //Player do not have a SquadMember Object yet. Create one.\r\n            let response = await CreateSquadMember(gameId, squadId, playerId, 'MEMBER');\r\n            if (response !== null) {\r\n                localStorage.setItem('Squad ID', response.squadId);\r\n                localStorage.setItem('SquadMember ID', response.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'MEMBER');\r\n                history.push('squaddetails');\r\n            } else {\r\n                alert('Failed to join squad! Post failed.');\r\n            }\r\n        } else if (storageSquadId === 'null') {\r\n            //Player has a SquadMember Object but is not assigned to a squad yet. Patch it.\r\n            let response = await UpdateSquadMember(squadMemberId, squadId);\r\n            if (response !== null) {\r\n                localStorage.setItem('Squad ID', response.squadId);\r\n                localStorage.setItem('SquadMember ID', response.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'MEMBER');\r\n                history.push('/squaddetails');\r\n            } else {\r\n                alert('Failed to join squad! Patch failed.');\r\n                console.log(response);\r\n            }\r\n        } else {\r\n            //Player is already a member of a squad. Prompt them to leave squad before trying again.\r\n            alert('You are already in a squad. Leave current squad and try again.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <h1>Active Squads</h1>\r\n\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Members (Dead Ones)</th>\r\n                                <th>Faction</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {squads.map((s) =>\r\n                                <tr key={s.squadName}>\r\n                                    <td>{s.squadName}</td>\r\n                                    <td>{s.numberOfRegisteredMembers} / {s.maxNumberOfMembers} ({s.numberOfDeadMembers})</td>\r\n                                    <td>{s.faction}</td>\r\n                                    <td>\r\n                                        <Button type=\"button\" variant=\"dark\" disabled={s.faction !== currentFaction || s.numberOfRegisteredMembers >= s.maxNumberOfMembers || currentUser.userType === 'ADMINISTRATOR'} onClick={() => handleJoinSquad(s.squadId)}>JOIN</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <br />\r\n                    <Link to=\"createsquad\">\r\n                        <Button variant=\"dark\">Create New Squad</Button>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadList;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js",["262"],"export async function getPlayerInfo() {\r\n    const token = localStorage.getItem('jwt');\r\n    const response = await fetch('/api/fetch/player/all', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n\r\n    const status = await response.status\r\n    if (status === 200) {\r\n        const user = await response.json()\r\n    }\r\n    return status;\r\n}","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js",["263","264","265"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ButtonGroup, Button, Form } from 'react-bootstrap';\r\nimport { CreateMessage, GetBundleOfChatMessages, DeleteChatMessage, UpdateChatMessage } from '../../utils/ChatMessageStorage';\r\nimport { ThemeProvider, ChatList, ChatListItem, Avatar, Column, Subtitle, Row, Title, IconButton, SendIcon } from '@livechat/ui-kit'\r\n\r\n\r\nconst ChatMessage = props => {\r\n\r\n    let userId = localStorage.getItem('User ID');\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerFaction = localStorage.getItem('Faction');\r\n\r\n    const [chatRoom, setChatRoom] = useState('ALL');\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [chatMessages, setChatMessages] = useState([]);\r\n    const [validInput, setValidInput] = useState(false);\r\n    const [messageToUpdateId, setMessageToUpdateId] = useState(null);\r\n    const [isEditingMessage, setIsEditingMessage] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (userId !== 'null' && userId !== null) {\r\n            if (playerId !== 'null' && playerId !== null) {\r\n                if (gameId !== 'null' && gameId !== null) {\r\n                    if (playerFaction !== 'null' && playerFaction !== null) {\r\n                        let request = {\r\n                            gameId: gameId,\r\n                            playerId: playerId,\r\n                            squadId: null,\r\n                            faction: chatRoom\r\n                        }\r\n                        fetchMessages();\r\n                    } else {\r\n                        alert('Faction missing.');\r\n                        props.history.push(\"/landing\");\r\n                    }\r\n                } else {\r\n                    alert('Game ID missing.');\r\n                    props.history.push(\"/landing\");\r\n                }\r\n            } else {\r\n                alert('Player ID missing.');\r\n                props.history.push(\"/landing\");\r\n            }\r\n        } else {\r\n            alert('User ID missing.');\r\n            props.history.push(\"/landing\");\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchMessages();\r\n    }, [refresh])\r\n\r\n    useInterval(() => {\r\n        fetchMessages()\r\n    }, 5000);\r\n\r\n    function useInterval(callback, delay) {\r\n        const savedCallback = useRef();\r\n\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    async function fetchMessages() {\r\n        let request;\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: null,\r\n                    faction: 'ALL'\r\n                }\r\n                break;\r\n            case 'FACTION':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: null,\r\n                    faction: playerFaction\r\n                }\r\n                break;\r\n            case 'SQUAD':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: squadId,\r\n                    faction: playerFaction\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        let messages = await GetBundleOfChatMessages(request);\r\n        if (messages !== null) {\r\n            setChatMessages(messages);\r\n        } else {\r\n            alert('Failed to fetch messages');\r\n            setChatMessages([]);\r\n        }\r\n    }\r\n\r\n    function selectChatRoom(ev) {\r\n        let room = ev.target.value;\r\n        setChatRoom(room);\r\n        handleCancelEditingMessage()\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onMsgChanged = ev => {\r\n        let currentInput = ev.target.value;\r\n        if (currentInput.length < 1) {\r\n            setValidInput(false);\r\n        }\r\n        else {\r\n            setValidInput(true);\r\n        }\r\n        setMessage(currentInput);\r\n    }\r\n\r\n    const prepareMessageObject = () => {\r\n        let msgObject;\r\n        let time = new Date().getTime();\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: 'ALL',\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: 'null',\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            case 'FACTION':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: playerFaction,\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: 'null',\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            case 'SQUAD':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: playerFaction,\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: squadId,\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return msgObject;\r\n    }\r\n\r\n    async function sendMessage() {\r\n        let msg = prepareMessageObject();\r\n        const response = await CreateMessage(msg);\r\n        resetTextField()\r\n        if (response !== null) {\r\n            setRefresh(!refresh);\r\n        } else {\r\n            alert(\"Failed to send message! Failed to create.\")\r\n        }\r\n    }\r\n\r\n    function handleClickEnterToSendMessage(ev) {\r\n        if (ev.keyCode === 13) {\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n    async function handleDeleteMessage(msgId) {\r\n        const response = await DeleteChatMessage(msgId);\r\n        if (response !== null) {\r\n            setRefresh(!refresh);\r\n        } else {\r\n            alert(\"Failed to send message! Failed to delete.\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function checkIfPlayerIsAuthor(msgAuthorId) {\r\n        if (playerId === msgAuthorId.toString()) {\r\n            return true;\r\n        }\r\n    }\r\n    function handleEditMessage(msgId) {\r\n        setMessageToUpdateId(msgId)\r\n        setIsEditingMessage(true)\r\n    }\r\n\r\n    function handleUpdateMessage(msgId) {\r\n        if (msgId === messageToUpdateId) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    function resetTextField() {\r\n        const textField = document.getElementById(\"messageInput\");\r\n        textField.value = \"\"\r\n    }\r\n    async function sendUpdatedMessage() {\r\n        let updatedMesageObj = {\r\n            message: message,\r\n            chatMessageId: messageToUpdateId\r\n        }\r\n        let response = await UpdateChatMessage(updatedMesageObj)\r\n\r\n        if (response !== null) {\r\n            setIsEditingMessage(false);\r\n            setRefresh(!refresh);\r\n            setMessageToUpdateId(null)\r\n        } else {\r\n            alert(\"Failed to edit message! Failed to delete.\")\r\n        }\r\n    }\r\n\r\n    function handleCancelEditingMessage() {\r\n        setIsEditingMessage(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup >\r\n                <Button variant=\"dark\"\r\n                    onClick={selectChatRoom}\r\n                    value=\"ALL\" >Global</Button>\r\n                <Button variant=\"dark\"\r\n                    onClick={selectChatRoom}\r\n                    value=\"FACTION\">Faction</Button>\r\n                <Button variant=\"dark\"\r\n                    disabled={squadId === 'null'}\r\n                    onClick={selectChatRoom}\r\n                    value=\"SQUAD\">Squad</Button>\r\n            </ButtonGroup>\r\n            <br />\r\n            <ThemeProvider>\r\n                <ChatList >\r\n                    {chatRoom === \"ALL\" ?\r\n                        <Subtitle>GLOBAL CHAT</Subtitle>\r\n                        : null\r\n                    }\r\n                    {chatRoom === \"FACTION\" ?\r\n                        <Subtitle>{playerFaction} CHAT</Subtitle>\r\n                        : null\r\n                    }\r\n                    {chatRoom === \"SQUAD\" ?\r\n                        <Subtitle>SQUAD CHAT</Subtitle>\r\n                        : null\r\n                    }\r\n                    {chatMessages.map((chatMessage) =>\r\n                        <ChatListItem key={chatMessage.chatMessageId}>\r\n                            <Avatar imgUrl=\"https://livechat.s3.amazonaws.com/default/avatars/male_8.jpg\" />\r\n                            <Column fill>\r\n                                <Row>\r\n                                    <Column>\r\n                                        {chatRoom === \"SQUAD\" ? <Title>{chatMessage.username}   {chatMessage.squadRank}</Title> : null}\r\n                                        {chatRoom === \"FACTION\" && chatMessage.alive ? <Title> {chatMessage.username}   Alive</Title> : null}\r\n                                        {chatRoom === \"FACTION\" && !chatMessage.alive ? <Title> {chatMessage.username}   Dead</Title> : null}\r\n                                        {chatRoom === \"ALL\" ? <Title>{chatMessage.username}    {chatMessage.playerFaction}</Title> : null}                   \r\n                                    </Column>\r\n                                    \r\n                                </Row>\r\n                                <Row>\r\n                                    <Column>\r\n                                        {chatMessage.stringTimestamp}\r\n                                    </Column>\r\n                                </Row>\r\n                                <Subtitle >\r\n                                    <div>\r\n\r\n                                        {handleUpdateMessage(chatMessage.chatMessageId) && isEditingMessage ?\r\n                                            <Form.Group>\r\n                                                <Form.Control type=\"text\"\r\n                                                    placeholder=\"Edit your message...\"\r\n                                                    onChange={onMsgChanged}\r\n                                                    defaultValue={chatMessage.message} />\r\n                                                <Button variant=\"info\"\r\n                                                    size=\"sm\"\r\n                                                    onClick={sendUpdatedMessage}>Update</Button>\r\n                                                <Button className=\"m-2\"\r\n                                                    size=\"sm\"\r\n                                                    variant=\"secondary\"\r\n                                                    onClick={handleCancelEditingMessage}>Cancel</Button>\r\n                                            </Form.Group>\r\n                                            : chatMessage.message\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <div>\r\n                                        {checkIfPlayerIsAuthor(chatMessage.playerId) && !isEditingMessage ?\r\n                                            <Subtitle >\r\n                                                <Button id=\"sendMessage\"\r\n                                                    className=\"m-1\"\r\n                                                    variant=\"secondary\"\r\n                                                    size=\"sm\"\r\n                                                    onClick={() => handleEditMessage(chatMessage.chatMessageId)}> Edit</Button>\r\n                                                <Button variant=\"danger\"\r\n                                                    size=\"sm\"\r\n                                                    onClick={() => handleDeleteMessage(chatMessage.chatMessageId)}> Delete</Button>\r\n\r\n                                            </Subtitle>\r\n                                            : null}\r\n                                    </div>\r\n                                </Subtitle>\r\n                            </Column>\r\n                        </ChatListItem>\r\n                    )}\r\n                </ChatList>\r\n\r\n                <Form.Group>\r\n\r\n                    <Form.Control onKeyUp={handleClickEnterToSendMessage} id=\"messageInput\" type=\"text\" placeholder=\"Enter a message\" onChange={onMsgChanged} />\r\n\r\n                    <IconButton disabled={!validInput} onClick={sendMessage}>\r\n                        <SendIcon />\r\n                    </IconButton>\r\n                </Form.Group>\r\n            </ThemeProvider>\r\n        </>\r\n    );\r\n};\r\nexport default ChatMessage;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js",["266","267","268"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js",["269","270"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\n\r\nconst HeaderOutside = () => {\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeaderOutside;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js",["271","272","273","274"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js",["275","276","277","278"],"import React, { useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Header from '../StylingComponents/Header';\r\nimport Form from 'react-bootstrap/Form'\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\n\r\nconst Bite = ({ history }) => {\r\n\r\n    const BUTTON_STYLES = {\r\n        width: '150px',\r\n        height: '40px',\r\n        margin: '2px',\r\n        padding: '1px'\r\n    }\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let latitude = localStorage.getItem('Latitude');\r\n    let longitude = localStorage.getItem('Longitude');\r\n    let token = localStorage.getItem('jwt');\r\n\r\n    let currentCoordinates = ('Coordinates: \\nLatitude: ' + latitude + ' \\nLongitude: ' + longitude);\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n    const [currentUser, setCurrentUser] = useState([]);\r\n    const [validBiteCodeLength, setValidBiteCodeLength] = useState(false);\r\n    const [currentBiteCode, setCurrentBiteCode] = useState('');  // This is the bite code input from the form\r\n    const [currentVictim, setCurrentVictim] = useState([]);\r\n\r\n    const [victimDescription, setVictimDescription] = useState('');\r\n    const [currentVictimUser, setCurrentVictimUser] = useState([]);\r\n\r\n    const [buttonStatus, setButtonStatus] = useState(true);  // This is used to disable the \"turn\" and \"kill\" buttons if the bite code is incorrect\r\n    const [validationButtonStatus, setValidationButtonStatus] = useState(true);  // This is currently needed to stop the validation message from showing before pressing the \"validate\" button\r\n\r\n    \r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n        fetchCurrentUser();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentVictim();\r\n    }, [validBiteCodeLength]);\r\n    \r\n    useEffect(() => {\r\n        fetchCurrentVictimUser();\r\n    }, [currentVictim]);\r\n\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (playerResponse.status === 200) {\r\n            let body = await playerResponse.json();\r\n            setCurrentPlayer(body);\r\n        } else {\r\n            alert(\"Could not find player object.\")\r\n            setCurrentPlayer({});\r\n        }\r\n    };\r\n\r\n\r\n    async function fetchCurrentUser() {\r\n        const response = await fetch('/api/fetch/useraccount/' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            setCurrentUser(body);\r\n        } else {\r\n            alert(\"Could not find user object.\")\r\n            setCurrentUser({});\r\n        }\r\n    };\r\n\r\n    \r\n    function masterValidation() {\r\n        setValidationButtonStatus(false);\r\n        fetchCurrentVictim(); \r\n    }\r\n\r\n    \r\n    const onBiteCodeChange = ev => {\r\n        let biteCodeInput = ev.target.value;\r\n        setCurrentBiteCode(biteCodeInput);\r\n\r\n        if (biteCodeInput.length < 8 || biteCodeInput.length > 8) {\r\n            setValidBiteCodeLength(false);\r\n        } else {\r\n            setCurrentBiteCode(biteCodeInput);\r\n            setValidBiteCodeLength(true);\r\n            setValidationButtonStatus(true);\r\n        }\r\n    }\r\n\r\n\r\n    const onVictimDescriptionChange = ev => {\r\n        let victimDescriptionInput = ev.target.value;\r\n        setVictimDescription(victimDescriptionInput);\r\n    }\r\n\r\n\r\n    // IF TIME: This needs to be cleaned up, and should probably be broken into a few smaller functions\r\n    async function fetchCurrentVictim() {\r\n        setValidationButtonStatus(false);\r\n        const victimResponse = await fetch('/api/fetch/player/' + gameId + '/' + currentBiteCode, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (victimResponse.status === 200 && validBiteCodeLength === true) {\r\n            let body = await victimResponse.json();\r\n            setCurrentVictim(body);\r\n\r\n            if (currentVictim.biteCode === currentBiteCode) {\r\n                fetchCurrentVictimUser();\r\n                alert('That is a valid bite code! It belongs to ' + currentVictimUser.username + '. \\nIf this is not the correct player, please try validating again or enter a different bite code.');\r\n                setButtonStatus(false);\r\n            };\r\n\r\n        } else if (victimResponse.status !== 200 && validBiteCodeLength === true && validationButtonStatus === false) {\r\n                alert('That bite code is not connected to a player in this game');\r\n                setCurrentVictim({});\r\n                setButtonStatus(true);            \r\n        } else {\r\n            setCurrentVictim({});\r\n            setButtonStatus(true);\r\n        }\r\n    }\r\n\r\n\r\n    // This function is used to get and show the victim's username in the validation alert\r\n    async function fetchCurrentVictimUser() {\r\n        const victimUserResponse = await fetch('/api/fetch/useraccount/' + currentVictim.userAccountId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (victimUserResponse.status === 200) {\r\n            let body = await victimUserResponse.json()\r\n            setCurrentVictimUser(body);\r\n        } else {\r\n            setCurrentVictimUser({});\r\n        };\r\n    };\r\n\r\n\r\n    async function createKillObject() {\r\n        let timeStamp = new Date();\r\n        let killResponse = await fetch('/api/create/kill', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + token \r\n            },\r\n            body: JSON.stringify({\r\n                timeOfDeath: timeStamp,\r\n                position: {\r\n                    x: longitude,\r\n                    y: latitude\r\n                },\r\n                gameId: gameId,\r\n                killerId: currentPlayer.playerId,\r\n                victimId: currentVictim.playerId,\r\n                biteCode: currentBiteCode,\r\n                description: victimDescription\r\n            })\r\n        });\r\n        if (killResponse.status === 200) {\r\n            let body = await killResponse.json();\r\n            return body;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    async function handleZombie() {\r\n        console.log('The player was turned into a ZOMBIE');\r\n        createKillObject();\r\n\r\n        if (validBiteCodeLength === true) {\r\n            let playerResponse = await fetch('/api/update/player/' + currentVictim.playerId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + token \r\n                },\r\n                body: JSON.stringify({\r\n                    faction: 'ZOMBIE', \r\n                    isAlive: false\r\n                })\r\n            });\r\n            if (playerResponse.status === 200) {\r\n                let body = await playerResponse.json();\r\n                console.log(body);\r\n                return body;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    async function handleKill() {\r\n        console.log('The player was killed');\r\n        createKillObject();\r\n        \r\n        if (validBiteCodeLength === true) {\r\n            let response = await fetch('/api/update/player/' + currentVictim.playerId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + token \r\n                },\r\n                body: JSON.stringify({\r\n                    isAlive: false\r\n                }) \r\n            });\r\n\r\n            if (response.status === 200) {\r\n                let body = await response.json();\r\n                console.log(body);\r\n                return body;\r\n            } else {\r\n                return null;\r\n            } \r\n        }\r\n    }\r\n\r\n\r\n    if (currentUser.userType === 'ADMINISTRATOR') {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h3>Forbidden</h3>\r\n                        <p>You do not have access to the bite page.</p>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    } else if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h2>BITE CODE</h2>\r\n                        <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n\r\n    } else if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <div id=\"codeEntryContainer\">\r\n                            <h2>BITE CODE ENTRY</h2>\r\n                            <Form id=\"biteCodeForm\">\r\n                                <Form.Group>\r\n                                    <Form.Control onChange={onBiteCodeChange} id=\"biteCode\" type=\"text\" placeholder=\"Bite Code\" required></Form.Control>\r\n                                    <Button id=\"validation\" type=\"button\" variant=\"dark\" style={BUTTON_STYLES} onClick={masterValidation}>Validate Bite Code</Button>\r\n                                </Form.Group>\r\n                                <br/>\r\n                                <Form.Control id=\"coordinates\" as=\"textarea\" rows={3} value={currentCoordinates} required></Form.Control>\r\n                                <br/>\r\n                                <Form.Control onChange={onVictimDescriptionChange} id=\"victimDescription\" name=\"victimDescription\" placeholder=\"Enter victim description...\" as=\"textarea\" rows={3}></Form.Control>\r\n                            </Form>\r\n                            <br/>\r\n                            <Button type=\"submit\" variant=\"dark\" style={BUTTON_STYLES} disabled={buttonStatus} onClick={handleZombie}>Turn into ZOMBIE</Button>\r\n                            <Button type=\"submit\" variant=\"dark\" style={BUTTON_STYLES} disabled={buttonStatus} onClick={handleKill}>Kill victim</Button>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n\r\n    } else {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h3>***</h3>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bite;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js",["279"],"import { getBaseUrl } from \"./baseUrl\";\r\n\r\nexport async function FetchSquadMember(gameId, playerId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/squadmember/game=\" + gameId + \"/player=\" + playerId;\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function UpdateSquadMember(squadMemberId, squadId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let squadObject;\r\n    if (squadId === null) {\r\n        squadObject = null;\r\n    } else {\r\n        squadObject = {squadId: squadId}\r\n    }\r\n    let url = getBaseUrl() + \"update/squadmember/\" + squadMemberId; \r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            squad: squadObject,\r\n        })\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function CreateSquadMember(gameId, squadId, playerId, rank) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"create/squadmember/\" + gameId + \"/\"+ squadId + \"/\" + playerId;\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            squadRank: rank\r\n        })\r\n    });\r\n    if (response.status === 201) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js",["280","281"],"import { getBaseUrl } from \"./baseUrl\";\r\n\r\nexport async function FetchAllGames() {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/game/all\";\r\n    const response = await fetch(url, {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function FetchGame(gameId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/game/\" + gameId;\r\n    const response = await fetch(url, {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport async function CreateGame(gameData) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"create/game\"\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            name: gameData.name,\r\n            gameState: gameData.gameState,\r\n            startTime: gameData.startTime,\r\n            endTime: gameData.endTime,\r\n            maxNumberOfPlayers: gameData.maxNumberOfPlayers,\r\n            description: gameData.description\r\n        })\r\n    })\r\n    return response;\r\n} \r\n\r\nexport async function UpdateGame(gameData) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"/update/game/\" + gameData.gameId;\r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            name: gameData.name,\r\n            gameState: gameData.gameState,\r\n            startTime: gameData.startTime,\r\n            endTime: gameData.endTime,\r\n            maxNumberOfPlayers: gameData.maxNumberOfPlayers,\r\n            description: gameData.description\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function DeleteGame(gameId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"delete/game/\" + gameId;\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n        });\r\n    return response.status;\r\n}","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js",["282","283","284"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst Chat = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <ChatMessage />\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js",["285"],"import { getBaseUrl } from \"./baseUrl\";\r\n\r\nexport async function GetAllChatMessages() {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/chatmessage/all\";\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function GetChatMessageById(chatMessageId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/chatmessage/\" + chatMessageId;\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function GetBundleOfChatMessages(request) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/chatmessage/bundle\";\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            gameId: request.gameId,\r\n            faction: request.faction,\r\n            squadId: request.squadId,\r\n        })\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function CreateMessage(messageData) {\r\n    const token = localStorage.getItem('jwt');\r\n    let squadId = messageData.squadId;\r\n    if (squadId === 'null') {\r\n        squadId = 0;\r\n    }\r\n    let url = getBaseUrl() + \"create/chatmessage/\" + messageData.gameId + \"/\" + messageData.playerId + \"/\" + squadId;\r\n\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            message: messageData.message,\r\n            faction: messageData.faction,\r\n            timestamp: messageData.timestamp,\r\n            gameId: messageData.gameId,\r\n            squadId: messageData.squadId,\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function DeleteChatMessage(msgId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"delete/chatmessage/\" + msgId;\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    return response.status;\r\n}\r\n\r\nexport async function UpdateChatMessage(messageData) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"update/chatmessage/\" + messageData.chatMessageId;\r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            message: messageData.message,\r\n        })\r\n    })\r\n    return response;\r\n}","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\KillStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditMissionMarker.js",["286","287"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Missions.js",["288","289","290"],"import { Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getPlayerInfo } from \"../../utils/gamedbstorage\";\r\nimport { FetchAllMissions } from '../../utils/missionStorage';\r\n\r\nconst Missions = (props) => {\r\n\r\n    const [missions, setMissions] = useState([]);\r\n    const [missionFilter, setmissionFilter] = useState('ALL');\r\n    let faction = localStorage.getItem(\"Faction\")\r\n\r\n    useEffect(() => {\r\n        fetchMissions();\r\n        getPlayerInfo();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [missionFilter])\r\n\r\n    async function fetchMissions() {\r\n        const missions = await FetchAllMissions();\r\n        if (missions != null) {\r\n            setMissions(missions);\r\n        } else {\r\n            setMissions([]);\r\n        }\r\n    }\r\n\r\n    function handlePreview(id) {\r\n        localStorage.setItem(\"Mission ID\", id);\r\n        props.history.push(\"/mission\");\r\n    }\r\n\r\n    const onFilterButtonClicked = ev => {\r\n        let filter = ev.target.value;\r\n        setmissionFilter(filter);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div>\r\n                    <h2>Current Missions</h2>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Mission</th>\r\n                                <th>Description</th>\r\n                                <th>Faction</th>\r\n                                <th>Start</th>\r\n                                <th>End</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {missions.map((m) =>\r\n                                <tr key={m.missionId}>\r\n                                    {m.name && m.factionVisibility === faction ? <td>{m.name}</td> : null}\r\n                                    {m.missionDescription && m.factionVisibility === faction ? <td>{m.missionDescription}</td> : null}\r\n                                    {m.factionVisibility  && m.factionVisibility === faction ? <td>{m.factionVisibility}</td> : null}\r\n                                    {m.startTime && m.factionVisibility === faction ? <td>{m.startTime}</td> : null}\r\n                                    {m.endTime && m.factionVisibility === faction ? <td>{m.endTime}</td> : null}\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    <br></br>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Missions;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\GameMap.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\missionStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadCheckinStorage.js",["291"],"import { getBaseUrl } from \"./baseUrl\";\r\n\r\nexport async function FetchAllSquadCheckin() {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/squadcheckin/all\";\r\n    const response = await fetch(url, {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function FetchGame(squadCheckinId) {\r\n    let url = getBaseUrl() + \"fetch/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url);\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function CreateSquadCheckin(gameId, squadId, squadMemberId, currentTime, lng, lat) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"create/squadcheckin/\" + gameId + '/' + squadId + '/' + squadMemberId\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            pointOfTime: currentTime,\r\n            position: {\r\n                x: lng,\r\n                y: lat\r\n            },\r\n            gameId: gameId,\r\n            squadId: squadId,\r\n            squadMemberId: squadMemberId\r\n        })\r\n    })\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n    return response;\r\n}\r\n\r\nexport async function UpdateSquadCheckin(squadCheckinId, gameId, squadId, squadMemberId, currentTime, lng, lat) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"/update/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            pointOfTime: currentTime,\r\n            position: {\r\n                x: lng,\r\n                y: lat\r\n            },\r\n            gameId: gameId,\r\n            squadId: squadId,\r\n            squadMemberId: squadMemberId\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function DeleteSquadCheckin(squadCheckinId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"delete/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n    });\r\n    return response.status;\r\n}",{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","severity":1,"message":"297","line":3,"column":42,"nodeType":"298","messageId":"299","endLine":3,"endColumn":48},{"ruleId":"296","severity":1,"message":"300","line":10,"column":10,"nodeType":"298","messageId":"299","endLine":10,"endColumn":19},{"ruleId":"296","severity":1,"message":"301","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":18},{"ruleId":"296","severity":1,"message":"302","line":7,"column":10,"nodeType":"298","messageId":"299","endLine":7,"endColumn":21},{"ruleId":"296","severity":1,"message":"303","line":26,"column":13,"nodeType":"298","messageId":"299","endLine":26,"endColumn":24},{"ruleId":"304","severity":1,"message":"305","line":27,"column":6,"nodeType":"306","endLine":27,"endColumn":22,"suggestions":"307"},{"ruleId":"308","severity":1,"message":"309","line":55,"column":11,"nodeType":"310","messageId":"311","endLine":55,"endColumn":22},{"ruleId":"304","severity":1,"message":"312","line":21,"column":8,"nodeType":"306","endLine":21,"endColumn":10,"suggestions":"313"},{"ruleId":"296","severity":1,"message":"314","line":9,"column":7,"nodeType":"298","messageId":"299","endLine":9,"endColumn":16},{"ruleId":"296","severity":1,"message":"315","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":14},{"ruleId":"296","severity":1,"message":"316","line":5,"column":10,"nodeType":"298","messageId":"299","endLine":5,"endColumn":25},{"ruleId":"304","severity":1,"message":"317","line":28,"column":6,"nodeType":"306","endLine":28,"endColumn":24,"suggestions":"318"},{"ruleId":"304","severity":1,"message":"319","line":37,"column":6,"nodeType":"306","endLine":37,"endColumn":22,"suggestions":"320"},{"ruleId":"296","severity":1,"message":"321","line":1,"column":17,"nodeType":"298","messageId":"299","endLine":1,"endColumn":26},{"ruleId":"304","severity":1,"message":"322","line":14,"column":8,"nodeType":"306","endLine":14,"endColumn":10,"suggestions":"323"},{"ruleId":"296","severity":1,"message":"324","line":8,"column":10,"nodeType":"298","messageId":"299","endLine":8,"endColumn":19},{"ruleId":"296","severity":1,"message":"325","line":15,"column":9,"nodeType":"298","messageId":"299","endLine":15,"endColumn":15},{"ruleId":"304","severity":1,"message":"326","line":52,"column":8,"nodeType":"306","endLine":52,"endColumn":10,"suggestions":"327"},{"ruleId":"296","severity":1,"message":"321","line":1,"column":17,"nodeType":"298","messageId":"299","endLine":1,"endColumn":26},{"ruleId":"304","severity":1,"message":"328","line":28,"column":8,"nodeType":"306","endLine":28,"endColumn":10,"suggestions":"329"},{"ruleId":"304","severity":1,"message":"330","line":73,"column":8,"nodeType":"306","endLine":73,"endColumn":10,"suggestions":"331"},{"ruleId":"296","severity":1,"message":"332","line":93,"column":12,"nodeType":"298","messageId":"299","endLine":93,"endColumn":25},{"ruleId":"304","severity":1,"message":"322","line":97,"column":8,"nodeType":"306","endLine":97,"endColumn":10,"suggestions":"333"},{"ruleId":"334","severity":1,"message":"335","line":43,"column":26,"nodeType":"336","messageId":"337","endLine":43,"endColumn":28},{"ruleId":"334","severity":1,"message":"335","line":71,"column":21,"nodeType":"336","messageId":"337","endLine":71,"endColumn":23},{"ruleId":"338","severity":1,"message":"339","line":80,"column":38,"nodeType":"340","messageId":"341","endLine":80,"endColumn":40},{"ruleId":"338","severity":1,"message":"339","line":80,"column":61,"nodeType":"340","messageId":"341","endLine":80,"endColumn":63},{"ruleId":"338","severity":1,"message":"339","line":84,"column":70,"nodeType":"340","messageId":"341","endLine":84,"endColumn":72},{"ruleId":"338","severity":1,"message":"339","line":84,"column":93,"nodeType":"340","messageId":"341","endLine":84,"endColumn":95},{"ruleId":"334","severity":1,"message":"335","line":99,"column":20,"nodeType":"336","messageId":"337","endLine":99,"endColumn":22},{"ruleId":"296","severity":1,"message":"342","line":134,"column":11,"nodeType":"298","messageId":"299","endLine":134,"endColumn":26},{"ruleId":"296","severity":1,"message":"321","line":1,"column":17,"nodeType":"298","messageId":"299","endLine":1,"endColumn":26},{"ruleId":"304","severity":1,"message":"343","line":32,"column":8,"nodeType":"306","endLine":32,"endColumn":10,"suggestions":"344"},{"ruleId":"304","severity":1,"message":"345","line":23,"column":8,"nodeType":"306","endLine":23,"endColumn":10,"suggestions":"346"},{"ruleId":"296","severity":1,"message":"332","line":60,"column":12,"nodeType":"298","messageId":"299","endLine":60,"endColumn":25},{"ruleId":"304","severity":1,"message":"322","line":64,"column":8,"nodeType":"306","endLine":64,"endColumn":10,"suggestions":"347"},{"ruleId":"296","severity":1,"message":"348","line":76,"column":12,"nodeType":"298","messageId":"299","endLine":76,"endColumn":23},{"ruleId":"304","severity":1,"message":"349","line":80,"column":8,"nodeType":"306","endLine":80,"endColumn":10,"suggestions":"350"},{"ruleId":"296","severity":1,"message":"351","line":12,"column":15,"nodeType":"298","messageId":"299","endLine":12,"endColumn":19},{"ruleId":"296","severity":1,"message":"352","line":30,"column":29,"nodeType":"298","messageId":"299","endLine":30,"endColumn":36},{"ruleId":"304","severity":1,"message":"353","line":53,"column":8,"nodeType":"306","endLine":53,"endColumn":10,"suggestions":"354"},{"ruleId":"304","severity":1,"message":"355","line":57,"column":8,"nodeType":"306","endLine":57,"endColumn":17,"suggestions":"356"},{"ruleId":"296","severity":1,"message":"314","line":10,"column":7,"nodeType":"298","messageId":"299","endLine":10,"endColumn":16},{"ruleId":"296","severity":1,"message":"332","line":26,"column":10,"nodeType":"298","messageId":"299","endLine":26,"endColumn":23},{"ruleId":"304","severity":1,"message":"322","line":30,"column":6,"nodeType":"306","endLine":30,"endColumn":8,"suggestions":"357"},{"ruleId":"296","severity":1,"message":"315","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":14},{"ruleId":"296","severity":1,"message":"358","line":9,"column":11,"nodeType":"298","messageId":"299","endLine":9,"endColumn":24},{"ruleId":"296","severity":1,"message":"321","line":1,"column":17,"nodeType":"298","messageId":"299","endLine":1,"endColumn":26},{"ruleId":"296","severity":1,"message":"359","line":9,"column":7,"nodeType":"298","messageId":"299","endLine":9,"endColumn":28},{"ruleId":"296","severity":1,"message":"332","line":37,"column":12,"nodeType":"298","messageId":"299","endLine":37,"endColumn":25},{"ruleId":"304","severity":1,"message":"343","line":43,"column":8,"nodeType":"306","endLine":43,"endColumn":10,"suggestions":"360"},{"ruleId":"296","severity":1,"message":"361","line":5,"column":10,"nodeType":"298","messageId":"299","endLine":5,"endColumn":21},{"ruleId":"304","severity":1,"message":"343","line":40,"column":8,"nodeType":"306","endLine":40,"endColumn":10,"suggestions":"362"},{"ruleId":"304","severity":1,"message":"363","line":44,"column":8,"nodeType":"306","endLine":44,"endColumn":29,"suggestions":"364"},{"ruleId":"304","severity":1,"message":"365","line":48,"column":8,"nodeType":"306","endLine":48,"endColumn":23,"suggestions":"366"},{"ruleId":"296","severity":1,"message":"367","line":2,"column":7,"nodeType":"298","messageId":"299","endLine":2,"endColumn":12},{"ruleId":"296","severity":1,"message":"367","line":2,"column":7,"nodeType":"298","messageId":"299","endLine":2,"endColumn":12},{"ruleId":"308","severity":1,"message":"309","line":86,"column":13,"nodeType":"310","messageId":"311","endLine":86,"endColumn":24},{"ruleId":"296","severity":1,"message":"368","line":1,"column":17,"nodeType":"298","messageId":"299","endLine":1,"endColumn":26},{"ruleId":"296","severity":1,"message":"369","line":1,"column":28,"nodeType":"298","messageId":"299","endLine":1,"endColumn":36},{"ruleId":"296","severity":1,"message":"314","line":7,"column":7,"nodeType":"298","messageId":"299","endLine":7,"endColumn":16},{"ruleId":"296","severity":1,"message":"367","line":2,"column":7,"nodeType":"298","messageId":"299","endLine":2,"endColumn":12},{"ruleId":"296","severity":1,"message":"314","line":9,"column":7,"nodeType":"298","messageId":"299","endLine":9,"endColumn":16},{"ruleId":"304","severity":1,"message":"370","line":41,"column":8,"nodeType":"306","endLine":41,"endColumn":27,"suggestions":"371"},{"ruleId":"296","severity":1,"message":"372","line":1,"column":10,"nodeType":"298","messageId":"299","endLine":1,"endColumn":16},{"ruleId":"296","severity":1,"message":"373","line":30,"column":14,"nodeType":"298","messageId":"299","endLine":30,"endColumn":27},{"ruleId":"296","severity":1,"message":"374","line":35,"column":11,"nodeType":"298","messageId":"299","endLine":35,"endColumn":32},{"ruleId":"375","severity":1,"message":"376","line":56,"column":5,"nodeType":"377","messageId":"378","endLine":56,"endColumn":21},"no-native-reassign",["379"],"no-negated-in-lhs",["380"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'clearUser' is defined but never used.","'Redirect' is defined but never used.","'getUserInfo' is defined but never used.","'currentUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchGame'. Either include it or remove the dependency array.","ArrayExpression",["381"],"no-dupe-keys","Duplicate key 'description'.","ObjectExpression","unexpected","React Hook useEffect has a missing dependency: 'fetchCurrentUser'. Either include it or remove the dependency array.",["382"],"'useStyles' is assigned a value but never used.","'Link' is defined but never used.","'FetchAllPlayers' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchPlayer'. Either include it or remove the dependency array.",["383"],"React Hook useEffect has a missing dependency: 'fetchAllPlayersByGameId'. Either include it or remove the dependency array.",["384"],"'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCurrentPlayer'. Either include it or remove the dependency array.",["385"],"'fetchUser' is defined but never used.","'userId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["386"],"React Hook useEffect has a missing dependency: 'fetchSquadMembers'. Either include it or remove the dependency array.",["387"],"React Hook useEffect has a missing dependency: 'fetchSquad'. Either include it or remove the dependency array.",["388"],"'currentPlayer' is assigned a value but never used.",["389"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'currentPosition' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchCurrentPlayer' and 'fetchCurrentUser'. Either include them or remove the dependency array.",["390"],"React Hook useEffect has missing dependencies: 'fetchCurrentUser' and 'fetchSquads'. Either include them or remove the dependency array.",["391"],["392"],"'squadMember' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSquadMember'. Either include it or remove the dependency array.",["393"],"'user' is assigned a value but never used.","'request' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chatRoom', 'fetchMessages', 'gameId', 'playerFaction', 'playerId', 'props.history', and 'userId'. Either include them or remove the dependency array.",["394"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["395"],["396"],"'handleSignOut' is assigned a value but never used.","'BUTTON_WRAPPER_STYLES' is assigned a value but never used.",["397"],"'FetchPlayer' is defined but never used.",["398"],"React Hook useEffect has a missing dependency: 'fetchCurrentVictim'. Either include it or remove the dependency array.",["399"],"React Hook useEffect has a missing dependency: 'fetchCurrentVictimUser'. Either include it or remove the dependency array.",["400"],"'token' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchMission'. Either include it or remove the dependency array.",["401"],"'Button' is defined but never used.","'handlePreview' is defined but never used.","'onFilterButtonClicked' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"410","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"410","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"410","fix":"430"},{"desc":"419","fix":"431"},{"desc":"419","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},"Update the dependencies array to be: [fetchGame, selectedGameId]",{"range":"439","text":"440"},"Update the dependencies array to be: [fetchCurrentUser]",{"range":"441","text":"442"},"Update the dependencies array to be: [fetchPlayer, selectedPlayerId]",{"range":"443","text":"444"},"Update the dependencies array to be: [fetchAllPlayersByGameId, selectedGameId]",{"range":"445","text":"446"},"Update the dependencies array to be: [fetchCurrentPlayer]",{"range":"447","text":"448"},"Update the dependencies array to be: [props.history]",{"range":"449","text":"450"},"Update the dependencies array to be: [fetchSquadMembers]",{"range":"451","text":"452"},"Update the dependencies array to be: [fetchSquad]",{"range":"453","text":"454"},{"range":"455","text":"448"},"Update the dependencies array to be: [fetchCurrentPlayer, fetchCurrentUser]",{"range":"456","text":"457"},"Update the dependencies array to be: [fetchCurrentUser, fetchSquads]",{"range":"458","text":"459"},{"range":"460","text":"448"},"Update the dependencies array to be: [fetchSquadMember]",{"range":"461","text":"462"},"Update the dependencies array to be: [chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",{"range":"463","text":"464"},"Update the dependencies array to be: [fetchMessages, refresh]",{"range":"465","text":"466"},{"range":"467","text":"448"},{"range":"468","text":"457"},{"range":"469","text":"457"},"Update the dependencies array to be: [fetchCurrentVictim, validBiteCodeLength]",{"range":"470","text":"471"},"Update the dependencies array to be: [currentVictim, fetchCurrentVictimUser]",{"range":"472","text":"473"},"Update the dependencies array to be: [fetchMission, selectedMissionId]",{"range":"474","text":"475"},[928,944],"[fetchGame, selectedGameId]",[531,533],"[fetchCurrentUser]",[951,969],"[fetchPlayer, selectedPlayerId]",[1123,1139],"[fetchAllPlayersByGameId, selectedGameId]",[441,443],"[fetchCurrentPlayer]",[2381,2383],"[props.history]",[984,986],"[fetchSquadMembers]",[2559,2561],"[fetchSquad]",[3172,3174],[1079,1081],"[fetchCurrentPlayer, fetchCurrentUser]",[971,973],"[fetchCurrentUser, fetchSquads]",[2109,2111],[2523,2525],"[fetchSquadMember]",[2291,2293],"[chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",[2355,2364],"[fetchMessages, refresh]",[893,895],[1178,1180],[1731,1733],[1800,1821],"[fetchCurrentVictim, validBiteCodeLength]",[1896,1911],"[currentVictim, fetchCurrentVictimUser]",[1346,1365],"[fetchMission, selectedMissionId]"]