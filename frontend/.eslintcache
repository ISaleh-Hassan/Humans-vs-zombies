[{"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\index.js":"1","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\App.js":"3","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js":"4","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js":"5","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js":"6","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js":"7","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js":"8","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js":"9","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js":"10","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js":"11","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js":"12","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js":"13","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js":"14","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js":"15","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js":"16","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js":"17","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js":"18","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js":"19","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js":"20","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js":"21","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js":"22","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js":"23","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js":"24","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js":"25","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js":"26","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js":"27","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js":"28","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js":"29","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js":"30","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js":"31","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js":"32","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js":"33","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js":"34","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js":"35","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js":"36","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js":"37","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js":"38","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js":"39","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js":"40","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js":"41","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js":"42","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js":"43","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js":"44"},{"size":517,"mtime":1608561367131,"results":"45","hashOfConfig":"46"},{"size":375,"mtime":1608561367132,"results":"47","hashOfConfig":"46"},{"size":3559,"mtime":1608720338090,"results":"48","hashOfConfig":"46"},{"size":336,"mtime":1608623502708,"results":"49","hashOfConfig":"46"},{"size":577,"mtime":1608561367134,"results":"50","hashOfConfig":"46"},{"size":2773,"mtime":1608623502567,"results":"51","hashOfConfig":"46"},{"size":4186,"mtime":1608623502583,"results":"52","hashOfConfig":"46"},{"size":6427,"mtime":1609765735984,"results":"53","hashOfConfig":"46"},{"size":1540,"mtime":1608623502589,"results":"54","hashOfConfig":"46"},{"size":1067,"mtime":1608561367122,"results":"55","hashOfConfig":"46"},{"size":694,"mtime":1608561367119,"results":"56","hashOfConfig":"46"},{"size":2613,"mtime":1609765736007,"results":"57","hashOfConfig":"46"},{"size":1826,"mtime":1609793442041,"results":"58","hashOfConfig":"46"},{"size":11360,"mtime":1608712835692,"results":"59","hashOfConfig":"46"},{"size":1486,"mtime":1608623502576,"results":"60","hashOfConfig":"46"},{"size":651,"mtime":1608561367134,"results":"61","hashOfConfig":"46"},{"size":5254,"mtime":1608712835684,"results":"62","hashOfConfig":"46"},{"size":768,"mtime":1608712835682,"results":"63","hashOfConfig":"46"},{"size":1298,"mtime":1608712835688,"results":"64","hashOfConfig":"46"},{"size":4935,"mtime":1609765736015,"results":"65","hashOfConfig":"46"},{"size":6296,"mtime":1609771307077,"results":"66","hashOfConfig":"46"},{"size":6938,"mtime":1609771307078,"results":"67","hashOfConfig":"46"},{"size":5765,"mtime":1609771307078,"results":"68","hashOfConfig":"46"},{"size":2643,"mtime":1608712835693,"results":"69","hashOfConfig":"46"},{"size":820,"mtime":1608561367136,"results":"70","hashOfConfig":"46"},{"size":2400,"mtime":1609765736071,"results":"71","hashOfConfig":"46"},{"size":601,"mtime":1609765736085,"results":"72","hashOfConfig":"46"},{"size":547,"mtime":1608712835698,"results":"73","hashOfConfig":"46"},{"size":671,"mtime":1608623502695,"results":"74","hashOfConfig":"46"},{"size":891,"mtime":1608561367130,"results":"75","hashOfConfig":"46"},{"size":3672,"mtime":1609765736034,"results":"76","hashOfConfig":"46"},{"size":12468,"mtime":1609765735992,"results":"77","hashOfConfig":"46"},{"size":406,"mtime":1609765736078,"results":"78","hashOfConfig":"46"},{"size":773,"mtime":1609765736098,"results":"79","hashOfConfig":"46"},{"size":85,"mtime":1608561367135,"results":"80","hashOfConfig":"46"},{"size":860,"mtime":1608623502702,"results":"81","hashOfConfig":"46"},{"size":1732,"mtime":1609765736058,"results":"82","hashOfConfig":"46"},{"size":813,"mtime":1608720338091,"results":"83","hashOfConfig":"46"},{"size":3501,"mtime":1608712835684,"results":"84","hashOfConfig":"46"},{"size":8122,"mtime":1609771307076,"results":"85","hashOfConfig":"46"},{"size":2663,"mtime":1609765736050,"results":"86","hashOfConfig":"46"},{"size":1945,"mtime":1609765736065,"results":"87","hashOfConfig":"46"},{"size":2131,"mtime":1609765736091,"results":"88","hashOfConfig":"46"},{"size":3362,"mtime":1609765736042,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1ynvu2h",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"92"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"92"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"92"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"92"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"92"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"92"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\index.js",[],["198","199"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\App.js",["200"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"./utils/PrivateRoute\";\r\nimport Login from './components/AuthComponents/Login'\r\nimport Register from './components/AuthComponents/Register'\r\nimport Phone from './components/AuthComponents/Phone'\r\nimport RegisterPhone from './components/AuthComponents/RegisterPhone'\r\nimport Admin from './components/AdminComponents/Admin'\r\nimport EditGame from './components/AdminComponents/EditGame'\r\nimport PlayerState from './components/AdminComponents/PlayerState'\r\nimport Bite from './components/GameComponents/Bite'\r\nimport CreateMissionMarker from './components/AdminComponents/CreateMissionMarker'\r\nimport BiteHuman from './components/GameComponents/BiteHuman'\r\nimport BiteZombie from './components/GameComponents/BiteZombie'\r\nimport ChooseFaction from './components/GameComponents/ChooseFaction'\r\nimport CurrentGames from './components/GameComponents/CurrentGames'\r\nimport Home from './components/HomeComponents/Home'\r\nimport LandingPage from './components/HomeComponents/LandingPage'\r\nimport MainMap from './components/MapComponents/MainMap'\r\nimport SquadCreate from './components/SquadComponents/SquadCreate'\r\nimport SquadDetail from './components/SquadComponents/SquadDetail'\r\nimport SquadList from './components/SquadComponents/SquadList'\r\nimport NotFound from './components/StylingComponents/NotFound'\r\nimport { AuthProvider } from \"./utils/Auth\";\r\nimport './components/StylingComponents/Components.css'\r\nimport AdminCreateGame from './components/AdminComponents/AdminCreateGame'\r\nimport Chat from \"./components/ChatMessageComponents/Chat\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/phone\" component={Phone} />\r\n          <Route exact path=\"/registerphone\" component={RegisterPhone} />\r\n          <PrivateRoute exact path=\"/\" component={Home} />\r\n          <PrivateRoute exact path=\"/landing\" component={LandingPage} />\r\n          <PrivateRoute exact path=\"/bite\" component={Bite} />\r\n          <PrivateRoute exact path=\"/bitehuman\" component={BiteHuman} />\r\n          <PrivateRoute exact path=\"/bitezombie\" component={BiteZombie} />\r\n          <PrivateRoute exact path=\"/squads\" component={SquadList} />\r\n          <PrivateRoute exact path=\"/squaddetails\" component={SquadDetail} />\r\n          <PrivateRoute exact path=\"/createsquad\" component={SquadCreate} />\r\n          <PrivateRoute exact path=\"/currentgames\" component={CurrentGames} />\r\n          <PrivateRoute exact path=\"/admin\" component={Admin} />\r\n          <PrivateRoute exact path=\"/playerstate\" component={PlayerState} />\r\n          <PrivateRoute exact path=\"/map\" component={MainMap} />\r\n          <PrivateRoute exact path=\"/choosefaction\" component={ChooseFaction} />\r\n          <PrivateRoute exact path=\"/creategame\" component={AdminCreateGame} />\r\n          <PrivateRoute exact path=\"/create/missionmarker\" component={CreateMissionMarker} />\r\n          <PrivateRoute exact path=\"/editgame\" component={EditGame} />\r\n          <PrivateRoute exact path=\"/chat\" component={Chat} />\r\n          <Route path='*'>\r\n            <NotFound header='Page not found' message='The page you requested does not exist' />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\nexport default App;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js",["201"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { AuthContext } from \"../../utils/Auth\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { loginUser } from \"../../utils/dbstorage.js\";\r\nimport Phone from \"./Phone.js\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\n\r\nconst Login = ({ history }) => {\r\n\r\n    const handleLogin =\r\n        async event => {\r\n\r\n            event.preventDefault();\r\n            const { email, password } = event.target.elements;\r\n            try {\r\n                const status = await loginUser(email.value, password.value)\r\n                if (status === 200) {\r\n                    await firebase\r\n                        .auth()\r\n                        .signInWithEmailAndPassword(email.value, password.value)\r\n                        .catch(err => {\r\n                            alert(err.message)\r\n                            history.push(\"/\")\r\n                        });\r\n                } else {\r\n                    alert(\"Incorrect email or password!\")\r\n                }\r\n            } catch (error) {\r\n                alert(error);\r\n            }\r\n        };\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderOutside />\r\n            <section className=\"login-register\">\r\n                <div className=\"container\">\r\n                    <h1>Log in</h1>\r\n                    <Form onSubmit={handleLogin} name=\"loginForm\">\r\n                        <Form.Group controlId=\"formEmail\">\r\n                            <Form.Label>Email: </Form.Label>\r\n                            <Form.Control name=\"email\" type=\"email\" placeholder=\"Email\" required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formPassword\">\r\n                            <Form.Label>Password: </Form.Label>\r\n                            <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" required />\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Log in</button>\r\n                        <Link to=\"/login\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                    <Link to=\"/register\">Don't have an account? Register here.</Link>\r\n                    <p>Or</p>\r\n                    <Link to=\"/phone\">Login with your phone!*</Link>\r\n                    <p><i>* Must be verified first!</i></p>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(Login);","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js",["202","203","204"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { UpdateGame, FetchAllGames, FetchGame } from \"../../utils/GameStorage\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\n\r\n\r\nconst EditGame = (props) => {\r\n  const [validGameName, setValidGameName] = useState(false);\r\n  const [validGameDescription, setValidGameDescription] = useState(false);\r\n  const [allGames, setAllGames] = useState([])\r\n  const [selectedGameId, setSelectedGameId] = useState(null);\r\n  const [gameObject, setGameObject] = useState({})\r\n\r\n  useEffect(() => {\r\n    fetchAllGames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedGameId !== null) {\r\n      fetchGame()\r\n    }\r\n    else {\r\n      setGameObject({})\r\n    }\r\n  }, [selectedGameId]);\r\n\r\n  useEffect(() => {\r\n\r\n  }, [gameObject]);\r\n\r\n  async function fetchAllGames() {\r\n    let allGames = await FetchAllGames();\r\n    if (allGames !== null) {\r\n      setAllGames(allGames);\r\n    } else {\r\n      alert('Failed to fetch games');\r\n      setAllGames([]);\r\n    }\r\n  }\r\n\r\n  async function fetchGame() {\r\n    let game = await FetchGame(selectedGameId);\r\n    if (game !== null) {\r\n      setGameObject(\r\n        {\r\n          name: game.name,\r\n          gameState: game.gameState,\r\n          gameId: game.gameId,\r\n          startTime: game.startTime,\r\n          endTime: game.endTime,\r\n          maxNumberOfPlayers: game.maxNumberOfPlayers,\r\n          description: game.description\r\n        }\r\n      );\r\n    } else {\r\n      alert('Failed to fetch games');\r\n      setGameObject({});\r\n    }\r\n  }\r\n\r\n  async function editGame() {\r\n    let editGameResponse = await UpdateGame(gameObject);\r\n    if (editGameResponse.status === 200) {\r\n      props.history.push(\"/admin\");\r\n    } else if (editGameResponse.status === 400) {\r\n      alert(\"Game name must be unique!\");\r\n    } else {\r\n      alert(\"Something went wrong while updating the game.\");\r\n    }\r\n  }\r\n\r\n  const onGameNameChange = ev => {\r\n    let currentGameName = ev.target.value;\r\n    if (currentGameName.length < 4) {\r\n      setValidGameName(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentGameName\r\n      }));\r\n      setValidGameName(true);\r\n    }\r\n  }\r\n\r\n  const onGameDescriptionChange = ev => {\r\n    let currentGameDescription = ev.target.value;\r\n    if (currentGameDescription.length < 4) {\r\n      setValidGameDescription(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        description: currentGameDescription\r\n      }));\r\n      setValidGameDescription(true);\r\n    }\r\n  }\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n  const onSizeChange = ev => {\r\n    let numPlayers = ev.target.value;\r\n    if (numPlayers > 0) {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        maxNumberOfPlayers: numPlayers\r\n      }));\r\n    }\r\n  }\r\n\r\n  function handleChangeGameToUpdate(ev) {\r\n    let selectedGame = ev.target.value;\r\n    if (selectedGame !== \"0\") {\r\n      setSelectedGameId(selectedGame)\r\n      setGameObject({})\r\n    }\r\n    else {\r\n      setSelectedGameId(null);\r\n    }\r\n  }\r\n\r\n  function isEmpty(obj) {\r\n    for (var prop in obj) {\r\n      if (obj.hasOwnProperty(prop))\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  return (\r\n    <>\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <Header />\r\n          <GameMenu />\r\n          <h1>Edit game</h1>\r\n          <br />\r\n          <Form.Group>\r\n\r\n            <Form.Control\r\n              onChange={handleChangeGameToUpdate}\r\n              className=\"mb-4\"\r\n              as=\"select\">\r\n              <option value=\"0\">Select game...</option>\r\n              {allGames.filter(game => game.gameState !== 'COMPLETED').map(filteredGame => (\r\n                <option key={filteredGame.gameId} value={filteredGame.gameId}>\r\n                  {filteredGame.name}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n\r\n            {selectedGameId !== null && !isEmpty(gameObject) ?\r\n              <div>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter game name...\"\r\n                  defaultValue={gameObject.name}\r\n                  onChange={onGameNameChange} />\r\n                <br />\r\n                <Form.Control\r\n                  placeholder=\"Enter game description...\"\r\n                  as=\"textarea\"\r\n                  defaultValue={gameObject.description}\r\n                  rows={3}\r\n                  onChange={onGameDescriptionChange} />\r\n                <br />\r\n                <TextField\r\n                  id=\"datetime-local\"\r\n                  label=\"Start time\"\r\n                  type=\"datetime-local\"\r\n                  defaultValue={gameObject.startTime.substring(0, 16)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n\r\n                  onChange={onStartTimeChange}\r\n                />\r\n                <br />  <br />\r\n                <TextField\r\n                  id=\"datetime-local\"\r\n                  label=\"End time\"\r\n                  type=\"datetime-local\"\r\n                  defaultValue={gameObject.endTime.substring(0, 16)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  onChange={onEndTimeChange}\r\n                />\r\n                <br />\r\n                <br />\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  defaultValue={gameObject.maxNumberOfPlayers}\r\n                  size=\"sm\"\r\n                  onChange={onSizeChange}\r\n                  placeholder=\"Max number of players...\">\r\n\r\n                </Form.Control>\r\n                <br /> <br />\r\n                <Button\r\n                  onClick={editGame}>Edit</Button>\r\n              </div>\r\n              : null}\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default EditGame;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js",["205","206","207"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { AuthContext } from \"../../utils/Auth.js\";\r\nimport { storePhone } from \"../../utils/dbstorage.js\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\n\r\nconst RegisterPhone = ({ history }) => {\r\n\r\n    const handleRegister = async event => {\r\n        event.preventDefault();\r\n        const { phone } = event.target.elements;\r\n        storePhone(phone.value);\r\n    }\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <>\r\n            <HeaderOutside />\r\n            <section className=\"login-register\">\r\n                <div className=\"container\">\r\n                    <h1>Register Phone</h1>\r\n                    <Form onSubmit={handleRegister} name=\"loginForm\">\r\n                        <Form.Group controlId=\"formPhone\">\r\n                            <Form.Label>Phone Number: </Form.Label>\r\n                            <Form.Control name=\"phone\" type=\"tel\" required />\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Register</button>\r\n                        <Link to=\"/registerphone\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterPhone);","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js",["208","209"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\nimport Header from '../StylingComponents/Header';\r\n\r\nconst BiteHuman = ({history}) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await FetchPlayer(gameId, userId);\r\n        if (response !== null) {\r\n            setCurrentPlayer(response);\r\n        } else {\r\n            alert(\"Could not find Player object.\");\r\n        }\r\n    }\r\n\r\n\r\n    if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n            </div>\r\n        )\r\n    } else if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div id=\"codeEntryContainer\">\r\n                    <h2>BITE CODE ENTRY</h2>\r\n                    <input type=\"text\" placeholder=\"CODE-HERE\" />\r\n                    <br/>\r\n                    <button>Make Zombie</button>\r\n                    <button>Kill</button>\r\n                </div>\r\n        \r\n                <br/>\r\n        \r\n                <div id=\"killContainer\">\r\n                    <input type=\"text\" placeholder=\"Coordinates (auto)\" />\r\n                    <br/>\r\n                    <input type=\"text\" placeholder=\"Victim Description\" />\r\n                    <br/>\r\n                    <button>Submit</button>\r\n                    <button>Cancel</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h3>Something went wrong...</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BiteHuman;\r\n\r\n\r\n\r\n\r\n/* class BiteHuman extends Component {\r\n\r\n    state = {\r\n        details: []\r\n    };\r\n\r\n    componentDidMount() {\r\n      fetch('/api/fetch/player/1')\r\n          .then(res => res.json())\r\n          .then((data) => {\r\n              this.setState({details: data})\r\n          })\r\n          .catch(console.log);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{this.state.details.biteCode}</div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BiteHuman; */","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js",["210","211"],"import React, { useEffect, useState } from 'react';\r\nimport Header from '../StylingComponents/Header';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FetchGame } from '../../utils/GameStorage';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\nimport { FetchSquadMember } from '../../utils/SquadMemberStorage';\r\nimport GameMenu from '../StylingComponents/GameMenu';\r\nimport HeaderOutside from '../StylingComponents/HeaderOutside';\r\n\r\nconst LandingPage = (props) => {\r\n\r\n    const [hasJoined, setHasJoined] = useState(false);\r\n    const [gameDetails, setGameDetails] = useState({});\r\n\r\n    useEffect(() => {\r\n        let gameId = localStorage.getItem('Game ID');\r\n        let userId = localStorage.getItem('User ID');\r\n        FetchGame(gameId).then(data => {\r\n            if (data !== null) {\r\n                setGameDetails(data);\r\n            } else {\r\n                alert(\"GAME NOT FOUND!\");\r\n                props.history.push(\"/currentgames\");\r\n            }\r\n        }).then(() => {\r\n            FetchPlayer(gameId, userId).then(data => {\r\n                if (data !== null) {\r\n                    setHasJoined(true);\r\n                    localStorage.setItem('Player ID', data.playerId);\r\n                    localStorage.setItem('Faction', data.faction);\r\n                    FetchSquadMember(gameId, data.playerId).then(data2 => {\r\n                        if (data2 !== null) {\r\n                            localStorage.setItem('SquadMember ID', data2.squadMemberId);\r\n                            localStorage.setItem('Squad ID', data2.squadId);\r\n                            localStorage.setItem('Squad Rank', data2.squadRank);\r\n                        } else {\r\n                            localStorage.setItem('SquadMember ID', null);\r\n                            localStorage.setItem('Squad ID', null);\r\n                            localStorage.setItem('Squad Rank', null);\r\n                        }\r\n                    });\r\n                } else {\r\n                    localStorage.setItem('Player ID', null);\r\n                    localStorage.setItem('Faction', null);\r\n                    localStorage.setItem('Squad ID', null);\r\n                    localStorage.setItem('SquadMember ID', null);\r\n                    localStorage.setItem('Squad Rank', null);\r\n                }\r\n            })\r\n        });\r\n    }, []);\r\n\r\n    const handleJoinGame = () => {\r\n        props.history.push('/choosefaction');\r\n    };\r\n\r\n    // Need to remove the game id from the current player in the database as well\r\n    const handleLeaveGame = () => {\r\n        localStorage.removeItem('Game ID');\r\n        localStorage.removeItem('Player ID');\r\n        localStorage.removeItem('Squad ID');\r\n        localStorage.removeItem('SquadMember ID');\r\n        localStorage.removeItem('Faction');\r\n        localStorage.removeItem('Squad Rank');\r\n        props.history.push('/currentgames');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    {hasJoined ? <Header /> : <HeaderOutside />}\r\n                    <div id=\"landing\">\r\n                        <h2> {gameDetails.name}</h2>\r\n                        <div id=\"description\">\r\n                            <br />\r\n                            <h3>Description: </h3>\r\n                            <p> {gameDetails.description} </p>\r\n                            <br />\r\n                            <h4>Start Time: {gameDetails.startTime}\r\n                                <br />\r\n                            End Time: {gameDetails.endTime}\r\n                            </h4>\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span>\r\n                            {hasJoined ?\r\n                                <Button variant=\"danger\" onClick={handleLeaveGame}>Leave Game</Button> :\r\n                                <Button variant=\"success\" onClick={handleJoinGame}>Join Game</Button>\r\n                            }\r\n                            <Button variant=\"secondary\" onClick={handleLeaveGame}>Go Back</Button>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div id=\"rules\">\r\n                        <br />\r\n                        <h3>Rules: </h3>\r\n                        <div>\r\n                            <h4>Overview</h4>\r\n                            <ul>\r\n                                <li>Humans vs. Zombies is a game of tag.</li>\r\n                                <li>All players begin as humans, and one is randomly chosen to be the “Original Zombie”.</li>\r\n                                <li>The Original Zombie tags human players and turns them into zombies.</li>\r\n                                <li>Zombies must tag and eat a human every 24 hours or they starve to death and are out of the game.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Objective</h4>\r\n                            <ul>\r\n                                <li>The Zombies win when all human players have been tagged and turned into zombies.</li>\r\n                                <li>The Humans win by surviving long enough for all of the zombies to starve.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Equipment</h4>\r\n                            <ul>\r\n                                <li>Bandana</li>\r\n                                <li>Foam Dart Blaster (aka Nerf Gun)</li>\r\n                                <li>Marshmallow Launcher</li>\r\n                                <li>Rolled up (CLEAN) socks</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Safe Zones</h4>\r\n                            <p>Some areas on campus are “no play zones,” where the game is permanently suspended. Blasters must be concealed and no players may be stunned or tagged. </p>\r\n                            <br />\r\n                            <p>These areas include:</p>\r\n                            <ul>\r\n                                <li>Bathrooms</li>\r\n                                <li>Health Centers</li>\r\n                                <li>Libraries</li>\r\n                                <li>Indoor Athletic Facilities</li>\r\n                                <li>Academic Buildings</li>\r\n                            </ul>\r\n                            <br />\r\n                            <p>Other areas on campus are merely \"safe zones\", where gameplay continues but humans can't be tagged (unless a zombie has both of their feet outside the safe zone). These areas include: Dorm rooms and Dining Halls</p>\r\n                            <br />\r\n\r\n                            <h4>Safety Rules</h4>\r\n                            <p>Rules created for the safety of all players are strictly enforced. Violation of safety rules will result in a ban from the game.</p>\r\n                            <br />\r\n                            <ul>\r\n                                <li>No realistic looking weaponry. Blasters must be brightly colored and have blaze-orange tips.</li>\r\n                                <li>Blasters may not be visible inside of academic buildings or jobs on campus.</li>\r\n                                <li>Players may not use cars or play where there is traffic.</li>\r\n                                <li>Socks, Darts or Marshmallows must not hurt on impact.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Human Rules</h4>\r\n                            <ul>\r\n                                <li>Wearing a Bandanna: Humans must wear a headband around an arm or leg to identify them as players of the game. (This headband will come in handy when you become a zombie!)</li>\r\n                                <li>Stunning a Zombie: Humans may stun a Zombie for 15 minutes by blasting them with a blaster or throwing a sock at them.</li>\r\n                                <li>When Tagged By a Zombie: When tagged by a Zombie, a Human is required to distribute their ID card. One hour after being tagged, tie your bandanna around your head – you are now a member of the Zombie team! Go tag some Humans.</li>\r\n                                <li>Staying On Campus: Humans must sleep on campus. If you need to leave campus for longer than 24 hours, contact the game moderators and remove yourself from the game.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Zombie Rules</h4>\r\n                            <ul>\r\n                                <li>Feeding: Zombies must feed every 24 hours. A zombie feeds by reporting their tag on the app.</li>\r\n                                <li>Tagging: A tag is a firm touch to any part of a Human. After tagging a Human the Zombie must collect their Bite Code and report it in the app.</li>\r\n                                <li>Getting Shot: When hit with a dart, a marshmallow, or a sock, a Zombie is stunned for 15 minutes. A stunned zombie may not interact with the game in any way. This includes shielding other zombies from bullets or continuing to run toward a human. If shot while stunned, the zombie’s stun timer is reset back to 15 minutes.</li>\r\n                                <li>Wearing A Headband: Zombies must wear a bandanna around their heads at all times. The Original Zombie does not need to wear a headband.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>Other Rules</h4>\r\n                            <ul>\r\n                                <li>Blasting Non-Players: Blasting non-players is a bannable offense.</li>\r\n                                <li>Non-Player Interference: People who are not registered participants may not directly interact with the game. This includes bringing food to humans or spying for either team.</li>\r\n                                <li>Safe Zones: A zombie must have both feet outside of a safe zone to tag a human. Humans can stun zombies from inside of a safe-zone.</li>\r\n                                <li>No Shields: Zombies may not use shields to deflect foam darts, marshmallows or socks.</li>\r\n                                <li>Athletes: Athletes are safe during official practices, but not on the way to or from practice.</li>\r\n                                <li>Required Academic Events: Similarly, students at required academic events are safe for the duration of the event (even if this event is in a free-play zone), but they are not safe on the way to or from the event.</li>\r\n                            </ul>\r\n                            <br />\r\n\r\n                            <h4>DBag Clause</h4>\r\n                            <p>Don’t be a douchebag. Everyone plays Humans vs. Zombies to have fun, and the rules of HvZ only exist because we agree they do. That’s why the most important rule of Humans vs. Zombies is to treat your fellow players with respect, and gracefully accept when you have been tagged or stunned.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LandingPage;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js",["212"],"import React, { useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { CreateGame } from \"../../utils/GameStorage\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst AdminCreateGame = (props) => {\r\n    const [validGameName, setValidGameName] = useState(false);\r\n    const [validGameDescription, setValidGameDescription] = useState(false);\r\n    const [gameObject, setGameObject] = useState(\r\n        {\r\n            name: \"\",\r\n            gameState: \"PREPARATION\",\r\n            startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n            endTime: \"2021-01-02T08:00:00.000+00:00\",\r\n            maxNumberOfPlayers: 50,\r\n            description: \"\"\r\n        })\r\n\r\n    async function createGame() {\r\n        if (validGameDescription === true && validGameName === true) {\r\n            let createGameResponse = await CreateGame(gameObject);\r\n            if (createGameResponse.status === 201) {\r\n                props.history.push(\"/currentgames\");\r\n            } else if (createGameResponse.status === 400) {\r\n                alert(\"Game name must be unique!\");\r\n            } else {\r\n                alert(\"Something went wrong while creating the game.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const onGameNameChange = ev => {\r\n        let currentGameName = ev.target.value;\r\n        if (currentGameName.length < 4) {\r\n            setValidGameName(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                name: currentGameName\r\n            }));\r\n            setValidGameName(true);\r\n        }\r\n    }\r\n\r\n    const onGameDescriptionChange = ev => {\r\n        let currentGameDescription = ev.target.value;\r\n        if (currentGameDescription.length < 4) {\r\n            setValidGameDescription(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                description: currentGameDescription\r\n            }));\r\n            setValidGameDescription(true);\r\n        }\r\n    }\r\n\r\n    const onStartTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            startTime: time\r\n        }));\r\n    }\r\n\r\n    const onEndTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            endTime: time\r\n        }));\r\n    }\r\n\r\n    const onSizeChange = ev => {\r\n        let numPlayers = ev.target.value;\r\n        if (numPlayers > 0) {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                maxNumberOfPlayers: numPlayers\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <GameMenu />\r\n                    <h1>Create game</h1>\r\n                    <br />\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter game name...\" onChange={onGameNameChange} />\r\n                        <br />\r\n                        <Form.Control placeholder=\"Enter game description...\" as=\"textarea\" rows={3} onChange={onGameDescriptionChange} />\r\n                        <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"Start time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-01T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onStartTimeChange}\r\n                        />\r\n                        <br />  <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"End time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-02T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onEndTimeChange}\r\n                        />\r\n                        <br />\r\n\r\n                        <br />\r\n                        <Form.Control type=\"number\" size=\"sm\" onChange={onSizeChange} placeholder=\"Max number of players...\">\r\n\r\n                        </Form.Control>\r\n                        <br /> <br />\r\n                        <Button disabled={!validGameName || !validGameDescription} onClick={createGame}>Create</Button>\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\nexport default AdminCreateGame;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js",["213"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\n\r\nconst Admin = () => {\r\n\r\n  return (\r\n    <>\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <Header />\r\n          <GameMenu />\r\n          <h1>Admin</h1>\r\n          <Link to=\"/creategame\">Create Game</Link>\r\n          <Link to=\"/editgame\">Edit Game</Link>\r\n          <Link to=\"#\">Edit Player State</Link>\r\n          <Link to=\"/create/missionmarker\">Create Mission Marker</Link>\r\n          <Link to=\"#\">Edit Mission Marker</Link>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Admin;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js",["214","215","216"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\nimport { storeSquadDB } from '../../utils/squadstorage';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\n\r\nconst SquadCreate = ({ history }) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let hasSquadMemberObject = localStorage.getItem('SquadMember ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    // The userId doesn't work properly (it only works with the dummy data), so we can't fetch the current player\r\n    async function fetchCurrentPlayer() {                                                                    // user should be set to userId, not 1\r\n        const playerResponse = await FetchPlayer(gameId, userId);\r\n        if(playerResponse !== null) {\r\n            setCurrentPlayer(playerResponse);\r\n        } else {\r\n            alert(\"Could not find Player object.\");\r\n        }\r\n    }\r\n\r\n    localStorage.setItem('Faction', currentPlayer.faction);\r\n\r\n    async function handleCreateSquad(event) {\r\n        event.preventDefault();\r\n        const token = localStorage.getItem('jwt');\r\n        const { squadName, squadMemberAmount } = event.target.elements;\r\n        console.log(squadName.value, squadMemberAmount.value)\r\n        let createSquadRepsonse = await storeSquadDB(squadName.value, currentPlayer.faction, squadMemberAmount.value);\r\n\r\n        if (createSquadRepsonse === 201) {\r\n            let squadMemberExists = await fetch('/api/fetch/squadmember/game=' + gameId + '/player=' + playerId, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token \r\n                }\r\n            });\r\n            let newSquadId = localStorage.getItem('Squad ID');\r\n            if (squadMemberExists.status === 200) {\r\n                let response = await fetch('/api/update/squadmember/' + hasSquadMemberObject, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squad: {\r\n                            squadId: newSquadId\r\n                        },\r\n                        squadRank: \"LEADER\",\r\n                        squadMemberId: hasSquadMemberObject\r\n                    })\r\n                });\r\n                let body = await response.json();\r\n                localStorage.setItem('SquadMember ID', body.squadMemberId);\r\n\r\n                history.push('/squaddetails/');\r\n            } else if (squadMemberExists.status === 404) {\r\n                let newSquadId = localStorage.getItem('Squad ID');\r\n                let response = await fetch('/api/create/squadmember/' + gameId + '/' + newSquadId + '/' + playerId, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squadId: squadId,\r\n                        squadRank: \"LEADER\"\r\n                    })\r\n                });\r\n                if (response.status === 201) {\r\n                    let body = await response.json();\r\n                    localStorage.setItem('SquadMember ID', body.squadMemberId);\r\n                    localStorage.setItem('Squad Rank', 'LEADER');\r\n                } else {\r\n                    alert(\"Failed to create squad member!\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // function handleSquadName() {\r\n    //     console.log(document.getElementById('squadName').value);\r\n    //     localStorage.setItem('squadName', (document.getElementById('squadName').value));\r\n    // }\r\n\r\n    // function handleSquadMemberAmount() {\r\n    //     console.log(document.getElementById('squadMemberAmount').value);\r\n    //     localStorage.setItem('squadMemberAmount', (document.getElementById('squadMemberAmount').value));\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"container\">\r\n                <div id=\"squadCreateForm\">\r\n                    <h2>Create Squad\r\n                    {console.log(currentPlayer)}\r\n                    </h2>\r\n                    <Form onSubmit={handleCreateSquad}>\r\n                        <Form.Group controlId=\"formSquadName\">\r\n                            {/* <Form.Label>Squad Name: </Form.Label> */}\r\n                            <Form.Control id=\"squadName\" name=\"squadName\" type=\"text\" placeholder=\"Squad Name\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadMemberLimit\">\r\n                            {/* <Form.Label>Squad Member Amount: </Form.Label> */}\r\n                            <Form.Control id=\"squadMemberAmount\" name=\"squadMemberAmount\" type=\"text\" placeholder=\"Squad Members (XX max)\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadFaction\">\r\n                            {/* <Form.Label>Squad Faction: </Form.Label> */}\r\n                            <Form.Control name=\"squadFaction\" type=\"text\" value={currentPlayer.faction} required></Form.Control>\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Create</button>\r\n                        <Link to=\"squads\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadCreate","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js",["217","218","219","220","221","222","223"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { UpdateSquadMember } from '../../utils/SquadMemberStorage';\r\nimport GameMenu from '../StylingComponents/GameMenu';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadDetail = ({ history }) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let squadMemberId = localStorage.getItem('SquadMember ID');\r\n    let squadRank = localStorage.getItem('Squad Rank');\r\n\r\n    const [squadMembers, setSquadMembers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMembers();\r\n    }, [])\r\n\r\n    // A check should be added depending on response code, see function below this one\r\n    async function fetchSquadMembers() {\r\n        const token = localStorage.getItem('jwt');\r\n        const memberResponse = await fetch('/api/fetch/squadmember/details/game=' + gameId + '/squad=' + squadId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        let body;\r\n        if (memberResponse.status === 200) {\r\n            body = await memberResponse.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquadMembers(body);\r\n    }\r\n\r\n    // The below function doesn't work as is, but should be implemented instead of the one above\r\n    // async function fetchSquadMembers() {\r\n    //     const response = await (await fetch('/api/fetch/squadmember/details/game=' + gameId + '/squad=' + squadId)).json();\r\n    //     let body;\r\n    //     if (response.status === 200) {\r\n    //         body = response.json();\r\n    //     } else {\r\n    //         body = [];\r\n    //     }\r\n    //     setSquadMembers(body);\r\n    // }\r\n\r\n    function getLocation() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        }\r\n    }\r\n\r\n    function showPosition(position) {\r\n        let currentPosition = document.getElementById(\"current-location\");\r\n        currentPosition.innerHTML = \"Latitude: \" + position.coords.latitude +\r\n            \"<br>Longitude: \" + position.coords.longitude;\r\n    }\r\n\r\n    const [squad, setSquad] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquad();\r\n    }, [])\r\n\r\n    async function fetchSquad() {\r\n        const token = localStorage.getItem('jwt');\r\n        const response = await fetch('/api/fetch/squad/' + squadId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        let body;\r\n        if (response.status === 200) {\r\n            body = await response.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquad(body);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const token = localStorage.getItem('jwt');\r\n        const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (playerResponse.status === 200) {\r\n            let body = await playerResponse.json();\r\n            setCurrentPlayer(body);\r\n        } else {\r\n            setCurrentPlayer({});\r\n        }\r\n    }\r\n\r\n\r\n    async function handleLeaveSquad() {\r\n        let response = await UpdateSquadMember(squadMemberId, null);\r\n        if (response !== null) {\r\n            localStorage.setItem('Squad ID', response.squadId);\r\n            localStorage.setItem('SquadMember ID', null)\r\n            history.push('/squads');\r\n        } else {\r\n            alert('Failed to leave squad.');\r\n        }\r\n    }\r\n\r\n\r\n    function handleDisbandSquad() {\r\n        const token = localStorage.getItem('jwt');\r\n        if (squadRank === \"LEADER\") {\r\n            fetch('/api/delete/squad/' + squadId, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token \r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => console.log(res));\r\n            localStorage.setItem('Squad ID', 'null');\r\n            localStorage.setItem('Squad Member ID', 'null');\r\n            localStorage.setItem('Squad Rank', 'null');\r\n            history.push('/squads');\r\n        } else {\r\n            alert(\"You must be a leader to disband the squad.\")\r\n        }\r\n    }\r\n    \r\n\r\n    if (squadMemberId === 'null' || squadMemberId === 'undefined') {\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <h3>Forbidden</h3>\r\n                    <p>You must first join a squad to gain access to the squad detail page.</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n\r\n                        <h1>{squad.name}\r\n                            {console.log(squad)}\r\n                            {console.log(squadMembers)}\r\n                            {console.log(currentPlayer)}</h1>\r\n                        <br />\r\n\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Alive</th>\r\n                                    <th>Rank</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {squadMembers.map((s) =>\r\n                                    <tr>\r\n                                        <td>{s.username}</td>\r\n                                        <td>{s.alive.toString()}</td>\r\n                                        <td>{s.squadRank}</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <br />\r\n\r\n                        <button onClick={getLocation}>Mark location</button>\r\n                        <p id=\"current-location\"></p>\r\n                        <button type=\"button\" onClick={() => handleLeaveSquad()}>Leave Squad</button>\r\n\r\n                        <br />\r\n                        <button type=\"button\" onClick={() => handleDisbandSquad()}>Disband Squad (only available to the leader)</button>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SquadDetail;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js",["224","225","226","227","228","229"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\nimport { CreateSquadMember, FetchSquadMember, UpdateSquadMember } from '../../utils/SquadMemberStorage';\r\nimport GameMenu from '../StylingComponents/GameMenu';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadList = ({ history }) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let storageSquadId = localStorage.getItem('Squad ID');\r\n    let squadMemberId = localStorage.getItem('SquadMember ID');\r\n    let currentFaction = localStorage.getItem('Faction');\r\n\r\n    const [squads, setSquads] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquads();\r\n    }, [])\r\n\r\n    async function fetchSquads() {\r\n        const token = localStorage.getItem('jwt');\r\n        const squadResponse = await fetch('/api/fetch/squad/details/game=' + gameId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        let body;\r\n        if (squadResponse.status === 200) {\r\n            body = await squadResponse.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquads(body);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await FetchPlayer(gameId, userId);\r\n        if (playerResponse !== null) {\r\n            setCurrentPlayer(playerResponse);\r\n        } else {\r\n            alert(\"Could not find Player object\");\r\n        }\r\n    }\r\n\r\n\r\n    const [squadMember, setSquadMember] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMember();\r\n    }, [])\r\n\r\n    async function fetchSquadMember() {\r\n        const response = FetchSquadMember(gameId, playerId);\r\n        if (response !== null) {\r\n            setSquadMember(response);\r\n        } else {\r\n            alert(\"Could not find SquadMember object.\");\r\n        }\r\n    }\r\n\r\n    async function handleJoinSquad(squadId) {\r\n        if (squadMemberId === 'null') {\r\n            //Player do not have a SquadMember Object yet. Create one.\r\n            let response = await CreateSquadMember(gameId, squadId, playerId, 'MEMBER');\r\n            if (response !== null) {\r\n                localStorage.setItem('Squad ID', response.squadId);\r\n                localStorage.setItem('SquadMember ID', response.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'MEMBER');\r\n                history.push('squaddetails');\r\n            } else {\r\n                alert('Failed to join squad! Post failed.');\r\n            }\r\n        } else if (storageSquadId === 'null') {\r\n            //Player has a SquadMember Object but is not assigned to a squad yet. Patch it.\r\n            let response = await UpdateSquadMember(squadMemberId, squadId);\r\n            if (response !== null) {\r\n                localStorage.setItem('Squad ID', response.squadId);\r\n                localStorage.setItem('SquadMember ID', response.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'MEMBER');\r\n                history.push('/squaddetails');\r\n            } else {\r\n                alert('Failed to join squad! Patch failed.');\r\n                console.log(response);\r\n            }\r\n        } else {\r\n            //Player is already a member of a squad. Prompt them to leave squad before trying again.\r\n            alert('You are already in a squad. Leave current squad and try again.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <h1>Active Squads</h1>\r\n                    <div>\r\n                        {console.log(\"This is the current player: \\n\" + currentPlayer)}\r\n                        {console.log(\"This is the current squad member: \\n\" + squadMember)}\r\n                    </div>\r\n\r\n                    {/* <div>\r\n                        <button type=\"button\" onClick={assignSquadMemberId}>ASSIGN SM ID</button>\r\n                    </div> */}\r\n\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Members</th>\r\n                                <th>Faction</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {squads.map((s) =>\r\n                                <tr>\r\n                                    <td>{s.squadName}</td>\r\n                                    <td>{s.numberOfRegisteredMembers} / {s.maxNumberOfMembers}</td>\r\n                                    <td>{s.faction}</td>\r\n                                    <td>\r\n                                        <button type=\"button\" disabled={s.faction !== currentFaction || s.numberOfRegisteredMembers >= s.maxNumberOfMembers} onClick={() => handleJoinSquad(s.squadId)}>JOIN</button>\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <br />\r\n                    <Link to=\"createsquad\">\r\n                        <button>Create New Squad</button>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadList;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js",["230"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport GameMenu from './GameMenu';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n\r\n                <div id=\"gameMenu\"><GameMenu /></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js",["231","232"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\n\r\nconst HeaderOutside = () => {\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeaderOutside;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js",["233","234","235","236"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Modal from './Modal';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\n\r\nconst BUTTON_WRAPPER_STYLES = {\r\n    position: 'relative',\r\n    zIndex: 1,\r\n    backgroundColor: 'rgb(221, 221, 221)',\r\n    height: '60px',\r\n    width: '60px'\r\n}\r\n\r\nconst GameMenu = ({history}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = FetchPlayer(gameId, userId);\r\n        if (response !== null) {\r\n            setCurrentPlayer(response);\r\n        }else {\r\n            alert('Could not fetch current player.');\r\n            setCurrentPlayer({});\r\n        }\r\n    }\r\n\r\n\r\n    function handleBitePage() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        }\r\n    }\r\n\r\n    function showPosition(position) {\r\n        let currentLatitude = position.coords.latitude;\r\n        let currentLongitude = position.coords.longitude;\r\n        localStorage.setItem('Latitude', currentLatitude);\r\n        localStorage.setItem('Longitude', currentLongitude);\r\n        history.push('/bite');\r\n    }\r\n\r\n\r\n    // function handleBitePage() {\r\n    //     if (currentPlayer.faction === 'HUMAN') {\r\n    //         history.push('/bitehuman');\r\n    //     } else if (currentPlayer.faction === 'ZOMBIE') {\r\n    //         history.push('/bitezombie');\r\n    //     } else {\r\n    //         alert('Something went wrong, please try again.');\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div onClick={() => console.log(\"clicked\")}>\r\n                <Button variant=\"dark\" onClick={() => setIsOpen(true)}>Menu</Button>\r\n            \r\n                <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n                    <Link to=\"landing\">\r\n                        <div>Landing/Rules</div>\r\n                    </Link>\r\n                    <Link to=\"map\">\r\n                        <div>Map</div>\r\n                    </Link>\r\n                    \r\n                    <div onClick={handleBitePage}>Bite</div>\r\n                    \r\n                    {/* <div onClick={handleBitePage}>Bite</div>\r\n                    <Link to=\"bitehuman\">\r\n                        <div>Bite Human</div>\r\n                    </Link>\r\n                    <Link to=\"bitezombie\">\r\n                        <div>Bite Zombie</div>\r\n                    </Link> */}\r\n                    <Link to=\"chat\">\r\n                        <div>Chat</div>\r\n                    </Link>\r\n                    <Link to=\"squads\">\r\n                        <div>Squads</div>\r\n                    </Link>\r\n                    <Link to=\"squaddetails\">\r\n                        <div>Squad Details</div>\r\n                    </Link>\r\n                    <Link to=\"admin\">\r\n                        <div>Admin</div>\r\n                    </Link>\r\n                    <div>\r\n                        <button onClick={handleSignOut}>Sign out</button>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter (GameMenu);","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js",["237","238","239"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ButtonGroup, Button, Form } from 'react-bootstrap';\r\nimport { CreateMessage, GetBundleOfChatMessages, DeleteChatMessage, UpdateChatMessage } from '../../utils/ChatMessageStorage';\r\nimport { ThemeProvider, ChatList, ChatListItem, Avatar, Column, Subtitle, Row, Title, IconButton, SendIcon } from '@livechat/ui-kit'\r\n\r\n\r\nconst ChatMessage = props => {\r\n\r\n    let userId = localStorage.getItem('User ID');\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerFaction = localStorage.getItem('Faction');\r\n\r\n    const [chatRoom, setChatRoom] = useState('ALL');\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [chatMessages, setChatMessages] = useState([]);\r\n    const [validInput, setValidInput] = useState(false);\r\n    const [messageToUpdateId, setMessageToUpdateId] = useState(null);\r\n    const [isEditingMessage, setIsEditingMessage] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (userId !== 'null' && userId !== null) {\r\n            if (playerId !== 'null' && playerId !== null) {\r\n                if (gameId !== 'null' && gameId !== null) {\r\n                    if (playerFaction !== 'null' && playerFaction !== null) {\r\n                        let request = {\r\n                            gameId: gameId,\r\n                            playerId: playerId,\r\n                            squadId: null,\r\n                            faction: chatRoom\r\n                        }\r\n                        fetchMessages();\r\n                    } else {\r\n                        alert('Faction missing.');\r\n                        props.history.push(\"/landing\");\r\n                    }\r\n                } else {\r\n                    alert('Game ID missing.');\r\n                    props.history.push(\"/landing\");\r\n                }\r\n            } else {\r\n                alert('Player ID missing.');\r\n                props.history.push(\"/landing\");\r\n            }\r\n        } else {\r\n            alert('User ID missing.');\r\n            props.history.push(\"/landing\");\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchMessages();\r\n    }, [refresh])\r\n\r\n    useInterval(() => {\r\n        fetchMessages()\r\n    }, 5000);\r\n\r\n    function useInterval(callback, delay) {\r\n        const savedCallback = useRef();\r\n\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    async function fetchMessages() {\r\n        let request;\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: null,\r\n                    faction: 'ALL'\r\n                }\r\n                break;\r\n            case 'FACTION':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: null,\r\n                    faction: playerFaction\r\n                }\r\n                break;\r\n            case 'SQUAD':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: squadId,\r\n                    faction: playerFaction\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        let messages = await GetBundleOfChatMessages(request);\r\n        if (messages !== null) {\r\n            setChatMessages(messages);\r\n        } else {\r\n            alert('Failed to fetch messages');\r\n            setChatMessages([]);\r\n        }\r\n    }\r\n\r\n    function selectChatRoom(ev) {\r\n        let room = ev.target.value;\r\n        setChatRoom(room);\r\n        handleCancelEditingMessage()\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onMsgChanged = ev => {\r\n        let currentInput = ev.target.value;\r\n        if (currentInput.length < 1) {\r\n            setValidInput(false);\r\n        }\r\n        else {\r\n            setValidInput(true);\r\n        }\r\n        setMessage(currentInput);\r\n    }\r\n\r\n    const prepareMessageObject = () => {\r\n        let msgObject;\r\n        let time = new Date().getTime();\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: 'ALL',\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: 'null',\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            case 'FACTION':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: playerFaction,\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: 'null',\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            case 'SQUAD':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: playerFaction,\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: squadId,\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return msgObject;\r\n    }\r\n\r\n    async function sendMessage() {\r\n        let msg = prepareMessageObject();\r\n        const response = await CreateMessage(msg);\r\n        resetTextField()\r\n        if (response !== null) {\r\n            setRefresh(!refresh);\r\n        } else {\r\n            alert(\"Failed to send message! Failed to create.\")\r\n        }\r\n    }\r\n\r\n    function handleClickEnterToSendMessage(ev) {\r\n        console.log(ev.keyCode)\r\n        if (ev.keyCode === 13) {\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n    async function handleDeleteMessage(msgId) {\r\n        const response = await DeleteChatMessage(msgId);\r\n        if (response !== null) {\r\n            setRefresh(!refresh);\r\n        } else {\r\n            alert(\"Failed to send message! Failed to delete.\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function checkIfPlayerIsAuthor(msgAuthorId) {\r\n        if (playerId === msgAuthorId.toString()) {\r\n            return true;\r\n        }\r\n    }\r\n    function handleEditMessage(msgId) {\r\n        setMessageToUpdateId(msgId)\r\n        setIsEditingMessage(true)\r\n    }\r\n\r\n    function handleUpdateMessage(msgId) {\r\n        if (msgId === messageToUpdateId) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    function resetTextField() {\r\n        const textField = document.getElementById(\"messageInput\");\r\n        textField.value = \"\"\r\n    }\r\n    async function sendUpdatedMessage() {\r\n        let updatedMesageObj = {\r\n            message: message,\r\n            chatMessageId: messageToUpdateId\r\n        }\r\n        let response = await UpdateChatMessage(updatedMesageObj)\r\n\r\n        if (response !== null) {\r\n            setIsEditingMessage(false);\r\n            setRefresh(!refresh);\r\n            setMessageToUpdateId(null)\r\n        } else {\r\n            alert(\"Failed to edit message! Failed to delete.\")\r\n        }\r\n    }\r\n\r\n    function handleCancelEditingMessage() {\r\n        setIsEditingMessage(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup >\r\n                <Button variant=\"dark\"\r\n                    onClick={selectChatRoom}\r\n                    value=\"ALL\" >Global</Button>\r\n                <Button variant=\"dark\"\r\n                    onClick={selectChatRoom}\r\n                    value=\"FACTION\">Faction</Button>\r\n                <Button variant=\"dark\"\r\n                    disabled={squadId === 'null'}\r\n                    onClick={selectChatRoom}\r\n                    value=\"SQUAD\">Squad</Button>\r\n            </ButtonGroup>\r\n            <br />\r\n            <ThemeProvider>\r\n                <ChatList >\r\n                    {chatRoom === \"FACTION\" ?\r\n                        <Subtitle>{playerFaction} CHAT</Subtitle>\r\n                        : null\r\n                    }\r\n                    {chatMessages.map((chatMessage) =>\r\n                        <ChatListItem key={chatMessage.chatMessageId}>\r\n                            <Avatar imgUrl=\"https://livechat.s3.amazonaws.com/default/avatars/male_8.jpg\" />\r\n                            <Column fill>\r\n                                <Row>\r\n                                    <Title>{chatMessage.username}</Title>\r\n\r\n                                    {chatRoom === \"SQUAD\" ?\r\n                                        <Subtitle>{chatMessage.squadRank}</Subtitle>\r\n                                        :\r\n                                        chatRoom === \"FACTION\" && chatMessage.alive ?\r\n                                            <Subtitle> Alive </Subtitle>\r\n                                            : null}\r\n\r\n                                    <Subtitle>{chatMessage.stringTimestamp}</Subtitle>\r\n                                </Row>\r\n                                <Subtitle >\r\n                                    <div>\r\n                                      \r\n                                        {handleUpdateMessage(chatMessage.chatMessageId) && isEditingMessage ?\r\n                                            <Form.Group>\r\n                                                <Form.Control type=\"text\"\r\n                                                    placeholder=\"Edit your message...\"\r\n                                                    onChange={onMsgChanged}\r\n                                                    defaultValue={chatMessage.message} />\r\n                                                <Button variant=\"info\"\r\n                                                    size=\"sm\"\r\n                                                    onClick={sendUpdatedMessage}>Update</Button>\r\n                                                <Button className=\"m-2\"\r\n                                                    size=\"sm\"\r\n                                                    variant=\"secondary\"\r\n                                                    onClick={handleCancelEditingMessage}>Cancel</Button>\r\n                                            </Form.Group>\r\n                                            : chatMessage.message\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <div>\r\n                                        {checkIfPlayerIsAuthor(chatMessage.playerId) && !isEditingMessage ?\r\n                                            <Subtitle >\r\n                                                <Button id=\"sendMessage\"\r\n                                                    className=\"m-1\"\r\n                                                    variant=\"secondary\"\r\n                                                    size=\"sm\"\r\n                                                    onClick={() => handleEditMessage(chatMessage.chatMessageId)}> Edit</Button>\r\n                                                <Button variant=\"danger\"\r\n                                                    size=\"sm\"\r\n                                                    onClick={() => handleDeleteMessage(chatMessage.chatMessageId)}> Delete</Button>\r\n\r\n                                            </Subtitle>\r\n                                            : null}\r\n                                    </div>\r\n                                </Subtitle>\r\n                            </Column>\r\n                        </ChatListItem>\r\n                    )}\r\n                </ChatList>\r\n\r\n                <Form.Group>\r\n\r\n                    <Form.Control onKeyUp={handleClickEnterToSendMessage} id=\"messageInput\" type=\"text\" placeholder=\"Enter a message\" onChange={onMsgChanged} />\r\n\r\n                    <IconButton disabled={!validInput} onClick={sendMessage}>\r\n                        <SendIcon />\r\n                    </IconButton>\r\n                </Form.Group>\r\n            </ThemeProvider>\r\n        </>\r\n    );\r\n};\r\nexport default ChatMessage;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js",["240"],"export async function getPlayerInfo() {\r\n    const token = localStorage.getItem('jwt');\r\n    const response = await fetch('/api/fetch/player/all', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n\r\n    const status = await response.status\r\n    if (status === 200) {\r\n        const user = await response.json()\r\n    }\r\n    return status;\r\n}","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js",["241","242","243"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst Chat = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <ChatMessage />\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js",["244"],"import { TextField } from \"@material-ui/core\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport React, { useState } from \"react\";\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CreateMission } from '../../utils/markerStorage'\r\nimport MainMap from \"../MapComponents/MainMap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst CreateMissionMarker = (props) => {\r\n\r\n  const [validMissionName, setValidMissionName] = useState(false);\r\n  const [missionObject, setMissionObject] = useState(\r\n    {\r\n      name: \"\",\r\n      startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n      endTime: \"2021-01-02T08:00:00.000+00:00\"\r\n    })\r\n\r\n  async function createMission() {\r\n    if (validMissionName === true) {\r\n      let createMissionResponse = await CreateMission(missionObject);\r\n      if (createMissionResponse.status === 201) {\r\n        props.history.push(\"/missions\");\r\n      } else if (createMissionResponse.status === 400) {\r\n        alert(\"Mission name must be unique!\");\r\n      } else {\r\n        alert(\"Something went wrong while creating the mission.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  const onMissionNameChange = ev => {\r\n    let currentMissionName = ev.target.value;\r\n    if (currentMissionName.length < 4) {\r\n      setValidMissionName(false);\r\n    }\r\n    else {\r\n      setMissionObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentMissionName\r\n      }));\r\n      setValidMissionName(true);\r\n    }\r\n  }\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <NavBar />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Create Mission Marker</h1>\r\n          <Form.Group>\r\n            <Form.Control type=\"text\" placeholder=\"Enter mission name\" onChange={onMissionNameChange} />\r\n            <br />\r\n            <Form.Control type=\"text\" placeholder=\"Coordinates\"/>\r\n            <br />\r\n            <MainMap />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"Start time\"\r\n              type=\"datetime-local\"\r\n              defaultValue=\"2021-01-01T08:00\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onStartTimeChange}\r\n            />\r\n            <br />  <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"End time\"\r\n              type=\"datetime-local\"\r\n              defaultValue=\"2021-01-02T08:00\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onEndTimeChange}\r\n            />\r\n            <br />\r\n            <br /><br />\r\n            <Button disabled={!validMissionName} onClick={createMission}>Create</Button><Link to=\"admin\"><Button>Cancel</Button></Link>\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateMissionMarker;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js",["245","246","247"],"import React, { Component, useEffect, useState } from 'react';\r\nimport Header from '../StylingComponents/Header';\r\nimport Form from 'react-bootstrap/Form'\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\n\r\nconst Bite = ({ history }) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let latitude = localStorage.getItem('Latitude');\r\n    let longitude = localStorage.getItem('Longitude');\r\n\r\n    let currentCoordinates = ('Coordinates: \\nLatitude: ' + latitude + ' \\nLongitude: ' + longitude);\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await FetchPlayer(gameId, userId);\r\n        if (response !== null) {\r\n            setCurrentPlayer(response);\r\n        } else {\r\n            alert(\"Could not find Player object.\")\r\n        }\r\n    }\r\n\r\n    const [validBiteCode, setValidBiteCode] = useState(false);\r\n    // const [victim, setVictim] = useState(\r\n    //     {\r\n    //         playerId: '',\r\n    //         biteCode: '1234ABCD',\r\n    //         faction: '',\r\n    //         isAlive: true,\r\n    //         isPatientZero: false\r\n    //     })\r\n\r\n    // Need to get the player object through their bite code\r\n    // if the victimPlayer.biteCode === the bite code input into the form the victim can be either turned or killed\r\n\r\n    const [currentBiteCode, setCurrentBiteCode] = useState([]);\r\n    const [currentVictim, setCurrentVictim] = useState([]);\r\n    \r\n\r\n    const onBiteCodeChange = ev => {\r\n        let biteCodeInput = ev.target.value;\r\n        if (biteCodeInput.length < 8 || biteCodeInput.length > 8 /* || currentBiteCode !== victimBiteCode */) {\r\n            setValidBiteCode(false);\r\n        } else /* (currentBiteCode === currentVictim.biteCode) */ {\r\n            console.log('That is a valid bite code');\r\n            \r\n            setValidBiteCode(true);\r\n            \r\n            /* fetchCurrentVictim().then(data => {\r\n                console.log('Look here at this cool data: ' + data);\r\n            }) */\r\n        }\r\n        setCurrentBiteCode(biteCodeInput);\r\n        // The function call below doesn't work properly... It doesn't setCurrentVictim correctly, but it DOES log the final message to the console...\r\n        fetchCurrentVictim();\r\n        return currentVictim;\r\n    }\r\n\r\n\r\n    async function fetchCurrentVictim() {\r\n        const response = await (await fetch('/api/fetch/player/' + gameId + '/' + currentBiteCode)).json();\r\n        setCurrentVictim(await response);\r\n        console.log('You did a victim fetch');\r\n        console.log('Check this data yo: ' + response.playerId);\r\n        return currentVictim;\r\n    }\r\n\r\n\r\n    async function testVictim() {\r\n        console.log('This is the bite code input from the form: ' + currentBiteCode);\r\n        console.log('This is the current player object: ' + currentPlayer.playerId);\r\n        console.log('This is the victim\\'s bite code according to victim fetch: ' + currentVictim.biteCode);\r\n    }\r\n\r\n\r\n    const [currentVictimSquadMember, setCurrentVictimSquadMember] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentVictimSquadMember();\r\n    }, [])\r\n\r\n    async function fetchCurrentVictimSquadMember() {\r\n        const response = await (await fetch('/api/fetch/squadmember/game=' + gameId + '/player=' + currentVictim.playerId)).json();\r\n        setCurrentVictimSquadMember(response);\r\n    }\r\n\r\n\r\n    // I need to pause the testVictim function, so it doesn't get called until the fetchCurrentVictim function has finished running.\r\n    // How the frick do I do that? HELP ON MONDAY.\r\n\r\n/*     async function victimMaster() {\r\n        const fetchVictim = await fetchCurrentVictim();\r\n        console.log(fetchVictim);\r\n\r\n        const testBiteCode = await testVictim();\r\n        console.log(testBiteCode);\r\n    } */\r\n\r\n\r\n    async function handleZombie() {\r\n        // Need to add a function that creates a grave stone on the map, using the auto fetched coordinates\r\n        // and the victim description from the form\r\n        console.log('The player was turned into a ZOMBIE');\r\n        if (validBiteCode === true) {\r\n            let playerResponse = await fetch('/api/update/player/' + currentVictim.playerId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    faction: 'ZOMBIE'\r\n                })\r\n            });\r\n            if (playerResponse.status === 200) {\r\n                let body = await playerResponse.json();\r\n                console.log(body);\r\n                return body;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        // Need to find a way to update the player's squad member object as well... It currently doesn't work.\r\n        let squadMemberResponse = await fetch ('/api/update/squadmember/' + currentVictimSquadMember.squadMemberId, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                squadId: null\r\n            })\r\n        });\r\n        if (squadMemberResponse.status === 200) {\r\n            let body = await squadMemberResponse.json();\r\n            console.log(body);\r\n            return body;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Need a check on other pages that limits access if the player's isAlive = false\r\n    async function handleKill() {\r\n        console.log('The player was killed');\r\n        if (validBiteCode === true) {\r\n            let response = await fetch('/api/update/player/' + currentVictim.playerId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    isAlive: false\r\n                })\r\n            });\r\n            if (response.status === 200) {\r\n                let body = await response.json();\r\n                console.log(body);\r\n                return body;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // The factions need to be switched back, the current state is for testing\r\n    if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n            </div>\r\n        )\r\n    } else if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div id=\"codeEntryContainer\">\r\n                    <h2>BITE CODE ENTRY\r\n                        {console.log(currentPlayer)}\r\n                    </h2>\r\n                    <Form>\r\n                        <Form.Control onChange={onBiteCodeChange} id=\"biteCode\" type=\"text\" placeholder=\"Bite Code\" required></Form.Control>\r\n                        <br/>\r\n                        <Form.Control id=\"coordinates\" as=\"textarea\" rows={3} value={currentCoordinates} required></Form.Control>\r\n                        <br/>\r\n                        <Form.Control id=\"victimDescription\" placeholder=\"Enter victim description...\" as=\"textarea\" rows={3} required></Form.Control>\r\n                    </Form>\r\n                    <br/>\r\n                    <button onClick={fetchCurrentVictim}>FETCH VICTIM</button>\r\n                    <button onClick={testVictim}>TEST VICTIM</button>\r\n                    {/* <button onClick={victimMaster}>VICTIM MASTER</button> */}\r\n                    <button onClick={handleZombie}>Turn into ZOMBIE</button>\r\n                    <button onClick={handleKill}>Kill victim</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h3>***</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bite;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js",[],{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":3,"column":42,"nodeType":"254","messageId":"255","endLine":3,"endColumn":48},{"ruleId":"252","severity":1,"message":"256","line":8,"column":8,"nodeType":"254","messageId":"255","endLine":8,"endColumn":13},{"ruleId":"252","severity":1,"message":"257","line":11,"column":10,"nodeType":"254","messageId":"255","endLine":11,"endColumn":23},{"ruleId":"252","severity":1,"message":"258","line":12,"column":10,"nodeType":"254","messageId":"255","endLine":12,"endColumn":30},{"ruleId":"259","severity":1,"message":"260","line":28,"column":6,"nodeType":"261","endLine":28,"endColumn":22,"suggestions":"262"},{"ruleId":"252","severity":1,"message":"263","line":2,"column":10,"nodeType":"254","messageId":"255","endLine":2,"endColumn":18},{"ruleId":"252","severity":1,"message":"264","line":3,"column":8,"nodeType":"254","messageId":"255","endLine":3,"endColumn":16},{"ruleId":"252","severity":1,"message":"265","line":18,"column":13,"nodeType":"254","messageId":"255","endLine":18,"endColumn":24},{"ruleId":"252","severity":1,"message":"266","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":26},{"ruleId":"259","severity":1,"message":"267","line":14,"column":8,"nodeType":"261","endLine":14,"endColumn":10,"suggestions":"268"},{"ruleId":"252","severity":1,"message":"269","line":7,"column":8,"nodeType":"254","messageId":"255","endLine":7,"endColumn":16},{"ruleId":"259","severity":1,"message":"270","line":51,"column":8,"nodeType":"261","endLine":51,"endColumn":10,"suggestions":"271"},{"ruleId":"252","severity":1,"message":"272","line":10,"column":7,"nodeType":"254","messageId":"255","endLine":10,"endColumn":16},{"ruleId":"252","severity":1,"message":"273","line":5,"column":8,"nodeType":"254","messageId":"255","endLine":5,"endColumn":14},{"ruleId":"252","severity":1,"message":"266","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":26},{"ruleId":"252","severity":1,"message":"273","line":5,"column":8,"nodeType":"254","messageId":"255","endLine":5,"endColumn":14},{"ruleId":"259","severity":1,"message":"267","line":21,"column":8,"nodeType":"261","endLine":21,"endColumn":10,"suggestions":"274"},{"ruleId":"252","severity":1,"message":"266","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":26},{"ruleId":"252","severity":1,"message":"269","line":3,"column":8,"nodeType":"254","messageId":"255","endLine":3,"endColumn":16},{"ruleId":"252","severity":1,"message":"273","line":5,"column":8,"nodeType":"254","messageId":"255","endLine":5,"endColumn":14},{"ruleId":"252","severity":1,"message":"275","line":11,"column":9,"nodeType":"254","messageId":"255","endLine":11,"endColumn":17},{"ruleId":"259","severity":1,"message":"276","line":19,"column":8,"nodeType":"261","endLine":19,"endColumn":10,"suggestions":"277"},{"ruleId":"259","severity":1,"message":"278","line":67,"column":8,"nodeType":"261","endLine":67,"endColumn":10,"suggestions":"279"},{"ruleId":"259","severity":1,"message":"267","line":91,"column":8,"nodeType":"261","endLine":91,"endColumn":10,"suggestions":"280"},{"ruleId":"252","severity":1,"message":"266","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":26},{"ruleId":"252","severity":1,"message":"269","line":5,"column":8,"nodeType":"254","messageId":"255","endLine":5,"endColumn":16},{"ruleId":"252","severity":1,"message":"273","line":7,"column":8,"nodeType":"254","messageId":"255","endLine":7,"endColumn":14},{"ruleId":"259","severity":1,"message":"281","line":21,"column":8,"nodeType":"261","endLine":21,"endColumn":10,"suggestions":"282"},{"ruleId":"259","severity":1,"message":"267","line":45,"column":8,"nodeType":"261","endLine":45,"endColumn":10,"suggestions":"283"},{"ruleId":"259","severity":1,"message":"284","line":61,"column":8,"nodeType":"261","endLine":61,"endColumn":10,"suggestions":"285"},{"ruleId":"252","severity":1,"message":"286","line":2,"column":10,"nodeType":"254","messageId":"255","endLine":2,"endColumn":14},{"ruleId":"252","severity":1,"message":"286","line":2,"column":10,"nodeType":"254","messageId":"255","endLine":2,"endColumn":14},{"ruleId":"252","severity":1,"message":"287","line":9,"column":11,"nodeType":"254","messageId":"255","endLine":9,"endColumn":24},{"ruleId":"252","severity":1,"message":"266","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":26},{"ruleId":"252","severity":1,"message":"288","line":9,"column":7,"nodeType":"254","messageId":"255","endLine":9,"endColumn":28},{"ruleId":"252","severity":1,"message":"289","line":29,"column":12,"nodeType":"254","messageId":"255","endLine":29,"endColumn":25},{"ruleId":"259","severity":1,"message":"267","line":33,"column":8,"nodeType":"261","endLine":33,"endColumn":10,"suggestions":"290"},{"ruleId":"252","severity":1,"message":"291","line":30,"column":29,"nodeType":"254","messageId":"255","endLine":30,"endColumn":36},{"ruleId":"259","severity":1,"message":"292","line":53,"column":8,"nodeType":"261","endLine":53,"endColumn":10,"suggestions":"293"},{"ruleId":"259","severity":1,"message":"294","line":57,"column":8,"nodeType":"261","endLine":57,"endColumn":17,"suggestions":"295"},{"ruleId":"252","severity":1,"message":"296","line":12,"column":15,"nodeType":"254","messageId":"255","endLine":12,"endColumn":19},{"ruleId":"252","severity":1,"message":"297","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":26},{"ruleId":"252","severity":1,"message":"298","line":1,"column":28,"nodeType":"254","messageId":"255","endLine":1,"endColumn":36},{"ruleId":"252","severity":1,"message":"272","line":7,"column":7,"nodeType":"254","messageId":"255","endLine":7,"endColumn":16},{"ruleId":"252","severity":1,"message":"272","line":11,"column":7,"nodeType":"254","messageId":"255","endLine":11,"endColumn":16},{"ruleId":"252","severity":1,"message":"266","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":26},{"ruleId":"259","severity":1,"message":"267","line":19,"column":8,"nodeType":"261","endLine":19,"endColumn":10,"suggestions":"299"},{"ruleId":"259","severity":1,"message":"300","line":87,"column":8,"nodeType":"261","endLine":87,"endColumn":10,"suggestions":"301"},"no-native-reassign",["302"],"no-negated-in-lhs",["303"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Phone' is defined but never used.","'validGameName' is assigned a value but never used.","'validGameDescription' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchGame'. Either include it or remove the dependency array.","ArrayExpression",["304"],"'Redirect' is defined but never used.","'firebase' is defined but never used.","'currentUser' is assigned a value but never used.","'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCurrentPlayer'. Either include it or remove the dependency array.",["305"],"'GameMenu' is defined but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["306"],"'useStyles' is assigned a value but never used.","'NavBar' is defined but never used.",["307"],"'playerId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSquadMembers'. Either include it or remove the dependency array.",["308"],"React Hook useEffect has a missing dependency: 'fetchSquad'. Either include it or remove the dependency array.",["309"],["310"],"React Hook useEffect has a missing dependency: 'fetchSquads'. Either include it or remove the dependency array.",["311"],["312"],"React Hook useEffect has a missing dependency: 'fetchSquadMember'. Either include it or remove the dependency array.",["313"],"'Link' is defined but never used.","'handleSignOut' is assigned a value but never used.","'BUTTON_WRAPPER_STYLES' is assigned a value but never used.","'currentPlayer' is assigned a value but never used.",["314"],"'request' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chatRoom', 'fetchMessages', 'gameId', 'playerFaction', 'playerId', 'props.history', and 'userId'. Either include them or remove the dependency array.",["315"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["316"],"'user' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",["317"],"React Hook useEffect has a missing dependency: 'fetchCurrentVictimSquadMember'. Either include it or remove the dependency array.",["318"],"no-global-assign","no-unsafe-negation",{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"321","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"321","fix":"330"},{"desc":"331","fix":"332"},{"desc":"321","fix":"333"},{"desc":"334","fix":"335"},{"desc":"321","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"321","fix":"341"},{"desc":"342","fix":"343"},"Update the dependencies array to be: [fetchGame, selectedGameId]",{"range":"344","text":"345"},"Update the dependencies array to be: [fetchCurrentPlayer]",{"range":"346","text":"347"},"Update the dependencies array to be: [props.history]",{"range":"348","text":"349"},{"range":"350","text":"347"},"Update the dependencies array to be: [fetchSquadMembers]",{"range":"351","text":"352"},"Update the dependencies array to be: [fetchSquad]",{"range":"353","text":"354"},{"range":"355","text":"347"},"Update the dependencies array to be: [fetchSquads]",{"range":"356","text":"357"},{"range":"358","text":"347"},"Update the dependencies array to be: [fetchSquadMember]",{"range":"359","text":"360"},{"range":"361","text":"347"},"Update the dependencies array to be: [chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",{"range":"362","text":"363"},"Update the dependencies array to be: [fetchMessages, refresh]",{"range":"364","text":"365"},{"range":"366","text":"347"},"Update the dependencies array to be: [fetchCurrentVictimSquadMember]",{"range":"367","text":"368"},[917,933],"[fetchGame, selectedGameId]",[441,443],"[fetchCurrentPlayer]",[2350,2352],"[props.history]",[817,819],[787,789],"[fetchSquadMembers]",[2439,2441],"[fetchSquad]",[3052,3054],[913,915],"[fetchSquads]",[1555,1557],[1969,1971],"[fetchSquadMember]",[934,936],[2291,2293],"[chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",[2355,2364],"[fetchMessages, refresh]",[694,696],[3273,3275],"[fetchCurrentVictimSquadMember]"]