[{"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\index.js":"1","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\App.js":"3","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js":"4","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js":"5","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js":"6","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js":"7","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js":"8","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js":"9","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js":"10","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js":"11","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js":"12","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js":"13","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js":"14","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js":"15","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js":"16","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js":"17","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js":"18","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js":"19","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js":"20","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js":"21","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js":"22","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js":"23","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js":"24","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js":"25","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js":"26","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js":"27","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js":"28","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js":"29","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js":"30","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js":"31","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js":"32","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js":"33","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js":"34","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js":"35","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js":"36","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js":"37","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js":"38","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\chatMessageStorge.js":"39","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js":"40","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js":"41","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js":"42","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js":"43"},{"size":517,"mtime":1608561367131,"results":"44","hashOfConfig":"45"},{"size":375,"mtime":1608561367132,"results":"46","hashOfConfig":"45"},{"size":3502,"mtime":1608647833024,"results":"47","hashOfConfig":"45"},{"size":336,"mtime":1608623502708,"results":"48","hashOfConfig":"45"},{"size":577,"mtime":1608561367134,"results":"49","hashOfConfig":"45"},{"size":2773,"mtime":1608623502567,"results":"50","hashOfConfig":"45"},{"size":4186,"mtime":1608623502583,"results":"51","hashOfConfig":"45"},{"size":6089,"mtime":1608651080305,"results":"52","hashOfConfig":"45"},{"size":1540,"mtime":1608623502589,"results":"53","hashOfConfig":"45"},{"size":1067,"mtime":1608561367122,"results":"54","hashOfConfig":"45"},{"size":694,"mtime":1608561367119,"results":"55","hashOfConfig":"45"},{"size":2484,"mtime":1608646051058,"results":"56","hashOfConfig":"45"},{"size":992,"mtime":1608623502621,"results":"57","hashOfConfig":"45"},{"size":11471,"mtime":1608661863015,"results":"58","hashOfConfig":"45"},{"size":1486,"mtime":1608623502576,"results":"59","hashOfConfig":"45"},{"size":651,"mtime":1608561367134,"results":"60","hashOfConfig":"45"},{"size":5166,"mtime":1608651086301,"results":"61","hashOfConfig":"45"},{"size":685,"mtime":1608645542599,"results":"62","hashOfConfig":"45"},{"size":3501,"mtime":1608645542615,"results":"63","hashOfConfig":"45"},{"size":1298,"mtime":1608660893769,"results":"64","hashOfConfig":"45"},{"size":6545,"mtime":1608654421344,"results":"65","hashOfConfig":"45"},{"size":5917,"mtime":1608645542644,"results":"66","hashOfConfig":"45"},{"size":5619,"mtime":1608647788016,"results":"67","hashOfConfig":"45"},{"size":6408,"mtime":1608647788017,"results":"68","hashOfConfig":"45"},{"size":2643,"mtime":1608645542636,"results":"69","hashOfConfig":"45"},{"size":820,"mtime":1608561367136,"results":"70","hashOfConfig":"45"},{"size":2194,"mtime":1608561367135,"results":"71","hashOfConfig":"45"},{"size":537,"mtime":1608561367137,"results":"72","hashOfConfig":"45"},{"size":555,"mtime":1608661839421,"results":"73","hashOfConfig":"45"},{"size":671,"mtime":1608623502695,"results":"74","hashOfConfig":"45"},{"size":891,"mtime":1608561367130,"results":"75","hashOfConfig":"45"},{"size":2972,"mtime":1608646051076,"results":"76","hashOfConfig":"45"},{"size":5975,"mtime":1608645536429,"results":"77","hashOfConfig":"45"},{"size":244,"mtime":1608654447744,"results":"78","hashOfConfig":"45"},{"size":1626,"mtime":1608645542664,"results":"79","hashOfConfig":"45"},{"size":675,"mtime":1608653717378,"results":"80","hashOfConfig":"45"},{"size":85,"mtime":1608561367135,"results":"81","hashOfConfig":"45"},{"size":860,"mtime":1608623502702,"results":"82","hashOfConfig":"45"},{"size":1154,"mtime":1608645536430,"results":"83","hashOfConfig":"45"},{"size":2130,"mtime":1608646051056,"results":"84","hashOfConfig":"45"},{"size":1815,"mtime":1608651036102,"results":"85","hashOfConfig":"45"},{"size":903,"mtime":1608660680143,"results":"86","hashOfConfig":"45"},{"size":378,"mtime":1608653097715,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"crhxuc",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\index.js",[],["192","193"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\App.js",["194"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"./utils/PrivateRoute\";\r\nimport Login from './components/AuthComponents/Login'\r\nimport Register from './components/AuthComponents/Register'\r\nimport Phone from './components/AuthComponents/Phone'\r\nimport RegisterPhone from './components/AuthComponents/RegisterPhone'\r\nimport Admin from './components/AdminComponents/Admin'\r\nimport EditGame from './components/AdminComponents/EditGame'\r\nimport PlayerState from './components/AdminComponents/PlayerState'\r\nimport Bite from './components/GameComponents/Bite'\r\nimport CreateMissionMarker from './components/AdminComponents/CreateMissionMarker'\r\nimport BiteHuman from './components/GameComponents/BiteHuman'\r\nimport BiteZombie from './components/GameComponents/BiteZombie'\r\nimport ChooseFaction from './components/GameComponents/ChooseFaction'\r\nimport CurrentGames from './components/GameComponents/CurrentGames'\r\nimport Home from './components/HomeComponents/Home'\r\nimport LandingPage from './components/HomeComponents/LandingPage'\r\nimport MainMap from './components/MapComponents/MainMap'\r\nimport SquadCreate from './components/SquadComponents/SquadCreate'\r\nimport SquadDetail from './components/SquadComponents/SquadDetail'\r\nimport SquadList from './components/SquadComponents/SquadList'\r\nimport NotFound from './components/StylingComponents/NotFound'\r\nimport { AuthProvider } from \"./utils/Auth\";\r\nimport './components/StylingComponents/Components.css'\r\nimport AdminCreateGame from './components/AdminComponents/AdminCreateGame'\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/phone\" component={Phone} />\r\n          <Route exact path=\"/registerphone\" component={RegisterPhone} />\r\n          <PrivateRoute exact path=\"/\" component={Home} />\r\n          <PrivateRoute exact path=\"/landing\" component={LandingPage} />\r\n          <PrivateRoute exact path=\"/bite\" component={Bite} />\r\n          <PrivateRoute exact path=\"/bitehuman\" component={BiteHuman} />\r\n          <PrivateRoute exact path=\"/bitezombie\" component={BiteZombie} />\r\n          <PrivateRoute exact path=\"/squads\" component={SquadList} />\r\n          <PrivateRoute exact path=\"/squaddetails\" component={SquadDetail} />\r\n          <PrivateRoute exact path=\"/createsquad\" component={SquadCreate} />\r\n          <PrivateRoute exact path=\"/currentgames\" component={CurrentGames} />\r\n          <PrivateRoute exact path=\"/admin\" component={Admin} />\r\n          <PrivateRoute exact path=\"/game\" component={EditGame} />\r\n          <PrivateRoute exact path=\"/playerstate\" component={PlayerState} />\r\n          <PrivateRoute exact path=\"/map\" component={MainMap} />\r\n          <PrivateRoute exact path=\"/choosefaction\" component={ChooseFaction} />\r\n          <PrivateRoute exact path=\"/creategame\" component={AdminCreateGame} />\r\n          <PrivateRoute exact path=\"/create/missionmarker\" component={CreateMissionMarker} />\r\n          <PrivateRoute exact path=\"/editgame\" component={EditGame} />\r\n          <Route path='*'>\r\n            <NotFound header='Page not found' message='The page you requested does not exist' />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\nexport default App;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js",["195"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { AuthContext } from \"../../utils/Auth\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { loginUser } from \"../../utils/dbstorage.js\";\r\nimport Phone from \"./Phone.js\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\n\r\nconst Login = ({ history }) => {\r\n\r\n    const handleLogin =\r\n        async event => {\r\n\r\n            event.preventDefault();\r\n            const { email, password } = event.target.elements;\r\n            try {\r\n                const status = await loginUser(email.value, password.value)\r\n                if (status === 200) {\r\n                    await firebase\r\n                        .auth()\r\n                        .signInWithEmailAndPassword(email.value, password.value)\r\n                        .catch(err => {\r\n                            alert(err.message)\r\n                            history.push(\"/\")\r\n                        });\r\n                } else {\r\n                    alert(\"Incorrect email or password!\")\r\n                }\r\n            } catch (error) {\r\n                alert(error);\r\n            }\r\n        };\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderOutside />\r\n            <section className=\"login-register\">\r\n                <div className=\"container\">\r\n                    <h1>Log in</h1>\r\n                    <Form onSubmit={handleLogin} name=\"loginForm\">\r\n                        <Form.Group controlId=\"formEmail\">\r\n                            <Form.Label>Email: </Form.Label>\r\n                            <Form.Control name=\"email\" type=\"email\" placeholder=\"Email\" required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formPassword\">\r\n                            <Form.Label>Password: </Form.Label>\r\n                            <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" required />\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Log in</button>\r\n                        <Link to=\"/login\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                    <Link to=\"/register\">Don't have an account? Register here.</Link>\r\n                    <p>Or</p>\r\n                    <Link to=\"/phone\">Login with your phone!*</Link>\r\n                    <p><i>* Must be verified first!</i></p>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(Login);","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js",["196"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { DeleteGame, FetchGame, UpdateGame } from \"../../utils/GameStorage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst EditGame = (props) => {\r\n  const [validGameName, setValidGameName] = useState(true);\r\n  const [validGameDescription, setValidGameDescription] = useState(true);\r\n  const [deleteGame, setDeleteGame] = useState(false);\r\n  const [gameObject, setGameObject] = useState(\r\n    {\r\n      gameId: null,\r\n      name: null,\r\n      gameState: null,\r\n      startTime: null,\r\n      endTime: null,\r\n      maxNumberOfPlayers: 0,\r\n      description: null\r\n    })\r\n\r\n  useEffect(() => {\r\n    loadGameDetails();\r\n  }, []);\r\n\r\n  async function loadGameDetails() {\r\n    const gameId = localStorage.getItem(\"Game ID\");\r\n    if (gameId != null) {\r\n      const game = await FetchGame(gameId);\r\n      setGameObject({\r\n        gameId: game.gameId,\r\n        name: game.name,\r\n        gameState: game.gameState,\r\n        startTime: game.startTime,\r\n        endTime: game.endTime,\r\n        maxNumberOfPlayers: game.maxNumberOfPlayers,\r\n        description: game.description,\r\n      })\r\n    } else {\r\n      alert(\"Game ID is null.\");\r\n    }\r\n  }\r\n\r\n  async function onUpdateClicked() {\r\n    if (validGameDescription === true && validGameName === true) {\r\n      let updateGameResponse = await UpdateGame(gameObject);\r\n      if (updateGameResponse.status === 200) {\r\n        props.history.push(\"/currentgames\");\r\n      } else if (updateGameResponse.status === 400) {\r\n        alert(\"Game name must be unique!\");\r\n      } else {\r\n        alert(\"Something went wrong while updating game information.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  async function onDeteleClicked() {\r\n    let deleteGameResponse = await DeleteGame(gameObject.gameId);\r\n    if (deleteGameResponse === 200) {\r\n      props.history.push(\"/currentgames\");\r\n    } else {\r\n      console.log(\"Something went wrong when trying to delete the game.\");\r\n    }\r\n  }\r\n\r\n  const onGameNameChange = ev => {\r\n    let currentGameName = ev.target.value;\r\n    if (currentGameName.length < 4) {\r\n      setValidGameName(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentGameName\r\n      }));\r\n      setValidGameName(true);\r\n    }\r\n  }\r\n\r\n  const onGameStateChange = ev => {\r\n    let currentState = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      gameState: currentState\r\n    }));\r\n  }\r\n\r\n  const onGameDescriptionChange = ev => {\r\n    let currentGameDescription = ev.target.value;\r\n    if (currentGameDescription.length < 4) {\r\n      setValidGameDescription(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        description: currentGameDescription\r\n      }));\r\n      setValidGameDescription(true);\r\n    }\r\n  }\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n  const onSizeChange = ev => {\r\n    let numPlayers = ev.target.value;\r\n    if (numPlayers > 0) {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        maxNumberOfPlayers: numPlayers\r\n      }));\r\n    }\r\n  }\r\n\r\n  const onCheckBoxChanged = ev => {\r\n    setDeleteGame(!deleteGame);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <NavBar />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Edit Game</h1>\r\n          <br />\r\n          <Form.Group>\r\n            <Form.Control type=\"text\" placeholder={gameObject.name} onChange={onGameNameChange} />\r\n            <br />\r\n            <Form.Control as=\"select\" placeholder=\"Gamestate\" onChange={onGameStateChange}>\r\n              <option>PREPARATION</option>\r\n              <option>IN_PROGRESS</option>\r\n              <option>COMPLETED</option>\r\n            </Form.Control>\r\n            <br />\r\n            <Form.Control placeholder={gameObject.description} as=\"textarea\" rows={3} onChange={onGameDescriptionChange} />\r\n            <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"Start time\"\r\n              type=\"datetime-local\"\r\n              defaultValue={gameObject.startTime}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onStartTimeChange}\r\n            />\r\n            <br />  <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"End time\"\r\n              type=\"datetime-local\"\r\n              defaultValue={gameObject.endTime}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onEndTimeChange}\r\n            />\r\n            <br />\r\n\r\n            <br />\r\n            <Form.Control type=\"number\" size=\"sm\" onChange={onSizeChange} placeholder={gameObject.maxNumberOfPlayers}>\r\n\r\n            </Form.Control>\r\n            <br /> <br />\r\n            <Button disabled={!validGameName || !validGameDescription} onClick={onUpdateClicked}>Update Game</Button>\r\n            <Button disabled={!deleteGame} onClick={onDeteleClicked}>Delete Game</Button>\r\n            <Form.Group controlId=\"deleteGameCheckbox\">\r\n              <Form.Check type=\"checkbox\" label=\"Delete game?\" onChange={onCheckBoxChanged} />\r\n            </Form.Group>\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditGame;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js",["197","198","199"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { AuthContext } from \"../../utils/Auth.js\";\r\nimport { storePhone } from \"../../utils/dbstorage.js\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\n\r\nconst RegisterPhone = ({ history }) => {\r\n\r\n    const handleRegister = async event => {\r\n        event.preventDefault();\r\n        const { phone } = event.target.elements;\r\n        storePhone(phone.value);\r\n    }\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <>\r\n            <HeaderOutside />\r\n            <section className=\"login-register\">\r\n                <div className=\"container\">\r\n                    <h1>Register Phone</h1>\r\n                    <Form onSubmit={handleRegister} name=\"loginForm\">\r\n                        <Form.Group controlId=\"formPhone\">\r\n                            <Form.Label>Phone Number: </Form.Label>\r\n                            <Form.Control name=\"phone\" type=\"tel\" required />\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Register</button>\r\n                        <Link to=\"/registerphone\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterPhone);","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js",["200"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js",["201"],"import React, { useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { CreateGame } from \"../../utils/GameStorage\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst AdminCreateGame = (props) => {\r\n    const [validGameName, setValidGameName] = useState(false);\r\n    const [validGameDescription, setValidGameDescription] = useState(false);\r\n    const [gameObject, setGameObject] = useState(\r\n        {\r\n            name: \"\",\r\n            gameState: \"PREPARATION\",\r\n            startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n            endTime: \"2021-01-02T08:00:00.000+00:00\",\r\n            maxNumberOfPlayers: 50,\r\n            description: \"\"\r\n        })\r\n\r\n    async function createGame() {\r\n        if (validGameDescription === true && validGameName === true) {\r\n            let createGameResponse = await CreateGame(gameObject);\r\n            if (createGameResponse.status === 201) {\r\n                props.history.push(\"/currentgames\");\r\n            } else if (createGameResponse.status === 400) {\r\n                alert(\"Game name must be unique!\");\r\n            } else {\r\n                alert(\"Something went wrong while creating the game.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const onGameNameChange = ev => {\r\n        let currentGameName = ev.target.value;\r\n        if (currentGameName.length < 4) {\r\n            setValidGameName(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                name: currentGameName\r\n            }));\r\n            setValidGameName(true);\r\n        }\r\n    }\r\n\r\n    const onGameDescriptionChange = ev => {\r\n        let currentGameDescription = ev.target.value;\r\n        if (currentGameDescription.length < 4) {\r\n            setValidGameDescription(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                description: currentGameDescription\r\n            }));\r\n            setValidGameDescription(true);\r\n        }\r\n    }\r\n\r\n    const onStartTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            startTime: time\r\n        }));\r\n    }\r\n\r\n    const onEndTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            endTime: time\r\n        }));\r\n    }\r\n\r\n    const onSizeChange = ev => {\r\n        let numPlayers = ev.target.value;\r\n        if (numPlayers > 0) {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                maxNumberOfPlayers: numPlayers\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <h1>Create game</h1>\r\n                    <br />\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter game name...\" onChange={onGameNameChange} />\r\n                        <br />\r\n                        <Form.Control placeholder=\"Enter game description...\" as=\"textarea\" rows={3} onChange={onGameDescriptionChange} />\r\n                        <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"Start time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-01T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }} \r\n                            onChange={onStartTimeChange}\r\n                        />\r\n                        <br />  <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"End time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-02T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onEndTimeChange}\r\n                        />\r\n                        <br />\r\n        \r\n                        <br />\r\n                        <Form.Control type=\"number\" size=\"sm\" onChange={onSizeChange} placeholder=\"Max number of players...\">\r\n\r\n                        </Form.Control>\r\n                        <br /> <br />\r\n                        <Button disabled={!validGameName || !validGameDescription} onClick={createGame}>Create</Button>\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\nexport default AdminCreateGame;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js",["202"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\n\r\nconst Admin = () => {\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Admin</h1>\r\n          <Link to=\"/creategame\">Create Game</Link>\r\n          <Link to=\"/editgame\">Edit Game</Link>\r\n          <Link to=\"#\">Edit Player State</Link>\r\n          <Link to=\"/create/missionmarker\">Create Mission Marker</Link>\r\n          <Link to=\"#\">Edit Mission Marker</Link>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Admin;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js",["203"],"import { TextField } from \"@material-ui/core\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport React, { useState } from \"react\";\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CreateMission } from '../../utils/markerStorage'\r\nimport MainMap from \"../MapComponents/MainMap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst CreateMissionMarker = (props) => {\r\n\r\n  const [validMissionName, setValidMissionName] = useState(false);\r\n  const [missionObject, setMissionObject] = useState(\r\n    {\r\n      name: \"\",\r\n      startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n      endTime: \"2021-01-02T08:00:00.000+00:00\"\r\n    })\r\n\r\n  async function createMission() {\r\n    if (validMissionName === true) {\r\n      let createMissionResponse = await CreateMission(missionObject);\r\n      if (createMissionResponse.status === 201) {\r\n        props.history.push(\"/missions\");\r\n      } else if (createMissionResponse.status === 400) {\r\n        alert(\"Mission name must be unique!\");\r\n      } else {\r\n        alert(\"Something went wrong while creating the mission.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  const onMissionNameChange = ev => {\r\n    let currentMissionName = ev.target.value;\r\n    if (currentMissionName.length < 4) {\r\n      setValidMissionName(false);\r\n    }\r\n    else {\r\n      setMissionObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentMissionName\r\n      }));\r\n      setValidMissionName(true);\r\n    }\r\n  }\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <NavBar />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Create Mission Marker</h1>\r\n          <Form.Group>\r\n            <Form.Control type=\"text\" placeholder=\"Enter mission name\" onChange={onMissionNameChange} />\r\n            <br />\r\n            <Form.Control type=\"text\" placeholder=\"Coordinates\"/>\r\n            <br />\r\n            <MainMap />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"Start time\"\r\n              type=\"datetime-local\"\r\n              defaultValue=\"2021-01-01T08:00\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onStartTimeChange}\r\n            />\r\n            <br />  <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"End time\"\r\n              type=\"datetime-local\"\r\n              defaultValue=\"2021-01-02T08:00\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onEndTimeChange}\r\n            />\r\n            <br />\r\n            <br /><br />\r\n            <Button disabled={!validMissionName} onClick={createMission}>Create</Button><Link to=\"admin\"><Button>Cancel</Button></Link>\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateMissionMarker;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js",["204"],"import { Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getPlayerInfo } from \"../../utils/gamedbstorage\";\r\nimport HeaderOutside from '../StylingComponents/HeaderOutside';\r\n\r\nconst CurrentGames = (props) => {\r\n\r\n    const [games, setGames] = useState([]);\r\n    const [gameFilter, setGameFilter] = useState('ALL');\r\n\r\n    useEffect(() => {\r\n        fetchGames();\r\n        getPlayerInfo();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [gameFilter])\r\n\r\n    async function fetchGames() {\r\n        const response = await (await fetch('/api/fetch/game/all')).json();\r\n        setGames(response)\r\n    }\r\n\r\n    function handlePreview(id) {\r\n        localStorage.setItem(\"Game ID\", id);\r\n        // loadPlayerInformationToLocalStorage(id);\r\n        props.history.push(\"/landing\");\r\n    }\r\n\r\n    async function loadPlayerInformationToLocalStorage(gameId) {\r\n        let userId = localStorage.getItem(\"User ID\");\r\n        let status = await fetchPlayerObjectFromDB(gameId);\r\n        if (status === true) {\r\n            console.log(\"User already had a Player.\");\r\n        } else {\r\n            console.log(\"User did not have a Player object. Attempting to create one.\");\r\n            status = await createPlayerObject(gameId, userId);\r\n            if (status === true) {\r\n                console.log(\"Player object created successfully.\");\r\n            } else {\r\n                console.log(\"Failed to create Player Object.\");\r\n            }\r\n        }\r\n        let playerId = localStorage.getItem(\"Player ID\");\r\n        status = await fetchSquadFromDB(gameId, playerId);\r\n        if (status === true) {\r\n            console.log(\"Player belongs to a Squad.\")\r\n        } else {\r\n            console.log(\"Player does not belong to a Squad.\");\r\n        }\r\n    }\r\n\r\n    async function fetchPlayerObjectFromDB(gameId) {\r\n        let userId = localStorage.getItem(\"User ID\");\r\n        let response = await fetch(\"/api/fetch/player/game=\" + gameId + \"/user=\" + userId);\r\n        let status = await response.status;\r\n        if (status === 200) {\r\n            let body = await response.json();\r\n            localStorage.setItem(\"Player ID\", body.playerId);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async function createPlayerObject(gameId, userId) {\r\n        let response = await fetch(\"/api/create/player/\" + userId + \"/\" + gameId, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                playerId: null,\r\n                faction: 'HUMAN',\r\n                alive: true,\r\n                patientZero: false\r\n            })\r\n        });\r\n        if (response.status === 201) {\r\n            let body = await response.json();\r\n            localStorage.setItem(\"Player ID\", body.playerId);\r\n            return true;\r\n        } else {\r\n            localStorage.setItem(\"Player ID\", null);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async function fetchSquadFromDB(gameId, playerId,) {\r\n        let response = await fetch(\"/api/fetch/squad/game=\" + gameId + \"/player=\" + playerId);\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            localStorage.setItem(\"Squad ID\", body.squadId);\r\n            return true;\r\n        } else {\r\n            localStorage.setItem(\"Squad ID\", null);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const onFilterButtonClicked = ev => {\r\n        let filter = ev.target.value;\r\n        setGameFilter(filter);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderOutside />\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <h1>Current Games</h1>\r\n                    <span>\r\n                        <Button type=\"button\" variant=\"primary\" onClick={onFilterButtonClicked} value=\"ALL\" size=\"sm\">ALL</Button>\r\n                        <Button type=\"button\" variant=\"warning\" onClick={onFilterButtonClicked} value=\"PREPARATION\" size=\"sm\">PREPARATION</Button>\r\n                        <Button type=\"button\" variant=\"success\" onClick={onFilterButtonClicked} value=\"IN_PROGRESS\" size=\"sm\">IN PROGRESS</Button>\r\n                        <Button type=\"button\" variant=\"dark\" onClick={onFilterButtonClicked} value=\"COMPLETED\" size=\"sm\">COMPLETED</Button>\r\n                    </span>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Game</th>\r\n                                <th>Start</th>\r\n                                <th>End</th>\r\n                                <th>Players</th>\r\n                                <th>Status</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {games.map((g) =>\r\n                                <tr key={g.gameId}>\r\n                                    {g.gameState === gameFilter || gameFilter === 'ALL' ? <td>{g.name}</td> : null}\r\n                                    {g.gameState === gameFilter || gameFilter === 'ALL' ? <td>{g.stringStart}</td> : null}\r\n                                    {g.gameState === gameFilter || gameFilter === 'ALL' ? <td>{g.stringEnd}</td> : null}\r\n                                    {g.gameState === gameFilter || gameFilter === 'ALL' ? <td>{g.numberOfRegisteredPlayers}/{g.maxNumberOfPlayers}</td> : null}\r\n                                    {g.gameState === gameFilter || gameFilter === 'ALL' ? <td>\r\n                                        {g.gameState === 'PREPARATION' ? <Button type=\"button\" variant=\"warning\" disabled={g.gameState === 'COMPLETED'} onClick={() => handlePreview(g.gameId)}>Preview</Button> : null}\r\n                                        {g.gameState === 'IN_PROGRESS' ? <Button type=\"button\" variant=\"success\" disabled={g.gameState === 'COMPLETED'} onClick={() => handlePreview(g.gameId)}>Preview</Button> : null}\r\n                                        {g.gameState === 'COMPLETED' ? <Button type=\"button\" variant=\"dark\" disabled={g.gameState === 'COMPLETED'} onClick={() => handlePreview(g.gameId)}>Preview</Button> : null}\r\n                                    </td> : null}\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    <br></br>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CurrentGames;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js",["205","206","207"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\nimport { storeSquadDB } from '../../utils/squadstorage';\r\n\r\nconst SquadCreate = ({ history }) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let hasSquadMemberObject = localStorage.getItem('Squad Member ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    // The userId doesn't work properly (it only works with the dummy data), so we can't fetch the current player\r\n    async function fetchCurrentPlayer() {                                                                    // user should be set to userId, not 1\r\n        const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId);\r\n        let body;\r\n        if (playerResponse.status === 200) {\r\n            body = await playerResponse.json();\r\n        } else {\r\n            body = null;\r\n        }\r\n        setCurrentPlayer(body);\r\n    }\r\n\r\n    localStorage.setItem('squadFaction', currentPlayer.faction);\r\n\r\n    async function handleCreateSquad(event) {\r\n        event.preventDefault();\r\n\r\n        const { squadName, squadMemberAmount } = event.target.elements;\r\n        console.log(squadName.value, squadMemberAmount.value)\r\n        let createSquadRepsonse = await storeSquadDB(squadName.value, currentPlayer.faction, squadMemberAmount.value);\r\n\r\n        if (createSquadRepsonse === 201) {\r\n            let squadMemberExists = await fetch('/api/fetch/squadMember/game=' + gameId + '/player=' + playerId);\r\n            let newSquadId = localStorage.getItem('Squad ID');\r\n            if (squadMemberExists.status === 200) {\r\n                let response = await fetch('/api/update/squadmember/' + hasSquadMemberObject, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squad: {\r\n                            squadId: newSquadId\r\n                        },\r\n                        squadRank: \"LEADER\",\r\n                        squadMemberId: hasSquadMemberObject\r\n                    })\r\n                });\r\n                let body = await response.json();\r\n                localStorage.setItem('Squad Member ID', body.squadMemberId);\r\n\r\n                history.push('/squaddetails/');\r\n            } else if (squadMemberExists.status === 404) {\r\n                let response = await fetch('/api/create/squadmember/' + gameId + '/' + squadId + '/' + playerId, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squadId: squadId,\r\n                        squadRank: \"LEADER\"\r\n                    })\r\n                });\r\n                if (response.status === 201) {\r\n                    let body = await response.json();\r\n                    localStorage.setItem('Squad Member ID', body.squadMemberId);\r\n                    localStorage.setItem('Squad Rank', 'LEADER');\r\n                } else {\r\n                    alert(\"Failed to create squad member!\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // function handleSquadName() {\r\n    //     console.log(document.getElementById('squadName').value);\r\n    //     localStorage.setItem('squadName', (document.getElementById('squadName').value));\r\n    // }\r\n\r\n    // function handleSquadMemberAmount() {\r\n    //     console.log(document.getElementById('squadMemberAmount').value);\r\n    //     localStorage.setItem('squadMemberAmount', (document.getElementById('squadMemberAmount').value));\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"container\">\r\n                <div id=\"squadCreateForm\">\r\n                    <h2>Create Squad\r\n                    {console.log(currentPlayer)}\r\n                    </h2>\r\n                    <Form onSubmit={handleCreateSquad}>\r\n                        <Form.Group controlId=\"formSquadName\">\r\n                            {/* <Form.Label>Squad Name: </Form.Label> */}\r\n                            <Form.Control id=\"squadName\" name=\"squadName\" type=\"text\" placeholder=\"Squad Name\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadMemberLimit\">\r\n                            {/* <Form.Label>Squad Member Amount: </Form.Label> */}\r\n                            <Form.Control id=\"squadMemberAmount\" name=\"squadMemberAmount\" type=\"text\" placeholder=\"Squad Members (XX max)\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadFaction\">\r\n                            {/* <Form.Label>Squad Faction: </Form.Label> */}\r\n                            <Form.Control name=\"squadFaction\" type=\"text\" value={currentPlayer.faction} required></Form.Control>\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Create</button>\r\n                        <Link to=\"squads\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadCreate","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js",["208","209","210","211","212","213"],"import React, { Component, useEffect, useState } from 'react';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadDetail = ({ history }) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let squadMemberId = localStorage.getItem('Squad Member ID');\r\n    let squadRank = localStorage.getItem('Squad Rank');\r\n\r\n    const [squadMembers, setSquadMembers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMembers();\r\n    }, [])\r\n\r\n    // A check should be added depending on response code, see function below this one\r\n    async function fetchSquadMembers() {\r\n        const memberResponse = await (await fetch('/api/fetch/squadmember/details/game=' + gameId + '/squad=' + squadId)).json();\r\n        setSquadMembers(memberResponse);\r\n    }\r\n\r\n    // The below function doesn't work as is, but should be implemented instead of the one above\r\n    // async function fetchSquadMembers() {\r\n    //     const response = await (await fetch('/api/fetch/squadmember/details/game=' + gameId + '/squad=' + squadId)).json();\r\n    //     let body;\r\n    //     if (response.status === 200) {\r\n    //         body = response.json();\r\n    //     } else {\r\n    //         body = [];\r\n    //     }\r\n    //     setSquadMembers(body);\r\n    // }\r\n\r\n    function getLocation() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        }\r\n    }\r\n\r\n    function showPosition(position) {\r\n        let currentPosition = document.getElementById(\"current-location\");\r\n        currentPosition.innerHTML = \"Latitude: \" + position.coords.latitude +\r\n            \"<br>Longitude: \" + position.coords.longitude;\r\n    }\r\n\r\n    const [squad, setSquad] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquad();\r\n    }, [])\r\n\r\n    async function fetchSquad() {\r\n        const response = await fetch('/api/fetch/squad/' + squadId);\r\n        let body;\r\n        if (response.status === 200) {\r\n            body = response.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquad(body);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId));\r\n        setCurrentPlayer(playerResponse);\r\n    }\r\n\r\n\r\n    async function handleLeaveSquad() {\r\n\r\n        let response = await fetch('/api/update/squadmember/' + squadMemberId, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                playerId: playerId,\r\n                gameId: gameId,\r\n                squadId: null,\r\n                squadRank: 1,\r\n            })\r\n        });\r\n        let body = await response.json();\r\n        localStorage.setItem('Squad ID', null);\r\n        history.push('/squads');\r\n    }\r\n\r\n\r\n    function handleDisbandSquad() {\r\n        if (squadRank === \"LEADER\") {\r\n            fetch('/api/delete/squad/' + squadId, {\r\n                method: 'DELETE',\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => console.log(res));\r\n            localStorage.setItem('Squad ID', null);\r\n            localStorage.removeItem('Squad Member ID');\r\n            localStorage.removeItem('Squad Rank');\r\n            history.push('/squads');\r\n        } else {\r\n            alert(\"You must be a leader to disband the squad.\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"container\">\r\n                <section className=\"squadDetail\">\r\n                    <div className=\"container\">\r\n                        <h1>{squad.name}\r\n                            {console.log(squad)}\r\n                            {console.log(squadMembers)}\r\n                            {console.log(currentPlayer)}</h1>\r\n                        <br />\r\n\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Alive</th>\r\n                                    <th>Rank</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {squadMembers.map((s) =>\r\n                                    <tr>\r\n                                        <td>{s.username}</td>\r\n                                        <td>{s.alive.toString()}</td>\r\n                                        <td>{s.squadRank}</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <br />\r\n\r\n                        <button onClick={getLocation}>Mark location</button>\r\n                        <p id=\"current-location\"></p>\r\n                        <button type=\"button\" onClick={() => handleLeaveSquad()}>Leave Squad</button>\r\n\r\n                        <br />\r\n                        <button type=\"button\" onClick={() => handleDisbandSquad()}>Disband Squad (only available to the leader)</button>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadDetail;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js",["214","215","216","217","218"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadList = ({history}) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let hasSquad = localStorage.getItem('Squad ID');\r\n    let hasSquadMemberObject = localStorage.getItem('Squad Member ID');\r\n    let currentFaction = localStorage.getItem('squadFaction');\r\n\r\n    const [squads, setSquads] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquads();\r\n    }, [])\r\n\r\n    async function fetchSquads() {\r\n        const squadResponse = await fetch('/api/fetch/squad/details/game=' + gameId);\r\n        let body;\r\n        if (squadResponse.status === 200) {\r\n            body = await squadResponse.json();       \r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquads(body);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId));\r\n        setCurrentPlayer(playerResponse);\r\n    }\r\n\r\n\r\n    const [squadMember, setSquadMember] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMember();\r\n    }, [])\r\n\r\n    async function fetchSquadMember() {\r\n        const response = await (await fetch('/api/fetch/squadMember/game=' + gameId + '/player=' + playerId));\r\n        setSquadMember(response);\r\n    }\r\n\r\n    // let faction = squads.map(f => f.faction);\r\n\r\n    // Add condition to stop player ftom joining a full squad\r\n    async function handleJoinSquad(squadId, faction, registeredMembers, maxMembers, squadName) {\r\n        if (registeredMembers === maxMembers) {\r\n            alert(squadName + \" appears to be full, try another squad.\");\r\n\r\n        } else if (hasSquad >= 1) {\r\n            alert(\"You can only join one squad at a time. \\nIf you wish to join a new squad, you must first leave your current squad.\");\r\n\r\n        } else if (currentFaction !== faction) {\r\n            console.log(faction);\r\n            alert(\"You can only join \" + currentFaction + \" squads.\");\r\n\r\n        } else if ((hasSquadMemberObject === null) || (hasSquadMemberObject === undefined)) {\r\n            console.log(\"Player does NOT have a squad member object. Creating one now.\");\r\n            localStorage.setItem('Squad ID', squadId);\r\n            let response = await fetch('/api/create/squadmember/' + gameId + '/' + squadId + '/' + playerId, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    playerId: playerId,\r\n                    gameId: gameId,\r\n                    squadId: squadId,\r\n                    squadRank: 1\r\n                })\r\n            });\r\n            let body = await response.json();\r\n            localStorage.setItem('Squad Member ID', body.squadMemberId);\r\n            localStorage.setItem('Squad Rank', 'MEMBER');\r\n            history.push('/squaddetails');\r\n\r\n        } else {\r\n            console.log(\"Player already has a squad member object (squad member id = \" + hasSquadMemberObject + \")\");\r\n            console.log(\"Squad ID: \" + squadId);\r\n            localStorage.setItem('Squad ID', squadId);\r\n            let response = await fetch('/api/update/squadmember/' + hasSquadMemberObject, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    playerId: playerId,\r\n                    gameId: gameId,\r\n                    squad: {\r\n                        squadId: squadId\r\n                    },\r\n                    squadRank: 1,\r\n                    squadMemberId: hasSquadMemberObject\r\n                })\r\n            });\r\n            let body = await response.json();\r\n            localStorage.setItem('Squad Member ID', body.squadMemberId);\r\n            history.push('/squaddetails');\r\n        }\r\n    }\r\n\r\n    function assignSquadMemberId() {\r\n        localStorage.setItem('Squad Member ID', null);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <NavBar />\r\n            <section className=\"squadList\">\r\n                <div className=\"container\">\r\n                    <h1>Active Squads</h1>\r\n                    <div>\r\n                        {console.log(\"This is the current player: \\n\" + currentPlayer)}\r\n                        {console.log(\"This is the current squad member: \\n\" + squadMember)}\r\n                    </div>\r\n\r\n                    {/* <div>\r\n                        <button type=\"button\" onClick={assignSquadMemberId}>ASSIGN SM ID</button>\r\n                    </div> */}\r\n\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Members</th>\r\n                                <th>Faction</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {squads.map((s) =>\r\n                                <tr>\r\n                                    <td>{s.squadName}</td>\r\n                                    <td>{s.numberOfRegisteredMembers} / {s.maxNumberOfMembers}</td>\r\n                                    <td>{s.faction}</td>\r\n                                    <td>\r\n                                        <button type=\"button\" onClick={() => handleJoinSquad(s.squadId, s.faction, s.numberOfRegisteredMembers, s.maxNumberOfMembers, s.squadName)}>JOIN</button>\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <br/>\r\n                    <Link to=\"createsquad\">\r\n                        <button>Create New Squad</button>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadList;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js",["219","220"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js",["221","222"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\n\r\nconst HeaderOutside = () => {\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeaderOutside;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js",["223"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Modal from './Modal';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\n\r\nconst BUTTON_WRAPPER_STYLES = {\r\n    position: 'relative',\r\n    zIndex: 1,\r\n    backgroundColor: 'rgb(221, 221, 221)',\r\n    height: '60px',\r\n    width: '60px'\r\n}\r\n\r\nconst GameMenu = ({history}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId)).json();\r\n        setCurrentPlayer(response);\r\n    }\r\n\r\n    function handleBitePage() {\r\n        if (currentPlayer.faction === 'HUMAN') {\r\n            history.push('/bitehuman');\r\n        } else if (currentPlayer.faction === 'ZOMBIE') {\r\n            history.push('/bitezombie');\r\n        } else {\r\n            alert('Something went wrong, please try again.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div onClick={() => console.log(\"clicked\")}>\r\n                <div style={BUTTON_WRAPPER_STYLES} onClick={() => setIsOpen(true)}>Menu</div>\r\n            \r\n                <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n                    <Link to=\"landing\">\r\n                        <div>Landing/Rules</div>\r\n                    </Link>\r\n                    <Link to=\"map\">\r\n                        <div>Map</div>\r\n                    </Link>\r\n                    <Link to=\"bite\">\r\n                        <div>Bite</div>\r\n                    </Link>\r\n                    {/* <div onClick={handleBitePage}>Bite</div>\r\n                    <Link to=\"bitehuman\">\r\n                        <div>Bite Human</div>\r\n                    </Link>\r\n                    <Link to=\"bitezombie\">\r\n                        <div>Bite Zombie</div>\r\n                    </Link> */}\r\n                    <Link to=\"chat\">\r\n                        <div>Chat</div>\r\n                    </Link>\r\n                    <Link to=\"squads\">\r\n                        <div>Squads</div>\r\n                    </Link>\r\n                    <Link to=\"squaddetails\">\r\n                        <div>Squad Details</div>\r\n                    </Link>\r\n                    <Link to=\"admin\">\r\n                        <div>Admin</div>\r\n                    </Link>\r\n                    <div>\r\n                        <button onClick={handleSignOut}>Sign out</button>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter (GameMenu);","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js",["224","225","226","227","228"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ButtonGroup, Button, Form, Container } from 'react-bootstrap';\r\nimport { CreateMessage, GetBundleOfChatMessages } from '../../utils/chatMessageStorge';\r\nimport { ThemeProvider, ChatList, ChatListItem, Avatar, Column, Subtitle, Row, Title, IconButton, SendIcon } from '@livechat/ui-kit'\r\nimport Header from '../StylingComponents/Header';\r\n\r\nconst ChatMessage = props => {\r\n\r\n    const [chatMessage, setMsgText] = useState('');\r\n    const [validInput, setValidInput] = useState(false);\r\n    const [invalidInputMessage, setInvalidInputMessage] = useState('');\r\n    const [playerId, setPlayerId] = useState(localStorage.getItem('Player ID'));\r\n    const [gameId, setGameId] = useState(localStorage.getItem('Game ID'));\r\n    const [squadId, setSquadId] = useState(0);\r\n    const [msgObject, setMsgObject] = useState(\r\n        {\r\n            gameId: gameId,\r\n            playerId: playerId,\r\n            squadId: squadId,\r\n            message: chatMessage,\r\n            faction: 'ALL',\r\n            timestamp: getTime()\r\n        })\r\n    const [allChatMessages, setAllChatMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getChatMessagesBySelectedChatRoom(msgObject)\r\n    }, [msgObject.faction]);\r\n\r\n    function useInterval(callback, delay) {\r\n        const savedCallback = useRef();\r\n\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('Squad ID') !== null) {\r\n            setSquadId(localStorage.getItem('Squad ID'))\r\n            setMsgObject((prevState) => ({\r\n                ...prevState,\r\n                squadId: squadId,\r\n            }));\r\n        }\r\n    }, []);\r\n\r\n    useInterval(() => {\r\n        getChatMessagesBySelectedChatRoom(msgObject)\r\n    }, 1000);\r\n\r\n    function getSelectedChatRoom(ev) {\r\n        let chatRoom = ev.target.value;\r\n        let selectedRoom;\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                selectedRoom = 'ALL'\r\n                break;\r\n\r\n            case 'SQUAD':\r\n                selectedRoom = 'ZOMBIE'\r\n                break\r\n\r\n            case 'FACTION':\r\n                selectedRoom = 'HUMAN'\r\n                break;\r\n            default:\r\n                console.log(\"Default\")\r\n        }\r\n        createMessagesObjectByChatRoom(selectedRoom);\r\n        getChatMessagesBySelectedChatRoom(msgObject)\r\n\r\n        return chatRoom;\r\n    }\r\n\r\n    function createMessagesObjectByChatRoom(selectedRoom) {\r\n        setMsgObject((prevState) => ({\r\n            ...prevState,\r\n            faction: selectedRoom\r\n        }));\r\n    }\r\n\r\n    function getChatMessagesBySelectedChatRoom(request) {\r\n        GetBundleOfChatMessages(request)\r\n            .then(response => response.json())\r\n            .then(data => setAllChatMessages(data));\r\n    }\r\n\r\n    function getTime() {\r\n        let today = new Date();\r\n        let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n        return date;\r\n    }\r\n\r\n    const onMsgChanged = ev => {\r\n        let currentInput = ev.target.value;\r\n        setMsgText(currentInput);\r\n        createMessageObject(currentInput)\r\n        if (currentInput.length < 2) {\r\n            setValidInput(false);\r\n        }\r\n        else {\r\n            setValidInput(true);\r\n        }\r\n    }\r\n\r\n    function createMessageObject(msg) {\r\n        setMsgObject((prevState) => ({\r\n            ...prevState,\r\n            message: msg,\r\n        }));\r\n    }\r\n\r\n    const sendMessage = (ev) => {\r\n        CreateMessage(msgObject)\r\n        getChatMessagesBySelectedChatRoom(msgObject)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Container >\r\n                <ButtonGroup >\r\n                    <Button variant=\"secondary\" onClick={getSelectedChatRoom} value=\"ALL\">Global</Button>\r\n                    <Button variant=\"secondary\" onClick={getSelectedChatRoom} value=\"FACTION\">faction</Button>\r\n                    <Button variant=\"secondary\" onClick={getSelectedChatRoom} value=\"SQUAD\">Squad</Button>\r\n                </ButtonGroup>\r\n                <br />\r\n                <ThemeProvider>\r\n                    <ChatList >\r\n                        {allChatMessages.map((chatMessage) =>\r\n                            <ChatListItem key={chatMessage.chatMessageId}>\r\n                                <Avatar imgUrl=\"https://livechat.s3.amazonaws.com/default/avatars/male_8.jpg\" />\r\n                                <Column fill>\r\n                                    <Row justify>\r\n                                        <Title ellipsis>{'Michael'}</Title>\r\n                                        <Subtitle nowrap>{'14:31 PM'}</Subtitle>\r\n                                    </Row>\r\n                                    <Subtitle >\r\n                                        {chatMessage.message}\r\n                                    </Subtitle>\r\n                                </Column>\r\n                            </ChatListItem>\r\n                        )}\r\n                    </ChatList>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter a message\" onChange={onMsgChanged} />\r\n                        {!validInput ? <p>{invalidInputMessage}</p> : null}\r\n                        <IconButton disabled={!validInput} onClick={sendMessage}>\r\n                            <SendIcon />\r\n                        </IconButton>\r\n                    </Form.Group>\r\n                </ThemeProvider>\r\n            </Container>\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n};\r\nexport default ChatMessage;",["229","230"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js",["231"],"export async function getPlayerInfo() {\r\n    const response = await fetch('/api/fetch/player/all');\r\n\r\n    const status = await response.status\r\n    if (status === 200) {\r\n        const user = await response.json()\r\n    }\r\n    return status;\r\n}","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\chatMessageStorge.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js",["232","233"],"import React, { Component, useEffect, useState } from 'react';\r\nimport Header from '../StylingComponents/Header';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nconst Bite = ({ history }) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId)).json();\r\n        setCurrentPlayer(response);\r\n    }\r\n\r\n\r\n    function handleCurrentCoordinates() {\r\n\r\n    }\r\n\r\n    function handleBite() {\r\n        console.log('The player has been bitten')\r\n    }\r\n\r\n\r\n    // The factions need to be switched back, the current state is for testing\r\n    if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n            </div>\r\n        )\r\n    } else if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div id=\"codeEntryContainer\">\r\n                    <h2>BITE CODE ENTRY</h2>\r\n                    <Form onSubmit={handleBite}>\r\n                        <Form.Group controlId=\"formBiteCode\">\r\n                            <Form.Control id=\"biteCode\" name=\"biteCode\" type=\"text\" placeholder=\"Bite Code\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formCoordinates\">\r\n                            <Form.Control id=\"coordinates\" name=\"coordinates\" type=\"text\" value={handleCurrentCoordinates} required></Form.Control>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h3>Something went wrong...</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bite;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js",[],{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":3,"column":42,"nodeType":"240","messageId":"241","endLine":3,"endColumn":48},{"ruleId":"238","severity":1,"message":"242","line":8,"column":8,"nodeType":"240","messageId":"241","endLine":8,"endColumn":13},{"ruleId":"238","severity":1,"message":"243","line":10,"column":7,"nodeType":"240","messageId":"241","endLine":10,"endColumn":16},{"ruleId":"238","severity":1,"message":"244","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":18},{"ruleId":"238","severity":1,"message":"245","line":3,"column":8,"nodeType":"240","messageId":"241","endLine":3,"endColumn":16},{"ruleId":"238","severity":1,"message":"246","line":18,"column":13,"nodeType":"240","messageId":"241","endLine":18,"endColumn":24},{"ruleId":"247","severity":1,"message":"248","line":57,"column":8,"nodeType":"249","endLine":57,"endColumn":10,"suggestions":"250"},{"ruleId":"238","severity":1,"message":"243","line":9,"column":7,"nodeType":"240","messageId":"241","endLine":9,"endColumn":16},{"ruleId":"238","severity":1,"message":"251","line":4,"column":8,"nodeType":"240","messageId":"241","endLine":4,"endColumn":14},{"ruleId":"238","severity":1,"message":"243","line":11,"column":7,"nodeType":"240","messageId":"241","endLine":11,"endColumn":16},{"ruleId":"238","severity":1,"message":"252","line":31,"column":20,"nodeType":"240","messageId":"241","endLine":31,"endColumn":55},{"ruleId":"238","severity":1,"message":"253","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":26},{"ruleId":"238","severity":1,"message":"251","line":5,"column":8,"nodeType":"240","messageId":"241","endLine":5,"endColumn":14},{"ruleId":"247","severity":1,"message":"254","line":20,"column":8,"nodeType":"249","endLine":20,"endColumn":10,"suggestions":"255"},{"ruleId":"238","severity":1,"message":"253","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":26},{"ruleId":"238","severity":1,"message":"251","line":3,"column":8,"nodeType":"240","messageId":"241","endLine":3,"endColumn":14},{"ruleId":"247","severity":1,"message":"256","line":17,"column":8,"nodeType":"249","endLine":17,"endColumn":10,"suggestions":"257"},{"ruleId":"247","severity":1,"message":"258","line":56,"column":8,"nodeType":"249","endLine":56,"endColumn":10,"suggestions":"259"},{"ruleId":"247","severity":1,"message":"254","line":74,"column":8,"nodeType":"249","endLine":74,"endColumn":10,"suggestions":"260"},{"ruleId":"238","severity":1,"message":"261","line":96,"column":13,"nodeType":"240","messageId":"241","endLine":96,"endColumn":17},{"ruleId":"238","severity":1,"message":"253","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":26},{"ruleId":"247","severity":1,"message":"262","line":18,"column":8,"nodeType":"249","endLine":18,"endColumn":10,"suggestions":"263"},{"ruleId":"247","severity":1,"message":"254","line":36,"column":8,"nodeType":"249","endLine":36,"endColumn":10,"suggestions":"264"},{"ruleId":"247","severity":1,"message":"265","line":48,"column":8,"nodeType":"249","endLine":48,"endColumn":10,"suggestions":"266"},{"ruleId":"238","severity":1,"message":"267","line":119,"column":14,"nodeType":"240","messageId":"241","endLine":119,"endColumn":33},{"ruleId":"238","severity":1,"message":"268","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":14},{"ruleId":"238","severity":1,"message":"269","line":4,"column":8,"nodeType":"240","messageId":"241","endLine":4,"endColumn":16},{"ruleId":"238","severity":1,"message":"268","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":14},{"ruleId":"238","severity":1,"message":"270","line":9,"column":11,"nodeType":"240","messageId":"241","endLine":9,"endColumn":24},{"ruleId":"238","severity":1,"message":"253","line":1,"column":16,"nodeType":"240","messageId":"241","endLine":1,"endColumn":25},{"ruleId":"238","severity":1,"message":"271","line":12,"column":33,"nodeType":"240","messageId":"241","endLine":12,"endColumn":55},{"ruleId":"238","severity":1,"message":"272","line":13,"column":22,"nodeType":"240","messageId":"241","endLine":13,"endColumn":33},{"ruleId":"238","severity":1,"message":"273","line":14,"column":20,"nodeType":"240","messageId":"241","endLine":14,"endColumn":29},{"ruleId":"247","severity":1,"message":"274","line":29,"column":8,"nodeType":"249","endLine":29,"endColumn":27,"suggestions":"275"},{"ruleId":"247","severity":1,"message":"276","line":57,"column":8,"nodeType":"249","endLine":57,"endColumn":10,"suggestions":"277"},{"ruleId":"234","replacedBy":"278"},{"ruleId":"236","replacedBy":"279"},{"ruleId":"238","severity":1,"message":"280","line":6,"column":15,"nodeType":"240","messageId":"241","endLine":6,"endColumn":19},{"ruleId":"238","severity":1,"message":"253","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":26},{"ruleId":"247","severity":1,"message":"254","line":14,"column":8,"nodeType":"249","endLine":14,"endColumn":10,"suggestions":"281"},"no-native-reassign",["282"],"no-negated-in-lhs",["283"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Phone' is defined but never used.","'useStyles' is assigned a value but never used.","'Redirect' is defined but never used.","'firebase' is defined but never used.","'currentUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'playerDetails', 'props.history', and 'squadMemberDetails'. Either include them or remove the dependency array.","ArrayExpression",["284"],"'NavBar' is defined but never used.","'loadPlayerInformationToLocalStorage' is defined but never used.","'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCurrentPlayer'. Either include it or remove the dependency array.",["285"],"React Hook useEffect has a missing dependency: 'fetchSquadMembers'. Either include it or remove the dependency array.",["286"],"React Hook useEffect has a missing dependency: 'fetchSquad'. Either include it or remove the dependency array.",["287"],["288"],"'body' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSquads'. Either include it or remove the dependency array.",["289"],["290"],"React Hook useEffect has a missing dependency: 'fetchSquadMember'. Either include it or remove the dependency array.",["291"],"'assignSquadMemberId' is defined but never used.","'Link' is defined but never used.","'GameMenu' is defined but never used.","'handleSignOut' is assigned a value but never used.","'setInvalidInputMessage' is assigned a value but never used.","'setPlayerId' is assigned a value but never used.","'setGameId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'msgObject'. Either include it or remove the dependency array.",["292"],"React Hook useEffect has a missing dependency: 'squadId'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMsgObject' needs the current value of 'squadId'.",["293"],["282"],["283"],"'user' is assigned a value but never used.",["294"],"no-global-assign","no-unsafe-negation",{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"297","fix":"303"},{"desc":"304","fix":"305"},{"desc":"297","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"297","fix":"313"},"Update the dependencies array to be: [playerDetails, props.history, squadMemberDetails]",{"range":"314","text":"315"},"Update the dependencies array to be: [fetchCurrentPlayer]",{"range":"316","text":"317"},"Update the dependencies array to be: [fetchSquadMembers]",{"range":"318","text":"319"},"Update the dependencies array to be: [fetchSquad]",{"range":"320","text":"321"},{"range":"322","text":"317"},"Update the dependencies array to be: [fetchSquads]",{"range":"323","text":"324"},{"range":"325","text":"317"},"Update the dependencies array to be: [fetchSquadMember]",{"range":"326","text":"327"},"Update the dependencies array to be: [msgObject, msgObject.faction]",{"range":"328","text":"329"},"Update the dependencies array to be: [squadId]",{"range":"330","text":"331"},{"range":"332","text":"317"},[2492,2494],"[playerDetails, props.history, squadMemberDetails]",[760,762],"[fetchCurrentPlayer]",[664,666],"[fetchSquadMembers]",[2071,2073],"[fetchSquad]",[2492,2494],[699,701],"[fetchSquads]",[1162,1164],[1493,1495],"[fetchSquadMember]",[1296,1315],"[msgObject, msgObject.faction]",[2092,2094],"[squadId]",[421,423]]