[{"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\index.js":"1","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\App.js":"3","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js":"4","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js":"5","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js":"6","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js":"7","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js":"8","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js":"9","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js":"10","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js":"11","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js":"12","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js":"13","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js":"14","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js":"15","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js":"16","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js":"17","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js":"18","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js":"19","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js":"20","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js":"21","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js":"22","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditMissionMarker.js":"23","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js":"24","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Missions.js":"25","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\GameMap.js":"26","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js":"27","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js":"28","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js":"29","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js":"30","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js":"31","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js":"32","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js":"33","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js":"34","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js":"35","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js":"36","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js":"37","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js":"38","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js":"39","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js":"40","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js":"41","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js":"42","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\missionStorage.js":"43","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js":"44","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\squadCheckinStorage.js":"45","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js":"46","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js":"47","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js":"48","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\KillStorage.js":"49"},{"size":517,"mtime":1608561367131,"results":"50","hashOfConfig":"51"},{"size":375,"mtime":1608561367132,"results":"52","hashOfConfig":"51"},{"size":3865,"mtime":1609847474154,"results":"53","hashOfConfig":"51"},{"size":651,"mtime":1608561367134,"results":"54","hashOfConfig":"51"},{"size":336,"mtime":1608623502708,"results":"55","hashOfConfig":"51"},{"size":577,"mtime":1608561367134,"results":"56","hashOfConfig":"51"},{"size":4366,"mtime":1609862337604,"results":"57","hashOfConfig":"51"},{"size":3030,"mtime":1609857803521,"results":"58","hashOfConfig":"51"},{"size":9062,"mtime":1609857803522,"results":"59","hashOfConfig":"51"},{"size":5254,"mtime":1608712835684,"results":"60","hashOfConfig":"51"},{"size":11204,"mtime":1609857544698,"results":"61","hashOfConfig":"51"},{"size":2613,"mtime":1609765736007,"results":"62","hashOfConfig":"51"},{"size":1067,"mtime":1608561367122,"results":"63","hashOfConfig":"51"},{"size":5945,"mtime":1609864608745,"results":"64","hashOfConfig":"51"},{"size":7506,"mtime":1609866174227,"results":"65","hashOfConfig":"51"},{"size":6048,"mtime":1609865334788,"results":"66","hashOfConfig":"51"},{"size":813,"mtime":1608720338091,"results":"67","hashOfConfig":"51"},{"size":2055,"mtime":1609847474159,"results":"68","hashOfConfig":"51"},{"size":7218,"mtime":1609857803522,"results":"69","hashOfConfig":"51"},{"size":1830,"mtime":1609847474158,"results":"70","hashOfConfig":"51"},{"size":2826,"mtime":1609862337604,"results":"71","hashOfConfig":"51"},{"size":7037,"mtime":1609847474155,"results":"72","hashOfConfig":"51"},{"size":11696,"mtime":1609847474157,"results":"73","hashOfConfig":"51"},{"size":1298,"mtime":1609852739001,"results":"74","hashOfConfig":"51"},{"size":2615,"mtime":1609847474160,"results":"75","hashOfConfig":"51"},{"size":605,"mtime":1609847474160,"results":"76","hashOfConfig":"51"},{"size":3934,"mtime":1609862337607,"results":"77","hashOfConfig":"51"},{"size":12492,"mtime":1609866068010,"results":"78","hashOfConfig":"51"},{"size":7409,"mtime":1609868200840,"results":"79","hashOfConfig":"51"},{"size":820,"mtime":1608561367136,"results":"80","hashOfConfig":"51"},{"size":3814,"mtime":1609852739057,"results":"81","hashOfConfig":"51"},{"size":602,"mtime":1609847474169,"results":"82","hashOfConfig":"51"},{"size":547,"mtime":1608712835698,"results":"83","hashOfConfig":"51"},{"size":5670,"mtime":1609857544699,"results":"84","hashOfConfig":"51"},{"size":671,"mtime":1608623502695,"results":"85","hashOfConfig":"51"},{"size":4247,"mtime":1609857803523,"results":"86","hashOfConfig":"51"},{"size":406,"mtime":1609765736078,"results":"87","hashOfConfig":"51"},{"size":773,"mtime":1609865201411,"results":"88","hashOfConfig":"51"},{"size":13095,"mtime":1609867909765,"results":"89","hashOfConfig":"51"},{"size":891,"mtime":1608561367130,"results":"90","hashOfConfig":"51"},{"size":3056,"mtime":1609847474167,"results":"91","hashOfConfig":"51"},{"size":1989,"mtime":1609847474168,"results":"92","hashOfConfig":"51"},{"size":3144,"mtime":1609847474170,"results":"93","hashOfConfig":"51"},{"size":6025,"mtime":1609862694276,"results":"94","hashOfConfig":"51"},{"size":2834,"mtime":1609847474170,"results":"95","hashOfConfig":"51"},{"size":85,"mtime":1608561367135,"results":"96","hashOfConfig":"51"},{"size":1057,"mtime":1609852746452,"results":"97","hashOfConfig":"51"},{"size":3406,"mtime":1609847474166,"results":"98","hashOfConfig":"51"},{"size":455,"mtime":1609840501659,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"crhxuc",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"102"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"102"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\index.js",[],["219","220"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\App.js",["221"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"./utils/PrivateRoute\";\r\nimport Login from './components/AuthComponents/Login'\r\nimport Register from './components/AuthComponents/Register'\r\nimport Phone from './components/AuthComponents/Phone'\r\nimport RegisterPhone from './components/AuthComponents/RegisterPhone'\r\nimport Admin from './components/AdminComponents/Admin'\r\nimport EditGame from './components/AdminComponents/EditGame'\r\nimport PlayerState from './components/AdminComponents/PlayerState'\r\nimport Bite from './components/GameComponents/Bite'\r\nimport CreateMissionMarker from './components/AdminComponents/CreateMissionMarker'\r\nimport EditMissionMarker from './components/AdminComponents/EditMissionMarker'\r\nimport BiteHuman from './components/GameComponents/BiteHuman'\r\nimport BiteZombie from './components/GameComponents/BiteZombie'\r\nimport ChooseFaction from './components/GameComponents/ChooseFaction'\r\nimport CurrentGames from './components/GameComponents/CurrentGames'\r\nimport Home from './components/HomeComponents/Home'\r\nimport LandingPage from './components/HomeComponents/LandingPage'\r\nimport GameMap from './components/GameComponents/GameMap'\r\nimport SquadCreate from './components/SquadComponents/SquadCreate'\r\nimport SquadDetail from './components/SquadComponents/SquadDetail'\r\nimport SquadList from './components/SquadComponents/SquadList'\r\nimport NotFound from './components/StylingComponents/NotFound'\r\nimport { AuthProvider } from \"./utils/Auth\";\r\nimport './components/StylingComponents/Components.css'\r\nimport AdminCreateGame from './components/AdminComponents/AdminCreateGame'\r\nimport Missions from \"./components/GameComponents/Missions\";\r\nimport Chat from \"./components/ChatMessageComponents/Chat\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/phone\" component={Phone} />\r\n          <Route exact path=\"/registerphone\" component={RegisterPhone} />\r\n          <PrivateRoute exact path=\"/\" component={Home} />\r\n          <PrivateRoute exact path=\"/landing\" component={LandingPage} />\r\n          <PrivateRoute exact path=\"/bite\" component={Bite} />\r\n          <PrivateRoute exact path=\"/bitehuman\" component={BiteHuman} />\r\n          <PrivateRoute exact path=\"/bitezombie\" component={BiteZombie} />\r\n          <PrivateRoute exact path=\"/squads\" component={SquadList} />\r\n          <PrivateRoute exact path=\"/squaddetails\" component={SquadDetail} />\r\n          <PrivateRoute exact path=\"/createsquad\" component={SquadCreate} />\r\n          <PrivateRoute exact path=\"/currentgames\" component={CurrentGames} />\r\n          <PrivateRoute exact path=\"/admin\" component={Admin} />\r\n          <PrivateRoute exact path=\"/playerstate\" component={PlayerState} />\r\n          <PrivateRoute exact path=\"/map\" component={GameMap} />\r\n          <PrivateRoute exact path=\"/choosefaction\" component={ChooseFaction} />\r\n          <PrivateRoute exact path=\"/creategame\" component={AdminCreateGame} />\r\n          <PrivateRoute exact path=\"/create/missionmarker\" component={CreateMissionMarker} />\r\n          <PrivateRoute exact path=\"/edit/missionmarker\" component={EditMissionMarker} />\r\n          <PrivateRoute exact path=\"/editgame\" component={EditGame} />\r\n          <PrivateRoute exact path=\"/missions\" component={Missions} />\r\n          <PrivateRoute exact path=\"/chat\" component={Chat} />\r\n          <Route path='*'>\r\n            <NotFound header='Page not found' message='The page you requested does not exist' />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\nexport default App;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js",["222"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js",["223"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst Admin = () => {\r\n\r\n\r\n    const BUTTON_STYLES = {\r\n        width: '350px',\r\n        height: '40px',\r\n        margin: '2px',\r\n        padding: '1px'\r\n    }\r\n    let userId = localStorage.getItem('User ID');\r\n    \r\n    const [currentUser, setCurrentUser] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        fetchCurrentUser();\r\n    }, []);\r\n\r\n    async function fetchCurrentUser() {\r\n        const token = localStorage.getItem('jwt');\r\n        const response = await fetch('/api/fetch/useraccount/' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            setCurrentUser(body);\r\n        } else {\r\n            alert(\"Could not find user object.\")\r\n            setCurrentUser({});\r\n        }\r\n    };\r\n\r\n\r\n    if (currentUser.userType === \"PLAYER\") {\r\n        return (\r\n            <>\r\n            <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h3>Forbidden</h3>\r\n                        <p>You do not have access to the admin page.</p>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    } else if (currentUser.userType === \"ADMINISTRATOR\") {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                    <Header />\r\n                    <h1>Admin</h1>\r\n                    <Link to=\"/creategame\">\r\n                        <Button variant=\"dark\" style={BUTTON_STYLES}>Create Game</Button>\r\n                    </Link>\r\n\r\n                    <Link to=\"/editgame\">\r\n                        <Button variant=\"dark\" style={BUTTON_STYLES}>Edit Game</Button>\r\n                    </Link>\r\n\r\n                    <Link to=\"#\">\r\n                        <Button variant=\"dark\" style={BUTTON_STYLES}>Edit Player State</Button>\r\n                    </Link>\r\n\r\n                    <Link to=\"/create/missionmarker\">\r\n                        <Button variant=\"dark\" style={BUTTON_STYLES}>Create Mission Marker</Button>\r\n                    </Link>\r\n\r\n                    <Link to=\"/edit/missionmarker\">\r\n                        <Button variant=\"dark\" style={BUTTON_STYLES}>Edit Mission Marker</Button>\r\n                    </Link>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h3>***</h3>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Admin;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js",["224","225","226","227"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from '../StylingComponents/Header';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { FetchAllPlayers, GetPlayerData, UpdatePlayer, DeletePlayer, FetchAllPlayersByGameId } from \"../../utils/PlayerStorage\";\r\nimport { FetchAllGames } from \"../../utils/GameStorage\";\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\n\r\nconst PlayerState = (props) => {\r\n  const [allPlayers, setAllPlayers] = useState([])\r\n  const [playerObject, setPlayerObject] = useState({})\r\n  const [allGames, setAllGames] = useState([])\r\n  const [selectedPlayerId, setSelectedPlayerId] = useState(null);\r\n  const [selectedGameId, setSelectedGameId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllGames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedPlayerId !== null) {\r\n      fetchPlayer()\r\n    }\r\n    else {\r\n      setPlayerObject({})\r\n    }\r\n  }, [selectedPlayerId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedGameId !== null) {\r\n      fetchAllPlayersByGameId()\r\n    }\r\n    else {\r\n      setPlayerObject({})\r\n    }\r\n  }, [selectedGameId]);\r\n\r\n  useEffect(() => {\r\n\r\n  }, [playerObject]);\r\n\r\n  async function fetchAllGames() {\r\n    let response = await FetchAllGames();\r\n    if (response !== null) {\r\n      setAllGames(response);\r\n    } else {\r\n      alert('Failed to fetch games');\r\n      setAllGames([]);\r\n    }\r\n  }\r\n\r\n  async function fetchAllPlayersByGameId() {\r\n    let response = await FetchAllPlayersByGameId(selectedGameId);\r\n    if (response !== null) {\r\n      setAllPlayers(response)\r\n    } else {\r\n      alert('Failed to fetch player by id');\r\n      setAllPlayers([]);\r\n    }\r\n  }\r\n\r\n  async function fetchPlayer() {\r\n    let response = await GetPlayerData(selectedPlayerId);\r\n    if (response !== null) {\r\n      setPlayerObject(response);\r\n    } else {\r\n      alert('Failed to fetch player');\r\n      setPlayerObject({});\r\n    }\r\n  }\r\n\r\n  function cancelEditingPlayer() {\r\n    props.history.push(\"/admin\");\r\n  }\r\n\r\n  async function editPlayer() {\r\n    let response = await UpdatePlayer(playerObject);\r\n    if (response.status === 200) {\r\n      props.history.push(\"/admin\");\r\n    } else if (response.status === 400) {\r\n      alert(\"Game name must be unique!\");\r\n    } else {\r\n      alert(\"Something went wrong while updating the player.\");\r\n    }\r\n  }\r\n\r\n  async function deletePlayer() {\r\n    let response = await DeletePlayer(selectedPlayerId);\r\n    if (response.status === 200) {\r\n      props.history.push(\"/admin\");\r\n    }\r\n    else {\r\n      alert(\"Something went wrong while deleting the player.\");\r\n    }\r\n  }\r\n\r\n  function isEmpty(obj) {\r\n    for (var prop in obj) {\r\n      if (obj.hasOwnProperty(prop))\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function handleChangePlayerToUpdate(ev) {\r\n    let selectedPlayer = ev.target.value;\r\n    if (selectedPlayer !== \"0\") {\r\n      setSelectedPlayerId(selectedPlayer)\r\n      setPlayerObject({})\r\n    }\r\n    else {\r\n      setSelectedPlayerId(null);\r\n    }\r\n  }\r\n\r\n  function handleChangePlayerFaction(ev) {\r\n    let selectedFaction = ev.target.value;\r\n    if (selectedFaction !== \"0\") {\r\n      setPlayerObject((prevState) => ({\r\n        ...prevState,\r\n        faction: selectedFaction\r\n      }));\r\n    }\r\n    else {\r\n      setSelectedPlayerId(null);\r\n    }\r\n  }\r\n\r\n  function handleChangePlayerIsPatientZero(ev) {\r\n    let selectedState = ev.target.value;\r\n    if (selectedState !== \"0\") {\r\n      setPlayerObject((prevState) => ({\r\n        ...prevState,\r\n        patientZero: convertStringValueToBoolean(selectedState)\r\n      }));\r\n    }\r\n    else {\r\n      setSelectedPlayerId(null);\r\n    }\r\n  }\r\n\r\n  function convertStringValueToBoolean(value) {\r\n    if (value === \"true\") {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n  function handleChangePlayerIsAlive(ev) {\r\n    let selectedState = ev.target.value;\r\n    if (selectedState !== \"0\") {\r\n      setPlayerObject((prevState) => ({\r\n        ...prevState,\r\n        alive: convertStringValueToBoolean(selectedState)\r\n      }));\r\n    }\r\n    else {\r\n      setSelectedPlayerId(null);\r\n    }\r\n  }\r\n\r\n  function handleChangeGame(ev) {\r\n    let selectedGame = ev.target.value;\r\n    if (selectedGame !== \"0\") {\r\n      setSelectedGameId(selectedGame)\r\n    }\r\n    else {\r\n      setSelectedGameId(null);\r\n      setSelectedPlayerId(null)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Header />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Edit Player State</h1>\r\n\r\n          <Form.Group>\r\n            <Form.Control\r\n              onChange={handleChangeGame}\r\n              className=\"mb-4\"\r\n              as=\"select\">\r\n              <option value=\"0\">Select game...</option>\r\n              {allGames.filter(game => game.gameState !== 'COMPLETED').map(filteredGame => (\r\n                <option key={filteredGame.gameId} value={filteredGame.gameId}>\r\n                  {filteredGame.name}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n            {selectedGameId !== null ?\r\n              <>\r\n                <Form.Label>All players</Form.Label>\r\n                <Form.Control\r\n                  onChange={handleChangePlayerToUpdate}\r\n                  className=\"mb-2\"\r\n                  as=\"select\">\r\n                  <option value=\"0\">Select player...</option>\r\n                  {allPlayers.map(player => (\r\n                    <option key={player.playerId} value={player.playerId}>\r\n                      {player.playerId}\r\n                    </option>\r\n                  ))}\r\n                </Form.Control>\r\n              </>:null}\r\n          </Form.Group>\r\n\r\n          {selectedPlayerId !== null && !isEmpty(playerObject) ?\r\n            <div>\r\n              <Form.Label>Faction</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                className=\"mb-2\"\r\n                onChange={handleChangePlayerFaction}>\r\n                {playerObject.faction === 'HUMAN' ?\r\n                  <>\r\n                    <option selected value=\"HUMAN\">Human</option>\r\n                    <option value=\"ZOMBIE\">Zombie</option>\r\n                  </>\r\n                  :\r\n                  <>\r\n                    <option\r\n                      value=\"HUMAN\">Human</option>\r\n                    <option\r\n                      selected\r\n                      value=\"ZOMBIE\">Zombie</option>\r\n                  </>\r\n                }\r\n\r\n              </Form.Control>\r\n\r\n              {playerObject.faction === \"HUMAN\" ?\r\n                <>\r\n                  <Form.Label>Is alive</Form.Label>\r\n                  <Form.Control\r\n                    className=\"mb-2\"\r\n                    onChange={handleChangePlayerIsAlive}\r\n                    as=\"select\">\r\n                    {playerObject.alive ?\r\n                      <>\r\n                        <option\r\n                          selected\r\n                          value={true}>Yes</option>\r\n                        <option\r\n                          value={false}>No</option>\r\n                      </>\r\n                      :\r\n                      <>\r\n                        <option\r\n                          value={true}>Alive</option>\r\n                        <option\r\n                          selected\r\n                          value={false}>Dead</option>\r\n                      </>\r\n                    }\r\n                  </Form.Control>\r\n                </>\r\n                : null}\r\n\r\n              {playerObject.faction === \"ZOMBIE\" ?\r\n                <>\r\n                  <Form.Label>Is patient zero</Form.Label>\r\n                  <Form.Control\r\n                    onChange={handleChangePlayerIsPatientZero}\r\n                    as=\"select\">\r\n                    {playerObject.patientZero ?\r\n                      <>\r\n                        <option selected value={true}>Yes</option>\r\n                        <option value={false}>No</option>\r\n                      </>\r\n                      :\r\n                      <>\r\n                        <option >Yes</option>\r\n                        <option selected>No</option>\r\n                      </>\r\n                    }\r\n                  </Form.Control>\r\n                </>\r\n                : null}\r\n            </div> : null\r\n          }\r\n          {selectedPlayerId && selectedGameId ?\r\n            <>\r\n              <Button\r\n                onClick={editPlayer}\r\n                className=\"m-1\"\r\n                size=\"sm\"\r\n                disabled={isEmpty(playerObject)}>Update</Button>\r\n\r\n              <Button\r\n                onClick={deletePlayer}\r\n                className=\"m-1\"\r\n                size=\"sm\"\r\n                disabled={isEmpty(playerObject)}\r\n                variant=\"danger\">Delete</Button>\r\n\r\n              <Button\r\n                onClick={cancelEditingPlayer}\r\n                className=\"m-1\"\r\n                size=\"sm\"\r\n                variant=\"warning\">Cancel</Button>\r\n            </> : null}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlayerState;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js",["228"],"import React, { useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { CreateGame } from \"../../utils/GameStorage\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst AdminCreateGame = (props) => {\r\n    const [validGameName, setValidGameName] = useState(false);\r\n    const [validGameDescription, setValidGameDescription] = useState(false);\r\n    const [gameObject, setGameObject] = useState(\r\n        {\r\n            name: \"\",\r\n            gameState: \"PREPARATION\",\r\n            startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n            endTime: \"2021-01-02T08:00:00.000+00:00\",\r\n            maxNumberOfPlayers: 50,\r\n            description: \"\"\r\n        })\r\n\r\n    async function createGame() {\r\n        if (validGameDescription === true && validGameName === true) {\r\n            let createGameResponse = await CreateGame(gameObject);\r\n            if (createGameResponse.status === 201) {\r\n                props.history.push(\"/currentgames\");\r\n            } else if (createGameResponse.status === 400) {\r\n                alert(\"Game name must be unique!\");\r\n            } else {\r\n                alert(\"Something went wrong while creating the game.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const onGameNameChange = ev => {\r\n        let currentGameName = ev.target.value;\r\n        if (currentGameName.length < 4) {\r\n            setValidGameName(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                name: currentGameName\r\n            }));\r\n            setValidGameName(true);\r\n        }\r\n    }\r\n\r\n    const onGameDescriptionChange = ev => {\r\n        let currentGameDescription = ev.target.value;\r\n        if (currentGameDescription.length < 4) {\r\n            setValidGameDescription(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                description: currentGameDescription\r\n            }));\r\n            setValidGameDescription(true);\r\n        }\r\n    }\r\n\r\n    const onStartTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            startTime: time\r\n        }));\r\n    }\r\n\r\n    const onEndTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            endTime: time\r\n        }));\r\n    }\r\n\r\n    const onSizeChange = ev => {\r\n        let numPlayers = ev.target.value;\r\n        if (numPlayers > 0) {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                maxNumberOfPlayers: numPlayers\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <GameMenu />\r\n                    <h1>Create game</h1>\r\n                    <br />\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter game name...\" onChange={onGameNameChange} />\r\n                        <br />\r\n                        <Form.Control placeholder=\"Enter game description...\" as=\"textarea\" rows={3} onChange={onGameDescriptionChange} />\r\n                        <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"Start time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-01T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onStartTimeChange}\r\n                        />\r\n                        <br />  <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"End time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-02T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onEndTimeChange}\r\n                        />\r\n                        <br />\r\n\r\n                        <br />\r\n                        <Form.Control type=\"number\" size=\"sm\" onChange={onSizeChange} placeholder=\"Max number of players...\">\r\n\r\n                        </Form.Control>\r\n                        <br /> <br />\r\n                        <Button disabled={!validGameName || !validGameDescription} onClick={createGame}>Create</Button>\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\nexport default AdminCreateGame;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js",["229","230","231","232"],"import React, { useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Header from '../StylingComponents/Header';\r\nimport Form from 'react-bootstrap/Form'\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\n\r\nconst Bite = ({ history }) => {\r\n\r\n    const BUTTON_STYLES = {\r\n        width: '150px',\r\n        height: '40px',\r\n        margin: '2px',\r\n        padding: '1px'\r\n    }\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let latitude = localStorage.getItem('Latitude');\r\n    let longitude = localStorage.getItem('Longitude');\r\n    let token = localStorage.getItem('jwt');\r\n\r\n    let currentCoordinates = ('Coordinates: \\nLatitude: ' + latitude + ' \\nLongitude: ' + longitude);\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n    const [currentUser, setCurrentUser] = useState([]);\r\n    const [validBiteCodeLength, setValidBiteCodeLength] = useState(false);\r\n    const [currentBiteCode, setCurrentBiteCode] = useState('');  // This is the bite code input from the form\r\n    const [currentVictim, setCurrentVictim] = useState([]);\r\n\r\n    const [victimDescription, setVictimDescription] = useState('');\r\n    const [currentVictimUser, setCurrentVictimUser] = useState([]);\r\n\r\n    const [buttonStatus, setButtonStatus] = useState(true);  // This is used to disable the \"turn\" and \"kill\" buttons if the bite code is incorrect\r\n    const [validationButtonStatus, setValidationButtonStatus] = useState(true);  // This is currently needed to stop the validation message from showing before pressing the \"validate\" button\r\n\r\n    \r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n        fetchCurrentUser();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentVictim();\r\n    }, [validBiteCodeLength]);\r\n    \r\n    useEffect(() => {\r\n        fetchCurrentVictimUser();\r\n    }, [currentVictim]);\r\n\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (playerResponse.status === 200) {\r\n            let body = await playerResponse.json();\r\n            setCurrentPlayer(body);\r\n        } else {\r\n            alert(\"Could not find player object.\")\r\n            setCurrentPlayer({});\r\n        }\r\n    };\r\n\r\n\r\n    async function fetchCurrentUser() {\r\n        const response = await fetch('/api/fetch/useraccount/' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            setCurrentUser(body);\r\n        } else {\r\n            alert(\"Could not find user object.\")\r\n            setCurrentUser({});\r\n        }\r\n    };\r\n\r\n    \r\n    function masterValidation() {\r\n        setValidationButtonStatus(false);\r\n        fetchCurrentVictim(); \r\n    }\r\n\r\n    \r\n    const onBiteCodeChange = ev => {\r\n        let biteCodeInput = ev.target.value;\r\n        setCurrentBiteCode(biteCodeInput);\r\n\r\n        if (biteCodeInput.length < 8 || biteCodeInput.length > 8) {\r\n            setValidBiteCodeLength(false);\r\n        } else {\r\n            setCurrentBiteCode(biteCodeInput);\r\n            setValidBiteCodeLength(true);\r\n            setValidationButtonStatus(true);\r\n        }\r\n    }\r\n\r\n\r\n    const onVictimDescriptionChange = ev => {\r\n        let victimDescriptionInput = ev.target.value;\r\n        setVictimDescription(victimDescriptionInput);\r\n    }\r\n\r\n\r\n    // IF TIME: This needs to be cleaned up, and should probably be broken into a few smaller functions\r\n    async function fetchCurrentVictim() {\r\n        setValidationButtonStatus(false);\r\n        const victimResponse = await fetch('/api/fetch/player/' + gameId + '/' + currentBiteCode, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (victimResponse.status === 200 && validBiteCodeLength === true) {\r\n            let body = await victimResponse.json();\r\n            setCurrentVictim(body);\r\n\r\n            if (currentVictim.biteCode === currentBiteCode) {\r\n                fetchCurrentVictimUser();\r\n                alert('That is a valid bite code! It belongs to ' + currentVictimUser.username + '. \\nIf this is not the correct player, please try validating again or enter a different bite code.');\r\n                setButtonStatus(false);\r\n            };\r\n\r\n        } else if (victimResponse.status !== 200 && validBiteCodeLength === true && validationButtonStatus === false) {\r\n                alert('That bite code is not connected to a player in this game');\r\n                setCurrentVictim({});\r\n                setButtonStatus(true);            \r\n        } else {\r\n            setCurrentVictim({});\r\n            setButtonStatus(true);\r\n        }\r\n    }\r\n\r\n\r\n    // This function is used to get and show the victim's username in the validation alert\r\n    async function fetchCurrentVictimUser() {\r\n        const victimUserResponse = await fetch('/api/fetch/useraccount/' + currentVictim.userAccountId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (victimUserResponse.status === 200) {\r\n            let body = await victimUserResponse.json()\r\n            setCurrentVictimUser(body);\r\n        } else {\r\n            setCurrentVictimUser({});\r\n        };\r\n    };\r\n\r\n\r\n    async function createKillObject() {\r\n        let timeStamp = new Date();\r\n        let killResponse = await fetch('/api/create/kill', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + token \r\n            },\r\n            body: JSON.stringify({\r\n                timeOfDeath: timeStamp,\r\n                position: {\r\n                    x: longitude,\r\n                    y: latitude\r\n                },\r\n                gameId: gameId,\r\n                killerId: currentPlayer.playerId,\r\n                victimId: currentVictim.playerId,\r\n                biteCode: currentBiteCode,\r\n                description: victimDescription\r\n            })\r\n        });\r\n        if (killResponse.status === 200) {\r\n            let body = await killResponse.json();\r\n            return body;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    async function handleZombie() {\r\n        console.log('The player was turned into a ZOMBIE');\r\n        createKillObject();\r\n\r\n        if (validBiteCodeLength === true) {\r\n            let playerResponse = await fetch('/api/update/player/' + currentVictim.playerId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + token \r\n                },\r\n                body: JSON.stringify({\r\n                    faction: 'ZOMBIE', \r\n                    isAlive: false\r\n                })\r\n            });\r\n            if (playerResponse.status === 200) {\r\n                let body = await playerResponse.json();\r\n                console.log(body);\r\n                return body;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    async function handleKill() {\r\n        console.log('The player was killed');\r\n        createKillObject();\r\n        \r\n        if (validBiteCodeLength === true) {\r\n            let response = await fetch('/api/update/player/' + currentVictim.playerId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + token \r\n                },\r\n                body: JSON.stringify({\r\n                    isAlive: false\r\n                }) \r\n            });\r\n\r\n            if (response.status === 200) {\r\n                let body = await response.json();\r\n                console.log(body);\r\n                return body;\r\n            } else {\r\n                return null;\r\n            } \r\n        }\r\n    }\r\n\r\n\r\n    if (currentUser.userType === 'ADMINISTRATOR') {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h3>Forbidden</h3>\r\n                        <p>You do not have access to the bite page.</p>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    } else if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h2>BITE CODE</h2>\r\n                        <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n\r\n    } else if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <div id=\"codeEntryContainer\">\r\n                            <h2>BITE CODE ENTRY</h2>\r\n                            <Form id=\"biteCodeForm\">\r\n                                <Form.Group>\r\n                                    <Form.Control onChange={onBiteCodeChange} id=\"biteCode\" type=\"text\" placeholder=\"Bite Code\" required></Form.Control>\r\n                                    <Button id=\"validation\" type=\"button\" variant=\"dark\" style={BUTTON_STYLES} onClick={masterValidation}>Validate Bite Code</Button>\r\n                                </Form.Group>\r\n                                <br/>\r\n                                <Form.Control id=\"coordinates\" as=\"textarea\" rows={3} value={currentCoordinates} required></Form.Control>\r\n                                <br/>\r\n                                <Form.Control onChange={onVictimDescriptionChange} id=\"victimDescription\" name=\"victimDescription\" placeholder=\"Enter victim description...\" as=\"textarea\" rows={3}></Form.Control>\r\n                            </Form>\r\n                            <br/>\r\n                            <Button type=\"submit\" variant=\"dark\" style={BUTTON_STYLES} disabled={buttonStatus} onClick={handleZombie}>Turn into ZOMBIE</Button>\r\n                            <Button type=\"submit\" variant=\"dark\" style={BUTTON_STYLES} disabled={buttonStatus} onClick={handleKill}>Kill victim</Button>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n\r\n    } else {\r\n        return (\r\n            <>\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <Header />\r\n                        <h3>***</h3>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bite;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js",["233","234"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\nimport Header from '../StylingComponents/Header';\r\n\r\nconst BiteHuman = ({history}) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await FetchPlayer(gameId, userId);\r\n        if (response !== null) {\r\n            setCurrentPlayer(response);\r\n        } else {\r\n            alert(\"Could not find Player object.\");\r\n        }\r\n    }\r\n\r\n\r\n    if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n            </div>\r\n        )\r\n    } else if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div id=\"codeEntryContainer\">\r\n                    <h2>BITE CODE ENTRY</h2>\r\n                    <input type=\"text\" placeholder=\"CODE-HERE\" />\r\n                    <br/>\r\n                    <button>Make Zombie</button>\r\n                    <button>Kill</button>\r\n                </div>\r\n        \r\n                <br/>\r\n        \r\n                <div id=\"killContainer\">\r\n                    <input type=\"text\" placeholder=\"Coordinates (auto)\" />\r\n                    <br/>\r\n                    <input type=\"text\" placeholder=\"Victim Description\" />\r\n                    <br/>\r\n                    <button>Submit</button>\r\n                    <button>Cancel</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h3>Something went wrong...</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BiteHuman;\r\n\r\n\r\n\r\n\r\n/* class BiteHuman extends Component {\r\n\r\n    state = {\r\n        details: []\r\n    };\r\n\r\n    componentDidMount() {\r\n      fetch('/api/fetch/player/1')\r\n          .then(res => res.json())\r\n          .then((data) => {\r\n              this.setState({details: data})\r\n          })\r\n          .catch(console.log);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{this.state.details.biteCode}</div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BiteHuman; */","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js",["235","236"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js",["237","238","239","240","241"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js",["242","243","244"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst Chat = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <ChatMessage />\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js",["245","246","247"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { AuthContext } from \"../../utils/Auth.js\";\r\nimport { getUserInfo, storePhone } from \"../../utils/dbstorage.js\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\n\r\nconst RegisterPhone = ({ history }) => {\r\n\r\n    let userId = localStorage.getItem(\"User ID\")\r\n    const isVerified = firebase.auth().currentUser.emailVerified;\r\n\r\n    const handleRegister = async event => {\r\n        event.preventDefault();\r\n        const { phone } = event.target.elements;\r\n        storePhone(userId, phone.value);\r\n        history.push('/');\r\n    }\r\n\r\n    function redirectToIndex() {\r\n        history.push('/');\r\n    }\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <>\r\n            {isVerified\r\n                ?\r\n                <>\r\n                    <HeaderOutside />\r\n                    <section className=\"login-register\">\r\n                        <div className=\"container\">\r\n                            <h1>Register Phone</h1>\r\n                            <Form onSubmit={handleRegister} name=\"loginForm\">\r\n                                <Form.Group controlId=\"formPhone\">\r\n                                    <Form.Label>Phone Number: </Form.Label>\r\n                                    <Form.Control name=\"phone\" type=\"tel\" required />\r\n                                </Form.Group>\r\n                                <button type=\"submit\">Register</button>\r\n                                <Link to=\"/\">\r\n                                    <button>Cancel</button>\r\n                                </Link>\r\n                            </Form>\r\n                        </div>\r\n                    </section>\r\n                </>\r\n                : \r\n                redirectToIndex()\r\n                }\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterPhone);","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js",["248","249"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { UpdateGame, FetchAllGames, FetchGame, DeleteGame } from \"../../utils/GameStorage\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\n\r\n\r\nconst EditGame = (props) => {\r\n  const [validGameName, setValidGameName] = useState(false);\r\n  const [validGameDescription, setValidGameDescription] = useState(false);\r\n  const [deleteGame, setDeleteGame] = useState(false);\r\n  const [allGames, setAllGames] = useState([])\r\n  const [selectedGameId, setSelectedGameId] = useState(null);\r\n  const [gameObject, setGameObject] = useState({})\r\n\r\n  useEffect(() => {\r\n    fetchAllGames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedGameId !== null) {\r\n      fetchGame()\r\n    }\r\n    else {\r\n      setGameObject({})\r\n    }\r\n  }, [selectedGameId]);\r\n\r\n  useEffect(() => {\r\n\r\n  }, [gameObject]);\r\n\r\n  async function fetchAllGames() {\r\n    let response = await FetchAllGames();\r\n    if (response !== null) {\r\n      setAllGames(response);\r\n    } else {\r\n      alert('Failed to fetch games');\r\n      setAllGames([]);\r\n    }\r\n  }\r\n\r\n  async function fetchGame() {\r\n    let game = await FetchGame(selectedGameId);\r\n    if (game !== null) {\r\n      setGameObject(\r\n        {\r\n          name: game.name,\r\n          description: game.description,\r\n          gameState: game.gameState,\r\n          gameId: game.gameId,\r\n          startTime: game.startTime,\r\n          endTime: game.endTime,\r\n          maxNumberOfPlayers: game.maxNumberOfPlayers,\r\n          description: game.description\r\n        }\r\n      );\r\n    } else {\r\n      alert('Failed to fetch games');\r\n      setGameObject({});\r\n    }\r\n  }\r\n\r\n  async function editGame() {\r\n    let editGameResponse = await UpdateGame(gameObject);\r\n    if (editGameResponse.status === 200) {\r\n      props.history.push(\"/admin\");\r\n    } else if (editGameResponse.status === 400) {\r\n      alert(\"Game name must be unique!\");\r\n    } else {\r\n      alert(\"Something went wrong while updating the game.\");\r\n    }\r\n  }\r\n\r\n  const onGameNameChange = ev => {\r\n    let currentGameName = ev.target.value;\r\n    if (currentGameName.length < 4) {\r\n      setValidGameName(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentGameName\r\n      }));\r\n      setValidGameName(true);\r\n    }\r\n  }\r\n\r\n  const onGameDescriptionChange = ev => {\r\n    let currentGameDescription = ev.target.value;\r\n    if (currentGameDescription.length < 4) {\r\n      setValidGameDescription(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        description: currentGameDescription\r\n      }));\r\n      setValidGameDescription(true);\r\n    }\r\n  }\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n  const onSizeChange = ev => {\r\n    let numPlayers = ev.target.value;\r\n    if (numPlayers > 0) {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        maxNumberOfPlayers: numPlayers\r\n      }));\r\n    }\r\n  }\r\n\r\n  async function onDeleteClicked() {\r\n    let gameResponse = await DeleteGame(gameObject.gameId);\r\n    if (gameResponse === 200) {\r\n      props.history.push(\"/currentgames\");\r\n    } else {\r\n      console.log(\"Something went wrong when trying to delete the game.\");\r\n    }\r\n  }\r\n\r\n  const onCheckBoxChanged = ev => {\r\n    setDeleteGame(!deleteGame);\r\n  }\r\n\r\n  function handleChangeGameToUpdate(ev) {\r\n    let selectedGame = ev.target.value;\r\n    if (selectedGame !== \"0\") {\r\n      setSelectedGameId(selectedGame)\r\n      setGameObject({})\r\n    }\r\n    else {\r\n      setSelectedGameId(null);\r\n    }\r\n  }\r\n\r\n  function isEmpty(obj) {\r\n    for (var prop in obj) {\r\n      if (obj.hasOwnProperty(prop))\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  return (\r\n    <>\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <Header />\r\n          <GameMenu />\r\n          <h1>Edit game</h1>\r\n          <br />\r\n          <Form.Group>\r\n\r\n            <Form.Control\r\n              onChange={handleChangeGameToUpdate}\r\n              className=\"mb-4\"\r\n              as=\"select\">\r\n              <option value=\"0\">Select game...</option>\r\n              {allGames.filter(game => game.gameState !== 'COMPLETED').map(filteredGame => (\r\n                <option key={filteredGame.gameId} value={filteredGame.gameId}>\r\n                  {filteredGame.name}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n\r\n            {selectedGameId !== null && !isEmpty(gameObject) ?\r\n              <div>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter game name...\"\r\n                  defaultValue={gameObject.name}\r\n                  onChange={onGameNameChange} />\r\n                <br />\r\n                <Form.Control\r\n                  placeholder=\"Enter game description...\"\r\n                  as=\"textarea\"\r\n                  defaultValue={gameObject.description}\r\n                  rows={3}\r\n                  onChange={onGameDescriptionChange} />\r\n                <br />\r\n                <TextField\r\n                  id=\"datetime-local\"\r\n                  label=\"Start time\"\r\n                  type=\"datetime-local\"\r\n                  defaultValue={gameObject.startTime.substring(0, 16)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n\r\n                  onChange={onStartTimeChange}\r\n                />\r\n                <br />  <br />\r\n                <TextField\r\n                  id=\"datetime-local\"\r\n                  label=\"End time\"\r\n                  type=\"datetime-local\"\r\n                  defaultValue={gameObject.endTime.substring(0, 16)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  onChange={onEndTimeChange}\r\n                />\r\n                <br />\r\n                <br />\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  defaultValue={gameObject.maxNumberOfPlayers}\r\n                  size=\"sm\"\r\n                  onChange={onSizeChange}\r\n                  placeholder=\"Max number of players...\">\r\n\r\n                </Form.Control>\r\n                <br /> <br />\r\n                <Button disabled={!validGameName || !validGameDescription} onClick={editGame}>Update Game</Button>\r\n                <Button disabled={!deleteGame} onClick={onDeleteClicked}>Delete Game</Button>\r\n                <Form.Group controlId=\"deleteGameCheckbox\">\r\n                  <Form.Check type=\"checkbox\" label=\"Delete Game?\" onChange={onCheckBoxChanged} />\r\n                </Form.Group>\r\n              </div>\r\n              : null}\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default EditGame;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js",["250","251","252"],"import { TextField } from \"@material-ui/core\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CreateMission } from '../../utils/missionStorage'\r\nimport MainMap from \"../MapComponents/MainMap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst CreateMissionMarker = (props) => {\r\n  let gameId = localStorage.getItem(\"Game ID\")\r\n  let userId = localStorage.getItem(\"User ID\")\r\n\r\n  const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchCurrentPlayer();\r\n  }, [])\r\n\r\n  async function fetchCurrentPlayer() {                                                                    // user should be set to userId, not 1\r\n    const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId);\r\n    let body;\r\n    if (playerResponse.status === 200) {\r\n      body = await playerResponse.json();\r\n    } else {\r\n      body = null;\r\n    }\r\n    setCurrentPlayer(body);\r\n  }\r\n\r\n  const [validMissionName, setValidMissionName] = useState(false);\r\n  const [validDescription, setValidDescription] = useState(true);\r\n  const [missionObject, setMissionObject] = useState(\r\n    {\r\n      name: \"\",\r\n      missionDescription: \"\",\r\n      factionVisibility: \"HUMAN\",\r\n      missionPoint: {\r\n        x: 18.0249,\r\n        y: 59.2132\r\n      },\r\n      startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n      endTime: \"2021-01-02T08:00:00.000+00:00\"\r\n    })\r\n\r\n  async function createMission() {\r\n    if (validMissionName === true) {\r\n      let createMissionResponse = await CreateMission(missionObject);\r\n      if (createMissionResponse.status === 201) {\r\n        props.history.push(\"/missions\");\r\n      } else if (createMissionResponse.status === 400) {\r\n        alert(\"Mission name must be unique!\");\r\n      } else {\r\n        alert(\"Something went wrong while creating the mission.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  const onMissionNameChange = ev => {\r\n    let currentMissionName = ev.target.value;\r\n    if (currentMissionName.length < 4) {\r\n      setValidMissionName(false);\r\n    }\r\n    else {\r\n      setMissionObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentMissionName\r\n      }));\r\n      setValidMissionName(true);\r\n    }\r\n    localStorage.setItem(\"Mission Name: \", ev.target.value)\r\n  }\r\n\r\n  const onDescriptionChange = ev => {\r\n    let currentDescription = ev.target.value;\r\n    if (currentDescription.length < 4) {\r\n      setValidDescription(false);\r\n    }\r\n    else {\r\n      setMissionObject((prevState) => ({\r\n        ...prevState,\r\n        missionDescription: currentDescription\r\n      }));\r\n      setValidDescription(true);\r\n    }\r\n  }\r\n\r\n  const onFactionChange = ev => {\r\n    let currentFaction = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      factionVisibility: currentFaction\r\n    }));\r\n  }\r\n\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setMissionObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n const onLngChange = ev => {\r\n  let lng = ev.target.value;\r\n  setMissionObject((prevState) => ({\r\n    ...prevState,\r\n    missionPoint: {\r\n      x: lng,\r\n      y: missionObject.missionPoint.y\r\n    }\r\n  }));\r\n}\r\n\r\nconst onLatChange = ev => {\r\n  let lat = ev.target.value;\r\n  setMissionObject((prevState) => ({\r\n    ...prevState,\r\n    missionPoint: {\r\n      x: missionObject.missionPoint.x,\r\n      y: lat\r\n    }\r\n  }));\r\n}\r\n\r\n  function getCoordinates() {\r\n    let lngValue = localStorage.getItem(\"Lng: \")\r\n    let latValue = localStorage.getItem(\"Lat: \")\r\n\r\n    let lng = document.getElementById('p-lng');\r\n    lng.value = lngValue;\r\n\r\n    let lat = document.getElementById('p-lat');\r\n    lat.value = latValue;\r\n  }\r\n\r\n  function getLng() {\r\n    let copyText = document.getElementById(\"p-lng\");\r\n\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999);\r\n\r\n    document.execCommand(\"copy\");\r\n\r\n    alert(\"Copied the text: \" + copyText.value);\r\n  }\r\n\r\n  function getLat() {\r\n    let copyText = document.getElementById(\"p-lat\");\r\n\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999);\r\n\r\n    document.execCommand(\"copy\");\r\n\r\n    alert(\"Copied the text: \" + copyText.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <NavBar />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Create Mission Marker</h1>\r\n          <Form.Group>\r\n            <Form.Control type=\"text\" placeholder=\"Enter mission name\" onChange={onMissionNameChange} />\r\n            <br />\r\n            <Form.Control type=\"text\" placeholder=\"Mission description...\" onChange={onDescriptionChange} />\r\n            <br />\r\n            <label>Faction: </label>\r\n            <Form.Control as=\"select\" placeholder=\"Faction\" onChange={onFactionChange}>\r\n              <option>HUMAN</option>\r\n              <option>ZOMBIE</option>\r\n              <option>ALL</option>\r\n            </Form.Control>\r\n            <br />\r\n            <Form.Control type=\"text\" placeholder=\"Longitude\" onChange={onLngChange} />\r\n            <Form.Control type=\"text\" placeholder=\"Latitude\" onChange={onLatChange} />\r\n            <br />\r\n            <MainMap />\r\n            <input id=\"p-lng\" />\r\n            <button onClick={getLng}>Copy Lng</button>\r\n            <input id=\"p-lat\" />\r\n            <button onClick={getLat}>Copy Lat</button>\r\n            <br></br>\r\n            <button onClick={getCoordinates}>Get Coords</button>\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"Start time\"\r\n              type=\"datetime-local\"\r\n              defaultValue=\"2021-01-01T08:00\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onStartTimeChange}\r\n            />\r\n            <br />  <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"End time\"\r\n              type=\"datetime-local\"\r\n              defaultValue=\"2021-01-02T08:00\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onEndTimeChange}\r\n            />\r\n            <br /><br />\r\n            <Button disabled={!validMissionName || !validDescription} onClick={createMission}>Create</Button><Link to=\"/admin\"><Button>Cancel</Button></Link>\r\n            <br></br>\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateMissionMarker;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditMissionMarker.js",["253","254"],"import { TextField } from \"@material-ui/core\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DeleteMission, UpdateMission, FetchMission, FetchAllMissions } from '../../utils/missionStorage'\r\nimport MainMap from \"../MapComponents/MainMap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst EditMissionMarker = (props) => {\r\n\r\n    const [validMissionName, setValidMissionName] = useState(false);\r\n    const [validDescription, setValidDescription] = useState(true);\r\n    const [deleteMission, setDeleteMission] = useState(false);\r\n    const [allMissions, setAllMissions] = useState([])\r\n    const [selectedMissionId, setSelectedMissionId] = useState(null);\r\n    const [missionObject, setMissionObject] = useState({})\r\n\r\n    useEffect(() => {\r\n        fetchAllMissions();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedMissionId !== null) {\r\n            fetchMission()\r\n        }\r\n        else {\r\n            setMissionObject({})\r\n        }\r\n    }, [selectedMissionId]);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [missionObject]);\r\n\r\n    async function fetchAllMissions() {\r\n        let allMissions = await FetchAllMissions();\r\n        if (allMissions !== null) {\r\n            setAllMissions(allMissions);\r\n        } else {\r\n            alert('Failed to fetch missions');\r\n            setAllMissions([]);\r\n        }\r\n    }\r\n\r\n    async function fetchMission() {\r\n        let mission = await FetchMission(selectedMissionId);\r\n        if (mission !== null) {\r\n            setMissionObject(\r\n                {\r\n                    missionId: mission.missionId,\r\n                    name: mission.name,\r\n                    missionDescription: mission.missionDescription,\r\n                    factionVisibility: mission.factionVisibility,\r\n                    missionPoint: {\r\n                        x: mission.missionPoint.x,\r\n                        y: mission.missionPoint.y\r\n                    },\r\n                    missionState: mission.missionState,\r\n                    startTime: mission.startTime,\r\n                    endTime: mission.endTime\r\n                }\r\n            );\r\n        } else {\r\n            alert('Failed to fetch missions');\r\n            setMissionObject({});\r\n        }\r\n    }\r\n\r\n    async function editMission() {\r\n        let editMissionResponse = await UpdateMission(missionObject);\r\n        if (editMissionResponse.status === 200) {\r\n            props.history.push(\"/admin\");\r\n        } else if (editMissionResponse.status === 400) {\r\n            alert(\"Mission name must be unique!\");\r\n        } else {\r\n            alert(\"Something went wrong while updating the mission.\");\r\n        }\r\n    }\r\n\r\n    const onMissionNameChange = ev => {\r\n        let currentMissionName = ev.target.value;\r\n        if (currentMissionName.length < 4) {\r\n            setValidMissionName(false);\r\n        }\r\n        else {\r\n            setMissionObject((prevState) => ({\r\n                ...prevState,\r\n                name: currentMissionName\r\n            }));\r\n            setValidMissionName(true);\r\n        }\r\n        localStorage.setItem(\"Mission Name: \", ev.target.value)\r\n    }\r\n\r\n    const onDescriptionChange = ev => {\r\n        let currentDescription = ev.target.value;\r\n        if (currentDescription.length < 4) {\r\n            setValidDescription(false);\r\n        }\r\n        else {\r\n            setMissionObject((prevState) => ({\r\n                ...prevState,\r\n                missionDescription: currentDescription\r\n            }));\r\n            setValidDescription(true);\r\n        }\r\n    }\r\n\r\n    const onFactionChange = ev => {\r\n        let currentFaction = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            factionVisibility: currentFaction\r\n        }));\r\n    }\r\n\r\n\r\n    const onStartTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            startTime: time\r\n        }));\r\n    }\r\n\r\n    const onEndTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            endTime: time\r\n        }));\r\n    }\r\n\r\n    const onLngChange = ev => {\r\n        let lng = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            missionPoint: {\r\n                x: lng,\r\n                y: missionObject.missionPoint.y\r\n            }\r\n        }));\r\n    }\r\n\r\n    const onLatChange = ev => {\r\n        let lat = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            missionPoint: {\r\n                x: missionObject.missionPoint.x,\r\n                y: lat\r\n            }\r\n        }));\r\n    }\r\n\r\n    function getCoordinates() {\r\n        let lngValue = localStorage.getItem(\"Lng: \")\r\n        let latValue = localStorage.getItem(\"Lat: \")\r\n\r\n        let lng = document.getElementById('p-lng');\r\n        lng.value = lngValue;\r\n\r\n        let lat = document.getElementById('p-lat');\r\n        lat.value = latValue;\r\n    }\r\n\r\n    function getLng() {\r\n        let copyText = document.getElementById(\"p-lng\");\r\n\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n\r\n        document.execCommand(\"copy\");\r\n\r\n        alert(\"Copied the text: \" + copyText.value);\r\n    }\r\n\r\n    function getLat() {\r\n        let copyText = document.getElementById(\"p-lat\");\r\n\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n\r\n        document.execCommand(\"copy\");\r\n\r\n        alert(\"Copied the text: \" + copyText.value);\r\n    }\r\n    async function onDeleteClicked() {\r\n        let missionResponse = await DeleteMission(missionObject.missionId);\r\n        if (missionResponse === 200) {\r\n            props.history.push(\"/missions\");\r\n        } else {\r\n            console.log(\"Something went wrong when trying to delete the mission.\");\r\n        }\r\n    }\r\n\r\n    const onCheckBoxChanged = ev => {\r\n        setDeleteMission(!deleteMission);\r\n    }\r\n\r\n    function handleChangeMissionToUpdate(ev) {\r\n        let selectedMission = ev.target.value;\r\n        localStorage.setItem(\"Mission ID\", selectedMission)\r\n        if (selectedMission !== \"0\") {\r\n            setSelectedMissionId(selectedMission)\r\n            setMissionObject({})\r\n        }\r\n        else {\r\n            setSelectedMissionId(null);\r\n        }\r\n    }\r\n\r\n    function isEmpty(obj) {\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop))\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <NavBar />\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <h1>Edit Mission Marker</h1>\r\n                    <Form.Group>\r\n\r\n                        <Form.Control\r\n                            onChange={handleChangeMissionToUpdate}\r\n                            className=\"mb-4\"\r\n                            as=\"select\">\r\n                            <option value=\"0\">Select mission...</option>\r\n                            {allMissions.filter(mission => mission.factionVisibility !== 'ALL').map(filteredMission => (\r\n                                <option key={filteredMission.missionId} value={filteredMission.missionId}>\r\n                                    {filteredMission.name}\r\n                                </option>\r\n                            ))}\r\n                        </Form.Control>\r\n\r\n\r\n                        {selectedMissionId !== null && !isEmpty(missionObject) ?\r\n                            <div>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter mission name\" defaultValue={missionObject.name} onChange={onMissionNameChange} />\r\n                                <br />\r\n                                <Form.Control type=\"text\" placeholder=\"Mission description...\" defaultValue={missionObject.missionDescription} onChange={onDescriptionChange} />\r\n                                <br />\r\n                                <label>Faction: </label>\r\n                                <Form.Control as=\"select\" placeholder=\"Faction\" defaultValue={missionObject.factionVisibility} onChange={onFactionChange}>\r\n                                    <option>HUMAN</option>\r\n                                    <option>ZOMBIE</option>\r\n                                    <option>ALL</option>\r\n                                </Form.Control>\r\n                                <br />\r\n                                <Form.Control type=\"text\" placeholder=\"Longitude\" defaultValue={missionObject.missionPoint.x} onChange={onLngChange} />\r\n                                <Form.Control type=\"text\" placeholder=\"Latitude\" defaultValue={missionObject.missionPoint.y} onChange={onLatChange} />\r\n                                <br />\r\n                                <MainMap />\r\n                                <input id=\"p-lng\" />\r\n                                <button onClick={getLng}>Copy Lng</button>\r\n                                <input id=\"p-lat\" />\r\n                                <button onClick={getLat}>Copy Lat</button>\r\n                                <br></br>\r\n                                <button onClick={getCoordinates}>Get Coords</button>\r\n                                <br />\r\n                                <br />\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    label=\"Start time\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue={missionObject.startTime.substring(0, 16)}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    onChange={onStartTimeChange}\r\n                                />\r\n                                <br />  <br />\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    label=\"End time\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue={missionObject.endTime.substring(0, 16)}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    onChange={onEndTimeChange}\r\n                                />\r\n                                <br /><br />\r\n                                <Button disabled={!validMissionName || !validDescription} onClick={editMission}>Update Mission</Button>\r\n                                <Button disabled={!deleteMission} onClick={onDeleteClicked}>Delete Mission</Button>\r\n                                <Form.Group controlId=\"deleteMissionCheckbox\">\r\n                                    <Form.Check type=\"checkbox\" label=\"Delete Mission?\" onChange={onCheckBoxChanged} />\r\n                                </Form.Group>\r\n\r\n                            </div>\r\n                            : null}\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditMissionMarker;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Missions.js",["255","256","257"],"import { Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getPlayerInfo } from \"../../utils/gamedbstorage\";\r\nimport { FetchAllMissions } from '../../utils/missionStorage';\r\n\r\nconst Missions = (props) => {\r\n\r\n    const [missions, setMissions] = useState([]);\r\n    const [missionFilter, setmissionFilter] = useState('ALL');\r\n    let faction = localStorage.getItem(\"Faction\")\r\n\r\n    useEffect(() => {\r\n        fetchMissions();\r\n        getPlayerInfo();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [missionFilter])\r\n\r\n    async function fetchMissions() {\r\n        const missions = await FetchAllMissions();\r\n        if (missions != null) {\r\n            setMissions(missions);\r\n        } else {\r\n            setMissions([]);\r\n        }\r\n    }\r\n\r\n    function handlePreview(id) {\r\n        localStorage.setItem(\"Mission ID\", id);\r\n        props.history.push(\"/mission\");\r\n    }\r\n\r\n    const onFilterButtonClicked = ev => {\r\n        let filter = ev.target.value;\r\n        setmissionFilter(filter);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div>\r\n                    <h2>Current Missions</h2>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Mission</th>\r\n                                <th>Description</th>\r\n                                <th>Faction</th>\r\n                                <th>Start</th>\r\n                                <th>End</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {missions.map((m) =>\r\n                                <tr key={m.missionId}>\r\n                                    {m.name && m.factionVisibility === faction ? <td>{m.name}</td> : null}\r\n                                    {m.missionDescription && m.factionVisibility === faction ? <td>{m.missionDescription}</td> : null}\r\n                                    {m.factionVisibility  && m.factionVisibility === faction ? <td>{m.factionVisibility}</td> : null}\r\n                                    {m.startTime && m.factionVisibility === faction ? <td>{m.startTime}</td> : null}\r\n                                    {m.endTime && m.factionVisibility === faction ? <td>{m.endTime}</td> : null}\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    <br></br>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Missions;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\GameMap.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js",["258","259"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js",["260"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js",["261","262","263","264","265"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js",["266"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport GameMenu from './GameMenu';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n\r\n                <div id=\"gameMenu\"><GameMenu /></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js",["267","268","269","270"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Modal from './Modal';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { FetchPlayer } from '../../utils/PlayerStorage';\r\n\r\nconst BUTTON_WRAPPER_STYLES = {\r\n    position: 'relative',\r\n    zIndex: 1,\r\n    backgroundColor: 'rgb(221, 221, 221)',\r\n    height: '60px',\r\n    width: '60px'\r\n}\r\n\r\nconst BUTTON_STYLES = {\r\n    width: '150px',\r\n    height: '40px',\r\n    margin: '2px',\r\n    padding: '1px'\r\n}\r\n\r\nconst GameMenu = ({history}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let token = localStorage.getItem('jwt');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n    const [currentUser, setCurrentUser] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n        fetchCurrentUser();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = FetchPlayer(gameId, userId);\r\n        if (response !== null) {\r\n            setCurrentPlayer(response);\r\n        }else {\r\n            alert('Could not fetch current player.');\r\n            setCurrentPlayer({});\r\n        }\r\n    }\r\n\r\n\r\n    async function fetchCurrentUser() {\r\n        const response = await fetch('/api/fetch/useraccount/' + userId, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token \r\n            }\r\n        });\r\n        if (response.status === 200) {\r\n            let body = await response.json();\r\n            setCurrentUser(body);\r\n        } else {\r\n            alert(\"Could not find user object.\")\r\n            setCurrentUser({});\r\n        }\r\n    };\r\n\r\n\r\n    function handleBitePage() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        }\r\n    }\r\n\r\n    function showPosition(position) {\r\n        let currentLatitude = position.coords.latitude;\r\n        let currentLongitude = position.coords.longitude;\r\n        localStorage.setItem('Latitude', currentLatitude);\r\n        localStorage.setItem('Longitude', currentLongitude);\r\n        history.push('/bite');\r\n    }\r\n\r\n    if (currentUser.userType === 'PLAYER') {\r\n        return (\r\n            <div>\r\n                <div onClick={() => console.log(\"clicked\")}>\r\n                    <Button variant=\"dark\" onClick={() => setIsOpen(true)}>Menu</Button>\r\n                \r\n                    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n                        <Link to=\"landing\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Landing/Rules</div></Button>\r\n                        </Link>\r\n\r\n                        <Link to=\"map\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Map</div></Button>\r\n                        </Link>\r\n                        \r\n                        <Button variant=\"dark\" style={BUTTON_STYLES}>\r\n                            <div onClick={handleBitePage}>Bite</div>\r\n                        </Button>\r\n\r\n                        <Link to=\"chat\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Chat</div></Button>\r\n                        </Link>\r\n\r\n                        <Link to=\"squads\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Squads</div></Button>\r\n                        </Link>\r\n\r\n                        <Link to=\"squaddetails\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Squad Details</div></Button>\r\n                        </Link>\r\n\r\n                        <Link to=\"admin\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Admin</div></Button>\r\n                        </Link>\r\n                        <div>\r\n                            <Button variant=\"danger\" style={BUTTON_STYLES} onClick={handleSignOut}>Sign out</Button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div onClick={() => console.log(\"clicked\")}>\r\n                    <Button variant=\"dark\" onClick={() => setIsOpen(true)}>Menu</Button>\r\n                \r\n                    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n                        <Link to=\"admin\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Admin Tools</div></Button>\r\n                        </Link>\r\n\r\n                        <Link to=\"map\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Map</div></Button>\r\n                        </Link>\r\n\r\n                        <Link to=\"chat\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Chat</div></Button>\r\n                        </Link>\r\n\r\n                        <Link to=\"squads\">\r\n                            <Button variant=\"dark\" style={BUTTON_STYLES}><div>Squads</div></Button>\r\n                        </Link>\r\n                        <div>\r\n                            <Button variant=\"danger\" style={BUTTON_STYLES} onClick={handleSignOut}>Sign out</Button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter (GameMenu);","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js",["271","272"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\n\r\nconst HeaderOutside = () => {\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeaderOutside;","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js",["273"],"export async function getPlayerInfo() {\r\n    const token = localStorage.getItem('jwt');\r\n    const response = await fetch('/api/fetch/player/all', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n\r\n    const status = await response.status\r\n    if (status === 200) {\r\n        const user = await response.json()\r\n    }\r\n    return status;\r\n}","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js",["274","275","276"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js",["277","278"],"import { getBaseUrl } from \"./baseUrl\";\r\nconst token = localStorage.getItem('jwt');\r\n\r\nlet lng = localStorage.getItem('Current Position Lng: ')\r\nlet lat = localStorage.getItem('Current Position Lat: ')\r\n\r\n\r\nexport async function FetchAllGames() {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/game/all\";\r\n    const response = await fetch(url, {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function FetchGame(gameId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/game/\" + gameId;\r\n    const response = await fetch(url, {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport async function CreateGame(gameData) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"create/game\"\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            name: gameData.name,\r\n            gameState: gameData.gameState,\r\n            startTime: gameData.startTime,\r\n            nwPoint: {\r\n                \"x\": lng,\r\n                \"y\": lat\r\n            },\r\n            sePoint: {\r\n                \"x\": lng,\r\n                \"y\": lat\r\n            },\r\n            endTime: gameData.endTime,\r\n            maxNumberOfPlayers: gameData.maxNumberOfPlayers,\r\n            description: gameData.description\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function UpdateGame(gameData) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"/update/game/\" + gameData.gameId;\r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            name: gameData.name,\r\n            description: gameData.description,\r\n            gameState: gameData.gameState,\r\n            startTime: gameData.startTime,\r\n            endTime: gameData.endTime,\r\n            maxNumberOfPlayers: gameData.maxNumberOfPlayers,\r\n            description: gameData.description\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function DeleteGame(gameId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"delete/game/\" + gameId;\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    return response.status;\r\n}","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js",["279"],"import { getBaseUrl } from \"./baseUrl\";\r\nconst token = localStorage.getItem('jwt');\r\n\r\nexport async function FetchSquadMember(gameId, playerId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/squadmember/game=\" + gameId + \"/player=\" + playerId;\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function UpdateSquadMember(squadMemberId, squadId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let squadObject;\r\n    if (squadId === null) {\r\n        squadObject = null;\r\n    } else {\r\n        squadObject = {squadId: squadId}\r\n    }\r\n    let url = getBaseUrl() + \"update/squadmember/\" + squadMemberId; \r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            squad: squadObject,\r\n        })\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function CreateSquadMember(gameId, squadId, playerId, rank) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"create/squadmember/\" + gameId + \"/\"+ squadId + \"/\" + playerId;\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            squadRank: rank\r\n        })\r\n    });\r\n    if (response.status === 201) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\missionStorage.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js",["280","281","282","283","284","285","286","287"],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\squadCheckinStorage.js",["288"],"import { getBaseUrl } from \"./baseUrl\";\r\n\r\nexport async function FetchAllSquadCheckin() {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/squadcheckin/all\";\r\n    const response = await fetch(url, {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function FetchGame(squadCheckinId) {\r\n    let url = getBaseUrl() + \"fetch/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url);\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function CreateSquadCheckin(gameId, squadId, squadMemberId, currentTime, lng, lat) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"create/squadcheckin/\" + gameId + '/' + squadId + '/' + squadMemberId\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            pointOfTime: currentTime,\r\n            position: {\r\n                x: lng,\r\n                y: lat\r\n            },\r\n            gameId: gameId,\r\n            squadId: squadId,\r\n            squadMemberId: squadMemberId\r\n        })\r\n    })\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n    return response;\r\n}\r\n\r\nexport async function UpdateSquadCheckin(squadCheckinId, gameId, squadId, squadMemberId, currentTime, lng, lat) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"/update/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            pointOfTime: currentTime,\r\n            position: {\r\n                x: lng,\r\n                y: lat\r\n            },\r\n            gameId: gameId,\r\n            squadId: squadId,\r\n            squadMemberId: squadMemberId\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function DeleteSquadCheckin(squadCheckinId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"delete/squadcheckin/\" + squadCheckinId;\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n    });\r\n    return response.status;\r\n}","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js",[],"C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js",["289"],"import { getBaseUrl } from \"./baseUrl\";\r\nconst token = localStorage.getItem('jwt');\r\n\r\nexport async function GetAllChatMessages() {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/chatmessage/all\";\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function GetChatMessageById(chatMessageId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/chatmessage/\" + chatMessageId;\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function GetBundleOfChatMessages(request) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"fetch/chatmessage/bundle\";\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            gameId: request.gameId,\r\n            faction: request.faction,\r\n            squadId: request.squadId,\r\n        })\r\n    });\r\n    if (response.status === 200) {\r\n        let body = await response.json();\r\n        return body;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function CreateMessage(messageData) {\r\n    const token = localStorage.getItem('jwt');\r\n    let squadId = messageData.squadId;\r\n    if (squadId === 'null') {\r\n        squadId = 0;\r\n    }\r\n    let url = getBaseUrl() + \"create/chatmessage/\" + messageData.gameId + \"/\" + messageData.playerId + \"/\" + squadId;\r\n\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            message: messageData.message,\r\n            faction: messageData.faction,\r\n            timestamp: messageData.timestamp,\r\n            gameId: messageData.gameId,\r\n            squadId: messageData.squadId,\r\n        })\r\n    })\r\n    return response;\r\n}\r\n\r\nexport async function DeleteChatMessage(msgId) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"delete/chatmessage/\" + msgId;\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        }\r\n    });\r\n    return response.status;\r\n}\r\n\r\nexport async function UpdateChatMessage(messageData) {\r\n    const token = localStorage.getItem('jwt');\r\n    let url = getBaseUrl() + \"update/chatmessage/\" + messageData.chatMessageId;\r\n    const response = await fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + token \r\n        },\r\n        body: JSON.stringify({\r\n            message: messageData.message,\r\n        })\r\n    })\r\n    return response;\r\n}","C:\\Users\\Hampe\\OneDrive\\Dokument\\Github\\Humans-vs-zombies\\frontend\\src\\utils\\KillStorage.js",[],{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","severity":1,"message":"295","line":3,"column":42,"nodeType":"296","messageId":"297","endLine":3,"endColumn":48},{"ruleId":"294","severity":1,"message":"298","line":10,"column":10,"nodeType":"296","messageId":"297","endLine":10,"endColumn":19},{"ruleId":"299","severity":1,"message":"300","line":21,"column":8,"nodeType":"301","endLine":21,"endColumn":10,"suggestions":"302"},{"ruleId":"294","severity":1,"message":"303","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"304","line":5,"column":10,"nodeType":"296","messageId":"297","endLine":5,"endColumn":25},{"ruleId":"299","severity":1,"message":"305","line":28,"column":6,"nodeType":"301","endLine":28,"endColumn":24,"suggestions":"306"},{"ruleId":"299","severity":1,"message":"307","line":37,"column":6,"nodeType":"301","endLine":37,"endColumn":22,"suggestions":"308"},{"ruleId":"294","severity":1,"message":"309","line":10,"column":7,"nodeType":"296","messageId":"297","endLine":10,"endColumn":16},{"ruleId":"294","severity":1,"message":"310","line":5,"column":10,"nodeType":"296","messageId":"297","endLine":5,"endColumn":21},{"ruleId":"299","severity":1,"message":"311","line":40,"column":8,"nodeType":"301","endLine":40,"endColumn":10,"suggestions":"312"},{"ruleId":"299","severity":1,"message":"313","line":44,"column":8,"nodeType":"301","endLine":44,"endColumn":29,"suggestions":"314"},{"ruleId":"299","severity":1,"message":"315","line":48,"column":8,"nodeType":"301","endLine":48,"endColumn":23,"suggestions":"316"},{"ruleId":"294","severity":1,"message":"317","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"299","severity":1,"message":"318","line":14,"column":8,"nodeType":"301","endLine":14,"endColumn":10,"suggestions":"319"},{"ruleId":"294","severity":1,"message":"317","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"299","severity":1,"message":"311","line":32,"column":8,"nodeType":"301","endLine":32,"endColumn":10,"suggestions":"320"},{"ruleId":"299","severity":1,"message":"321","line":23,"column":8,"nodeType":"301","endLine":23,"endColumn":10,"suggestions":"322"},{"ruleId":"294","severity":1,"message":"323","line":60,"column":12,"nodeType":"296","messageId":"297","endLine":60,"endColumn":25},{"ruleId":"299","severity":1,"message":"318","line":64,"column":8,"nodeType":"301","endLine":64,"endColumn":10,"suggestions":"324"},{"ruleId":"294","severity":1,"message":"325","line":76,"column":12,"nodeType":"296","messageId":"297","endLine":76,"endColumn":23},{"ruleId":"299","severity":1,"message":"326","line":80,"column":8,"nodeType":"301","endLine":80,"endColumn":10,"suggestions":"327"},{"ruleId":"294","severity":1,"message":"328","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"294","severity":1,"message":"329","line":1,"column":28,"nodeType":"296","messageId":"297","endLine":1,"endColumn":36},{"ruleId":"294","severity":1,"message":"309","line":7,"column":7,"nodeType":"296","messageId":"297","endLine":7,"endColumn":16},{"ruleId":"294","severity":1,"message":"330","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":18},{"ruleId":"294","severity":1,"message":"331","line":7,"column":10,"nodeType":"296","messageId":"297","endLine":7,"endColumn":21},{"ruleId":"294","severity":1,"message":"332","line":26,"column":13,"nodeType":"296","messageId":"297","endLine":26,"endColumn":24},{"ruleId":"299","severity":1,"message":"333","line":29,"column":6,"nodeType":"301","endLine":29,"endColumn":22,"suggestions":"334"},{"ruleId":"335","severity":1,"message":"336","line":57,"column":11,"nodeType":"337","messageId":"338","endLine":57,"endColumn":22},{"ruleId":"294","severity":1,"message":"309","line":11,"column":7,"nodeType":"296","messageId":"297","endLine":11,"endColumn":16},{"ruleId":"294","severity":1,"message":"323","line":27,"column":10,"nodeType":"296","messageId":"297","endLine":27,"endColumn":23},{"ruleId":"299","severity":1,"message":"318","line":31,"column":6,"nodeType":"301","endLine":31,"endColumn":8,"suggestions":"339"},{"ruleId":"294","severity":1,"message":"309","line":10,"column":7,"nodeType":"296","messageId":"297","endLine":10,"endColumn":16},{"ruleId":"299","severity":1,"message":"340","line":42,"column":8,"nodeType":"301","endLine":42,"endColumn":27,"suggestions":"341"},{"ruleId":"294","severity":1,"message":"342","line":1,"column":10,"nodeType":"296","messageId":"297","endLine":1,"endColumn":16},{"ruleId":"294","severity":1,"message":"343","line":30,"column":14,"nodeType":"296","messageId":"297","endLine":30,"endColumn":27},{"ruleId":"294","severity":1,"message":"344","line":35,"column":11,"nodeType":"296","messageId":"297","endLine":35,"endColumn":32},{"ruleId":"294","severity":1,"message":"345","line":8,"column":10,"nodeType":"296","messageId":"297","endLine":8,"endColumn":19},{"ruleId":"294","severity":1,"message":"346","line":15,"column":9,"nodeType":"296","messageId":"297","endLine":15,"endColumn":15},{"ruleId":"299","severity":1,"message":"347","line":52,"column":8,"nodeType":"301","endLine":52,"endColumn":10,"suggestions":"348"},{"ruleId":"294","severity":1,"message":"317","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"299","severity":1,"message":"349","line":28,"column":8,"nodeType":"301","endLine":28,"endColumn":10,"suggestions":"350"},{"ruleId":"299","severity":1,"message":"351","line":73,"column":8,"nodeType":"301","endLine":73,"endColumn":10,"suggestions":"352"},{"ruleId":"294","severity":1,"message":"323","line":93,"column":12,"nodeType":"296","messageId":"297","endLine":93,"endColumn":25},{"ruleId":"299","severity":1,"message":"318","line":97,"column":8,"nodeType":"301","endLine":97,"endColumn":10,"suggestions":"353"},{"ruleId":"294","severity":1,"message":"303","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"317","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"294","severity":1,"message":"354","line":9,"column":7,"nodeType":"296","messageId":"297","endLine":9,"endColumn":28},{"ruleId":"294","severity":1,"message":"323","line":37,"column":12,"nodeType":"296","messageId":"297","endLine":37,"endColumn":25},{"ruleId":"299","severity":1,"message":"311","line":43,"column":8,"nodeType":"301","endLine":43,"endColumn":10,"suggestions":"355"},{"ruleId":"294","severity":1,"message":"303","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"356","line":9,"column":11,"nodeType":"296","messageId":"297","endLine":9,"endColumn":24},{"ruleId":"294","severity":1,"message":"357","line":12,"column":15,"nodeType":"296","messageId":"297","endLine":12,"endColumn":19},{"ruleId":"294","severity":1,"message":"358","line":30,"column":29,"nodeType":"296","messageId":"297","endLine":30,"endColumn":36},{"ruleId":"299","severity":1,"message":"359","line":53,"column":8,"nodeType":"301","endLine":53,"endColumn":10,"suggestions":"360"},{"ruleId":"299","severity":1,"message":"361","line":57,"column":8,"nodeType":"301","endLine":57,"endColumn":17,"suggestions":"362"},{"ruleId":"294","severity":1,"message":"363","line":2,"column":7,"nodeType":"296","messageId":"297","endLine":2,"endColumn":12},{"ruleId":"335","severity":1,"message":"336","line":86,"column":13,"nodeType":"337","messageId":"338","endLine":86,"endColumn":24},{"ruleId":"294","severity":1,"message":"363","line":2,"column":7,"nodeType":"296","messageId":"297","endLine":2,"endColumn":12},{"ruleId":"364","severity":1,"message":"365","line":43,"column":26,"nodeType":"366","messageId":"367","endLine":43,"endColumn":28},{"ruleId":"364","severity":1,"message":"365","line":71,"column":21,"nodeType":"366","messageId":"367","endLine":71,"endColumn":23},{"ruleId":"368","severity":1,"message":"369","line":80,"column":38,"nodeType":"370","messageId":"371","endLine":80,"endColumn":40},{"ruleId":"368","severity":1,"message":"369","line":80,"column":61,"nodeType":"370","messageId":"371","endLine":80,"endColumn":63},{"ruleId":"368","severity":1,"message":"369","line":84,"column":70,"nodeType":"370","messageId":"371","endLine":84,"endColumn":72},{"ruleId":"368","severity":1,"message":"369","line":84,"column":93,"nodeType":"370","messageId":"371","endLine":84,"endColumn":95},{"ruleId":"364","severity":1,"message":"365","line":99,"column":20,"nodeType":"366","messageId":"367","endLine":99,"endColumn":22},{"ruleId":"294","severity":1,"message":"372","line":134,"column":11,"nodeType":"296","messageId":"297","endLine":134,"endColumn":26},{"ruleId":"373","severity":1,"message":"374","line":56,"column":5,"nodeType":"375","messageId":"376","endLine":56,"endColumn":21},{"ruleId":"294","severity":1,"message":"363","line":2,"column":7,"nodeType":"296","messageId":"297","endLine":2,"endColumn":12},"no-native-reassign",["377"],"no-negated-in-lhs",["378"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'clearUser' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["379"],"'Link' is defined but never used.","'FetchAllPlayers' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchPlayer'. Either include it or remove the dependency array.",["380"],"React Hook useEffect has a missing dependency: 'fetchAllPlayersByGameId'. Either include it or remove the dependency array.",["381"],"'useStyles' is assigned a value but never used.","'FetchPlayer' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchCurrentPlayer' and 'fetchCurrentUser'. Either include them or remove the dependency array.",["382"],"React Hook useEffect has a missing dependency: 'fetchCurrentVictim'. Either include it or remove the dependency array.",["383"],"React Hook useEffect has a missing dependency: 'fetchCurrentVictimUser'. Either include it or remove the dependency array.",["384"],"'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCurrentPlayer'. Either include it or remove the dependency array.",["385"],["386"],"React Hook useEffect has missing dependencies: 'fetchCurrentUser' and 'fetchSquads'. Either include them or remove the dependency array.",["387"],"'currentPlayer' is assigned a value but never used.",["388"],"'squadMember' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSquadMember'. Either include it or remove the dependency array.",["389"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Redirect' is defined but never used.","'getUserInfo' is defined but never used.","'currentUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchGame'. Either include it or remove the dependency array.",["390"],"no-dupe-keys","Duplicate key 'description'.","ObjectExpression","unexpected",["391"],"React Hook useEffect has a missing dependency: 'fetchMission'. Either include it or remove the dependency array.",["392"],"'Button' is defined but never used.","'handlePreview' is defined but never used.","'onFilterButtonClicked' is assigned a value but never used.","'fetchUser' is defined but never used.","'userId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["393"],"React Hook useEffect has a missing dependency: 'fetchSquadMembers'. Either include it or remove the dependency array.",["394"],"React Hook useEffect has a missing dependency: 'fetchSquad'. Either include it or remove the dependency array.",["395"],["396"],"'BUTTON_WRAPPER_STYLES' is assigned a value but never used.",["397"],"'handleSignOut' is assigned a value but never used.","'user' is assigned a value but never used.","'request' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chatRoom', 'fetchMessages', 'gameId', 'playerFaction', 'playerId', 'props.history', and 'userId'. Either include them or remove the dependency array.",["398"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["399"],"'token' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'currentPosition' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"406","fix":"414"},{"desc":"415","fix":"416"},{"desc":"412","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"412","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"412","fix":"431"},{"desc":"406","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},"Update the dependencies array to be: [fetchCurrentUser]",{"range":"437","text":"438"},"Update the dependencies array to be: [fetchPlayer, selectedPlayerId]",{"range":"439","text":"440"},"Update the dependencies array to be: [fetchAllPlayersByGameId, selectedGameId]",{"range":"441","text":"442"},"Update the dependencies array to be: [fetchCurrentPlayer, fetchCurrentUser]",{"range":"443","text":"444"},"Update the dependencies array to be: [fetchCurrentVictim, validBiteCodeLength]",{"range":"445","text":"446"},"Update the dependencies array to be: [currentVictim, fetchCurrentVictimUser]",{"range":"447","text":"448"},"Update the dependencies array to be: [fetchCurrentPlayer]",{"range":"449","text":"450"},{"range":"451","text":"444"},"Update the dependencies array to be: [fetchCurrentUser, fetchSquads]",{"range":"452","text":"453"},{"range":"454","text":"450"},"Update the dependencies array to be: [fetchSquadMember]",{"range":"455","text":"456"},"Update the dependencies array to be: [fetchGame, selectedGameId]",{"range":"457","text":"458"},{"range":"459","text":"450"},"Update the dependencies array to be: [fetchMission, selectedMissionId]",{"range":"460","text":"461"},"Update the dependencies array to be: [props.history]",{"range":"462","text":"463"},"Update the dependencies array to be: [fetchSquadMembers]",{"range":"464","text":"465"},"Update the dependencies array to be: [fetchSquad]",{"range":"466","text":"467"},{"range":"468","text":"450"},{"range":"469","text":"444"},"Update the dependencies array to be: [chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",{"range":"470","text":"471"},"Update the dependencies array to be: [fetchMessages, refresh]",{"range":"472","text":"473"},[531,533],"[fetchCurrentUser]",[951,969],"[fetchPlayer, selectedPlayerId]",[1123,1139],"[fetchAllPlayersByGameId, selectedGameId]",[1731,1733],"[fetchCurrentPlayer, fetchCurrentUser]",[1800,1821],"[fetchCurrentVictim, validBiteCodeLength]",[1896,1911],"[currentVictim, fetchCurrentVictimUser]",[441,443],"[fetchCurrentPlayer]",[1079,1081],[971,973],"[fetchCurrentUser, fetchSquads]",[2109,2111],[2523,2525],"[fetchSquadMember]",[985,1001],"[fetchGame, selectedGameId]",[944,946],[1397,1416],"[fetchMission, selectedMissionId]",[2381,2383],"[props.history]",[984,986],"[fetchSquadMembers]",[2559,2561],"[fetchSquad]",[3172,3174],[1178,1180],[2291,2293],"[chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",[2355,2364],"[fetchMessages, refresh]"]