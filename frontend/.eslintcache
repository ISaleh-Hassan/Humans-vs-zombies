[{"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\index.js":"1","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\App.js":"2","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\container\\PlayerComponent.js":"4"},{"size":517,"mtime":1606999392896,"results":"5","hashOfConfig":"6"},{"size":340,"mtime":1606999392888,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1606999392896,"results":"8","hashOfConfig":"6"},{"size":2932,"mtime":1606999392888,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"pqs3e0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\index.js",[],["20","21"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\App.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\container\\PlayerComponent.js",["22","23","24"],"import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Form, Row, Col,Container } from 'react-bootstrap';\r\n\r\nconst PlayerComponent = () => {\r\n  const [data, upDateData] = React.useState([]);\r\n  const [firstLoad, setLoad] = React.useState(true);\r\n  const [player, setPlayerName] = useState(\"\");\r\n  const [validInput, setValidInput] = useState(false);\r\n  const [inlogged, setInlogged] = useState(false);\r\n  const [invalidInputMessage, setInvalidInputMessage] = useState('Please enter a username with atleast 3 characters.');\r\n  const [welcomeMessage, setWelcomeMessage] = useState('You are welcome ');\r\n\r\n  let isLoading = true;\r\n\r\n  const history = useHistory();\r\n\r\n  const onPlayerNameChanged = ev => {\r\n    let currentInput = ev.target.value;\r\n    setPlayerName(currentInput);\r\n    if (currentInput.length < 3) {\r\n      setValidInput(false);\r\n      setInvalidInputMessage('Please enter a username with atleast 3 characters.');\r\n    } else if (currentInput.length > 15) {\r\n      setValidInput(false);\r\n      setInvalidInputMessage('Username cannot exceed 15 characters in length.');\r\n    } else {\r\n      setValidInput(true);\r\n      for (let i = 0; i < currentInput.length; i++) {\r\n        let currentChar = currentInput[i];\r\n        if (!((currentChar >= 'a' && currentChar <= 'z') || (currentChar >= 'A' && currentChar <= 'Z'))) {\r\n          setValidInput(false);\r\n          setInvalidInputMessage('Error: username may only contain letters.');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async function getPlayers() {\r\n    let response = await fetch(\"http://localhost:8080/api/player\", {\r\n      method: 'GET',\r\n      mode: 'cors'\r\n    })\r\n\r\n    let body = await response.json();\r\n    upDateData(body);\r\n  }\r\n\r\n\r\n  function postPlayer() {\r\n    fetch(\"http://localhost:8080/api/create/player\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ name: player })\r\n    })\r\n\r\n    console.log(\"This player has been added \" + player)\r\n    setInlogged(true);\r\n  }\r\n\r\n  if (firstLoad) {\r\n    getPlayers();\r\n    setLoad(false);\r\n  }\r\n\r\n  if (data.length > 0) isLoading = false;\r\n\r\n  return (\r\n\r\n  <Container>\r\n     { !inlogged ? <Form className=\"m-5\">\r\n        <Row>\r\n          <Col sm={8}>\r\n            <Form.Group>\r\n              <Form.Control type=\"text\" placeholder=\"Enter a username\" onChange={onPlayerNameChanged} />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Button disabled={!validInput} type=\"button\" onClick={postPlayer} >Login</Button>\r\n            {!validInput ? <p>{invalidInputMessage}</p> : null}\r\n          </Col>\r\n        </Row>\r\n      </Form>: null}\r\n\r\n      { inlogged ? <h1>{ welcomeMessage  + player}</h1>: null}\r\n    </Container>\r\n    \r\n  )\r\n}\r\nexport default PlayerComponent;\r\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":13,"column":26,"nodeType":"31","messageId":"32","endLine":13,"endColumn":43},{"ruleId":"29","severity":1,"message":"33","line":17,"column":9,"nodeType":"31","messageId":"32","endLine":17,"endColumn":16},{"ruleId":"29","severity":1,"message":"34","line":69,"column":24,"nodeType":"31","messageId":"32","endLine":69,"endColumn":33},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'setWelcomeMessage' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'isLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]