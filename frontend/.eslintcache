[{"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\index.js":"1","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\App.js":"2","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js":"4","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js":"5","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js":"6","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js":"7","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js":"8","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js":"9","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js":"10","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js":"11","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js":"12","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js":"13","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js":"14","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js":"15","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js":"16","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js":"17","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js":"18","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js":"19","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js":"20","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js":"21","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js":"22","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js":"23","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js":"24","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js":"25","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js":"26","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js":"27","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js":"28","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js":"29","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js":"30","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js":"31","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js":"32","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js":"33","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js":"34","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js":"35","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js":"36","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js":"37","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js":"38","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditMissionMarker.js":"39","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js":"40","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js":"41","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js":"42","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\missionStorage.js":"43","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Missions.js":"44","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js":"45","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js":"46","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js":"47","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\GameMap.js":"48"},{"size":517,"mtime":1606999392896,"results":"49","hashOfConfig":"50"},{"size":3865,"mtime":1609247822772,"results":"51","hashOfConfig":"50"},{"size":375,"mtime":1606999392896,"results":"52","hashOfConfig":"50"},{"size":651,"mtime":1608055777032,"results":"53","hashOfConfig":"50"},{"size":577,"mtime":1608055765360,"results":"54","hashOfConfig":"50"},{"size":336,"mtime":1608625691474,"results":"55","hashOfConfig":"50"},{"size":4186,"mtime":1608625691428,"results":"56","hashOfConfig":"50"},{"size":2740,"mtime":1609233098449,"results":"57","hashOfConfig":"50"},{"size":1486,"mtime":1608625691424,"results":"58","hashOfConfig":"50"},{"size":1540,"mtime":1608625691432,"results":"59","hashOfConfig":"50"},{"size":6154,"mtime":1608712664741,"results":"60","hashOfConfig":"50"},{"size":786,"mtime":1609233098441,"results":"61","hashOfConfig":"50"},{"size":5254,"mtime":1609159583851,"results":"62","hashOfConfig":"50"},{"size":694,"mtime":1608304779952,"results":"63","hashOfConfig":"50"},{"size":2484,"mtime":1608647817985,"results":"64","hashOfConfig":"50"},{"size":1067,"mtime":1608304779964,"results":"65","hashOfConfig":"50"},{"size":1719,"mtime":1609246395524,"results":"66","hashOfConfig":"50"},{"size":1818,"mtime":1609246395533,"results":"67","hashOfConfig":"50"},{"size":4935,"mtime":1609246395529,"results":"68","hashOfConfig":"50"},{"size":11360,"mtime":1608712664755,"results":"69","hashOfConfig":"50"},{"size":6452,"mtime":1609246395547,"results":"70","hashOfConfig":"50"},{"size":3661,"mtime":1609248794025,"results":"71","hashOfConfig":"50"},{"size":5980,"mtime":1608734385957,"results":"72","hashOfConfig":"50"},{"size":5345,"mtime":1608734385961,"results":"73","hashOfConfig":"50"},{"size":820,"mtime":1608055777039,"results":"74","hashOfConfig":"50"},{"size":2194,"mtime":1608536297007,"results":"75","hashOfConfig":"50"},{"size":451,"mtime":1609233098472,"results":"76","hashOfConfig":"50"},{"size":547,"mtime":1608712664772,"results":"77","hashOfConfig":"50"},{"size":891,"mtime":1608304780024,"results":"78","hashOfConfig":"50"},{"size":675,"mtime":1608645886512,"results":"79","hashOfConfig":"50"},{"size":244,"mtime":1608712664783,"results":"80","hashOfConfig":"50"},{"size":8435,"mtime":1608734385949,"results":"81","hashOfConfig":"50"},{"size":85,"mtime":1608536296998,"results":"82","hashOfConfig":"50"},{"size":6003,"mtime":1609247562986,"results":"83","hashOfConfig":"50"},{"size":671,"mtime":1608625691467,"results":"84","hashOfConfig":"50"},{"size":3703,"mtime":1609246395555,"results":"85","hashOfConfig":"50"},{"size":860,"mtime":1608625691470,"results":"86","hashOfConfig":"50"},{"size":7994,"mtime":1609246395520,"results":"87","hashOfConfig":"50"},{"size":7762,"mtime":1609233098447,"results":"88","hashOfConfig":"50"},{"size":1325,"mtime":1608734385969,"results":"89","hashOfConfig":"50"},{"size":1587,"mtime":1608712664780,"results":"90","hashOfConfig":"50"},{"size":2394,"mtime":1609246395562,"results":"91","hashOfConfig":"50"},{"size":2170,"mtime":1609235378588,"results":"92","hashOfConfig":"50"},{"size":3787,"mtime":1609248456725,"results":"93","hashOfConfig":"50"},{"size":813,"mtime":1608734385947,"results":"94","hashOfConfig":"50"},{"size":1339,"mtime":1608734386059,"results":"95","hashOfConfig":"50"},{"size":183,"mtime":1608748599747,"results":"96","hashOfConfig":"50"},{"size":425,"mtime":1609248255735,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"pqs3e0",{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"100"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"100"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"100"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\index.js",[],["209","210"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\App.js",["211"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\Auth.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NotFound.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Register.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Login.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\Phone.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AuthComponents\\RegisterPhone.js",["212","213","214"],"import React, { useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../../utils/firebase.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { AuthContext } from \"../../utils/Auth.js\";\r\nimport { storePhone } from \"../../utils/dbstorage.js\";\r\nimport HeaderOutside from \"../StylingComponents/HeaderOutside\";\r\n\r\nconst RegisterPhone = ({ history }) => {\r\n\r\n    const handleRegister = async event => {\r\n        event.preventDefault();\r\n        const { phone } = event.target.elements;\r\n        storePhone(phone.value);\r\n    }\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <>\r\n            <HeaderOutside />\r\n            <section className=\"login-register\">\r\n                <div className=\"container\">\r\n                    <h1>Register Phone</h1>\r\n                    <Form onSubmit={handleRegister} name=\"loginForm\">\r\n                        <Form.Group controlId=\"formPhone\">\r\n                            <Form.Label>Phone Number: </Form.Label>\r\n                            <Form.Control name=\"phone\" type=\"tel\" required />\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Register</button>\r\n                        <Link to=\"/registerphone\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterPhone);","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditGame.js",["215"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { DeleteGame, FetchGame, UpdateGame } from \"../../utils/AdminDbStorge\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst EditGame = (props) => {\r\n  const [validGameName, setValidGameName] = useState(true);\r\n  const [validGameDescription, setValidGameDescription] = useState(true);\r\n  const [deleteGame, setDeleteGame] = useState(false);\r\n  const [gameObject, setGameObject] = useState(\r\n    {\r\n      gameId: null,\r\n      name: null,\r\n      gameState: null,\r\n      startTime: null,\r\n      endTime: null,\r\n      maxNumberOfPlayers: 0,\r\n      description: null\r\n    })\r\n\r\n  useEffect(() => {\r\n    loadGameDetails();\r\n  }, []);\r\n\r\n  async function loadGameDetails() {\r\n    const gameId = localStorage.getItem(\"Game ID\");\r\n    if (gameId != null) {\r\n      const game = await FetchGame(gameId);\r\n      setGameObject({\r\n        gameId: game.gameId,\r\n        name: game.name,\r\n        gameState: game.gameState,\r\n        startTime: game.startTime,\r\n        endTime: game.endTime,\r\n        maxNumberOfPlayers: game.maxNumberOfPlayers,\r\n        description: game.description,\r\n      })\r\n    } else {\r\n      alert(\"Game ID is null.\");\r\n    }\r\n  }\r\n\r\n  async function onUpdateClicked() {\r\n    if (validGameDescription === true && validGameName === true) {\r\n      let updateGameResponse = await UpdateGame(gameObject);\r\n      if (updateGameResponse.status === 200) {\r\n        props.history.push(\"/currentgames\");\r\n      } else if (updateGameResponse.status === 400) {\r\n        alert(\"Game name must be unique!\");\r\n      } else {\r\n        alert(\"Something went wrong while updating game information.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  async function onDeteleClicked() {\r\n    let deleteGameResponse = await DeleteGame(gameObject.gameId);\r\n    if (deleteGameResponse === 200) {\r\n      props.history.push(\"/currentgames\");\r\n    } else {\r\n      console.log(\"Something went wrong when trying to delete the game.\");\r\n    }\r\n  }\r\n\r\n  const onGameNameChange = ev => {\r\n    let currentGameName = ev.target.value;\r\n    if (currentGameName.length < 4) {\r\n      setValidGameName(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        name: currentGameName\r\n      }));\r\n      setValidGameName(true);\r\n    }\r\n  }\r\n\r\n  const onGameStateChange = ev => {\r\n    let currentState = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      gameState: currentState\r\n    }));\r\n  }\r\n\r\n  const onGameDescriptionChange = ev => {\r\n    let currentGameDescription = ev.target.value;\r\n    if (currentGameDescription.length < 4) {\r\n      setValidGameDescription(false);\r\n    }\r\n    else {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        description: currentGameDescription\r\n      }));\r\n      setValidGameDescription(true);\r\n    }\r\n  }\r\n\r\n  const onStartTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      startTime: time\r\n    }));\r\n  }\r\n\r\n  const onEndTimeChange = ev => {\r\n    let time = ev.target.value;\r\n    setGameObject((prevState) => ({\r\n      ...prevState,\r\n      endTime: time\r\n    }));\r\n  }\r\n\r\n  const onSizeChange = ev => {\r\n    let numPlayers = ev.target.value;\r\n    if (numPlayers > 0) {\r\n      setGameObject((prevState) => ({\r\n        ...prevState,\r\n        maxNumberOfPlayers: numPlayers\r\n      }));\r\n    }\r\n  }\r\n\r\n  const onCheckBoxChanged = ev => {\r\n    setDeleteGame(!deleteGame);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <NavBar />\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <h1>Edit Game</h1>\r\n          <br />\r\n          <Form.Group>\r\n            <Form.Control type=\"text\" placeholder={gameObject.name} onChange={onGameNameChange} />\r\n            <br />\r\n            <Form.Control as=\"select\" placeholder=\"Gamestate\" onChange={onGameStateChange}>\r\n              <option>PREPARATION</option>\r\n              <option>IN_PROGRESS</option>\r\n              <option>COMPLETED</option>\r\n            </Form.Control>\r\n            <br />\r\n            <Form.Control placeholder={gameObject.description} as=\"textarea\" rows={3} onChange={onGameDescriptionChange} />\r\n            <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"Start time\"\r\n              type=\"datetime-local\"\r\n              defaultValue={gameObject.startTime}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onStartTimeChange}\r\n            />\r\n            <br />  <br />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"End time\"\r\n              type=\"datetime-local\"\r\n              defaultValue={gameObject.endTime}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={onEndTimeChange}\r\n            />\r\n            <br />\r\n\r\n            <br />\r\n            <Form.Control type=\"number\" size=\"sm\" onChange={onSizeChange} placeholder={gameObject.maxNumberOfPlayers}>\r\n\r\n            </Form.Control>\r\n            <br /> <br />\r\n            <Button disabled={!validGameName || !validGameDescription} onClick={onUpdateClicked}>Update Game</Button>\r\n            <Button disabled={!deleteGame} onClick={onDeteleClicked}>Delete Game</Button>\r\n            <Form.Group controlId=\"deleteGameCheckbox\">\r\n              <Form.Check type=\"checkbox\" label=\"Delete game?\" onChange={onCheckBoxChanged} />\r\n            </Form.Group>\r\n          </Form.Group>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditGame;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\Admin.js",["216"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\n\r\nconst Admin = () => {\r\n\r\n  return (\r\n    <>\r\n      <section className=\"home\">\r\n        <div className=\"container\">\r\n          <Header />\r\n          <GameMenu />\r\n          <h1>Admin</h1>\r\n          <Link to=\"/creategame\">Create Game</Link>\r\n          <Link to=\"/editgame\">Edit Game</Link>\r\n          <Link to=\"#\">Edit Player State</Link>\r\n          <Link to=\"/create/missionmarker\">Create Mission Marker</Link>\r\n          <Link to=\"/edit/missionmarker\">Edit Mission Marker</Link>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Admin;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\AdminCreateGame.js",["217"],"import React, { useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { CreateGame } from \"../../utils/GameStorage\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GameMenu from \"../StylingComponents/GameMenu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst AdminCreateGame = (props) => {\r\n    const [validGameName, setValidGameName] = useState(false);\r\n    const [validGameDescription, setValidGameDescription] = useState(false);\r\n    const [gameObject, setGameObject] = useState(\r\n        {\r\n            name: \"\",\r\n            gameState: \"PREPARATION\",\r\n            startTime: \"2021-01-01T08:00:00.000+00:00\",\r\n            endTime: \"2021-01-02T08:00:00.000+00:00\",\r\n            maxNumberOfPlayers: 50,\r\n            description: \"\"\r\n        })\r\n\r\n    async function createGame() {\r\n        if (validGameDescription === true && validGameName === true) {\r\n            let createGameResponse = await CreateGame(gameObject);\r\n            if (createGameResponse.status === 201) {\r\n                props.history.push(\"/currentgames\");\r\n            } else if (createGameResponse.status === 400) {\r\n                alert(\"Game name must be unique!\");\r\n            } else {\r\n                alert(\"Something went wrong while creating the game.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const onGameNameChange = ev => {\r\n        let currentGameName = ev.target.value;\r\n        if (currentGameName.length < 4) {\r\n            setValidGameName(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                name: currentGameName\r\n            }));\r\n            setValidGameName(true);\r\n        }\r\n    }\r\n\r\n    const onGameDescriptionChange = ev => {\r\n        let currentGameDescription = ev.target.value;\r\n        if (currentGameDescription.length < 4) {\r\n            setValidGameDescription(false);\r\n        }\r\n        else {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                description: currentGameDescription\r\n            }));\r\n            setValidGameDescription(true);\r\n        }\r\n    }\r\n\r\n    const onStartTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            startTime: time\r\n        }));\r\n    }\r\n\r\n    const onEndTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setGameObject((prevState) => ({\r\n            ...prevState,\r\n            endTime: time\r\n        }));\r\n    }\r\n\r\n    const onSizeChange = ev => {\r\n        let numPlayers = ev.target.value;\r\n        if (numPlayers > 0) {\r\n            setGameObject((prevState) => ({\r\n                ...prevState,\r\n                maxNumberOfPlayers: numPlayers\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <GameMenu />\r\n                    <h1>Create game</h1>\r\n                    <br />\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter game name...\" onChange={onGameNameChange} />\r\n                        <br />\r\n                        <Form.Control placeholder=\"Enter game description...\" as=\"textarea\" rows={3} onChange={onGameDescriptionChange} />\r\n                        <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"Start time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-01T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onStartTimeChange}\r\n                        />\r\n                        <br />  <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"End time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-02T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onEndTimeChange}\r\n                        />\r\n                        <br />\r\n\r\n                        <br />\r\n                        <Form.Control type=\"number\" size=\"sm\" onChange={onSizeChange} placeholder=\"Max number of players...\">\r\n\r\n                        </Form.Control>\r\n                        <br /> <br />\r\n                        <Button disabled={!validGameName || !validGameDescription} onClick={createGame}>Create</Button>\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\nexport default AdminCreateGame;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\PlayerState.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteHuman.js",["218","219"],"import React, { Component, useEffect, useState } from 'react';\r\nimport Header from '../StylingComponents/Header';\r\n\r\nconst BiteHuman = ({history}) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const response = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId)).json();\r\n        setCurrentPlayer(response);\r\n    }\r\n\r\n\r\n    if (currentPlayer.faction === 'HUMAN') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{currentPlayer.biteCode}</div>\r\n            </div>\r\n        )\r\n    } else if (currentPlayer.faction === 'ZOMBIE') {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div id=\"codeEntryContainer\">\r\n                    <h2>BITE CODE ENTRY</h2>\r\n                    <input type=\"text\" placeholder=\"CODE-HERE\" />\r\n                    <br/>\r\n                    <button>Make Zombie</button>\r\n                    <button>Kill</button>\r\n                </div>\r\n        \r\n                <br/>\r\n        \r\n                <div id=\"killContainer\">\r\n                    <input type=\"text\" placeholder=\"Coordinates (auto)\" />\r\n                    <br/>\r\n                    <input type=\"text\" placeholder=\"Victim Description\" />\r\n                    <br/>\r\n                    <button>Submit</button>\r\n                    <button>Cancel</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h3>Something went wrong...</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BiteHuman;\r\n\r\n\r\n\r\n\r\n/* class BiteHuman extends Component {\r\n\r\n    state = {\r\n        details: []\r\n    };\r\n\r\n    componentDidMount() {\r\n      fetch('/api/fetch/player/1')\r\n          .then(res => res.json())\r\n          .then((data) => {\r\n              this.setState({details: data})\r\n          })\r\n          .catch(console.log);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <h2>BITE CODE</h2>\r\n                <div id=\"biteHuman\">{this.state.details.biteCode}</div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BiteHuman; */","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\BiteZombie.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\ChooseFaction.js",["220"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\Home.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\CurrentGames.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\HomeComponents\\LandingPage.js",["221","222","223"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\nimport ChatMessage from '../ChatMessageComponents/ChatMessage'\r\nimport MenuTest from '../StylingComponents/GameMenu';\r\n\r\nclass LandingPage extends Component {\r\n\r\n    state = {\r\n        details: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        let gameId = localStorage.getItem('Game ID');\r\n        fetch('/api/fetch/game/' + gameId)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ details: data })\r\n            })\r\n            .catch(console.log);\r\n    };\r\n\r\n    // Need to remove the game id from the current player in the database as well\r\n    handleLeaveGame() {\r\n        localStorage.removeItem('Game ID');\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <section className=\"home\">\r\n                    <div className=\"container\">\r\n                        <div id=\"landing\">\r\n                            <h2> {this.state.details.name}\r\n                                {console.log(this.state.details)} </h2>\r\n                            <div id=\"description\">\r\n                                <br />\r\n                                <h3>Description: </h3>\r\n                                <p> {this.state.details.description} </p>\r\n                                <br />\r\n                                <h4>Start Time: {this.state.details.startTime}\r\n                                    <br />\r\n                            End Time: {this.state.details.endTime}\r\n                                </h4>\r\n                                <br />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <Link to=\"/currentgames\">\r\n                                <button onClick={this.handleLeaveGame}>Leave Game</button>\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <div id=\"rules\">\r\n                            <br />\r\n                            <h3>Rules: </h3>\r\n                            <div>\r\n                                <h4>Overview</h4>\r\n                                <ul>\r\n                                    <li>Humans vs. Zombies is a game of tag.</li>\r\n                                    <li>All players begin as humans, and one is randomly chosen to be the “Original Zombie”.</li>\r\n                                    <li>The Original Zombie tags human players and turns them into zombies.</li>\r\n                                    <li>Zombies must tag and eat a human every 24 hours or they starve to death and are out of the game.</li>\r\n                                </ul>\r\n                                <br />\r\n\r\n                                <h4>Objective</h4>\r\n                                <ul>\r\n                                    <li>The Zombies win when all human players have been tagged and turned into zombies.</li>\r\n                                    <li>The Humans win by surviving long enough for all of the zombies to starve.</li>\r\n                                </ul>\r\n                                <br />\r\n\r\n                                <h4>Equipment</h4>\r\n                                <ul>\r\n                                    <li>Bandana</li>\r\n                                    <li>Foam Dart Blaster (aka Nerf Gun)</li>\r\n                                    <li>Marshmallow Launcher</li>\r\n                                    <li>Rolled up (CLEAN) socks</li>\r\n                                </ul>\r\n                                <br />\r\n\r\n                                <h4>Safe Zones</h4>\r\n                                <p>Some areas on campus are “no play zones,” where the game is permanently suspended. Blasters must be concealed and no players may be stunned or tagged. </p>\r\n                                <br />\r\n                                <p>These areas include:</p>\r\n                                <ul>\r\n                                    <li>Bathrooms</li>\r\n                                    <li>Health Centers</li>\r\n                                    <li>Libraries</li>\r\n                                    <li>Indoor Athletic Facilities</li>\r\n                                    <li>Academic Buildings</li>\r\n                                </ul>\r\n                                <br />\r\n                                <p>Other areas on campus are merely \"safe zones\", where gameplay continues but humans can't be tagged (unless a zombie has both of their feet outside the safe zone). These areas include: Dorm rooms and Dining Halls</p>\r\n                                <br />\r\n\r\n                                <h4>Safety Rules</h4>\r\n                                <p>Rules created for the safety of all players are strictly enforced. Violation of safety rules will result in a ban from the game.</p>\r\n                                <br />\r\n                                <ul>\r\n                                    <li>No realistic looking weaponry. Blasters must be brightly colored and have blaze-orange tips.</li>\r\n                                    <li>Blasters may not be visible inside of academic buildings or jobs on campus.</li>\r\n                                    <li>Players may not use cars or play where there is traffic.</li>\r\n                                    <li>Socks, Darts or Marshmallows must not hurt on impact.</li>\r\n                                </ul>\r\n                                <br />\r\n\r\n                                <h4>Human Rules</h4>\r\n                                <ul>\r\n                                    <li>Wearing a Bandanna: Humans must wear a headband around an arm or leg to identify them as players of the game. (This headband will come in handy when you become a zombie!)</li>\r\n                                    <li>Stunning a Zombie: Humans may stun a Zombie for 15 minutes by blasting them with a blaster or throwing a sock at them.</li>\r\n                                    <li>When Tagged By a Zombie: When tagged by a Zombie, a Human is required to distribute their ID card. One hour after being tagged, tie your bandanna around your head – you are now a member of the Zombie team! Go tag some Humans.</li>\r\n                                    <li>Staying On Campus: Humans must sleep on campus. If you need to leave campus for longer than 24 hours, contact the game moderators and remove yourself from the game.</li>\r\n                                </ul>\r\n                                <br />\r\n\r\n                                <h4>Zombie Rules</h4>\r\n                                <ul>\r\n                                    <li>Feeding: Zombies must feed every 24 hours. A zombie feeds by reporting their tag on the app.</li>\r\n                                    <li>Tagging: A tag is a firm touch to any part of a Human. After tagging a Human the Zombie must collect their Bite Code and report it in the app.</li>\r\n                                    <li>Getting Shot: When hit with a dart, a marshmallow, or a sock, a Zombie is stunned for 15 minutes. A stunned zombie may not interact with the game in any way. This includes shielding other zombies from bullets or continuing to run toward a human. If shot while stunned, the zombie’s stun timer is reset back to 15 minutes.</li>\r\n                                    <li>Wearing A Headband: Zombies must wear a bandanna around their heads at all times. The Original Zombie does not need to wear a headband.</li>\r\n                                </ul>\r\n                                <br />\r\n\r\n                                <h4>Other Rules</h4>\r\n                                <ul>\r\n                                    <li>Blasting Non-Players: Blasting non-players is a bannable offense.</li>\r\n                                    <li>Non-Player Interference: People who are not registered participants may not directly interact with the game. This includes bringing food to humans or spying for either team.</li>\r\n                                    <li>Safe Zones: A zombie must have both feet outside of a safe zone to tag a human. Humans can stun zombies from inside of a safe-zone.</li>\r\n                                    <li>No Shields: Zombies may not use shields to deflect foam darts, marshmallows or socks.</li>\r\n                                    <li>Athletes: Athletes are safe during official practices, but not on the way to or from practice.</li>\r\n                                    <li>Required Academic Events: Similarly, students at required academic events are safe for the duration of the event (even if this event is in a free-play zone), but they are not safe on the way to or from the event.</li>\r\n                                </ul>\r\n                                <br />\r\n\r\n                                <h4>DBag Clause</h4>\r\n                                <p>Don’t be a douchebag. Everyone plays Humans vs. Zombies to have fun, and the rules of HvZ only exist because we agree they do. That’s why the most important rule of Humans vs. Zombies is to treat your fellow players with respect, and gracefully accept when you have been tagged or stunned.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandingPage;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadDetail.js",["224","225","226","227","228","229","230"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\MapComponents\\MainMap.js",["231","232"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadCreate.js",["233","234","235"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\nimport { storeSquadDB } from '../../utils/squadstorage';\r\n\r\nconst SquadCreate = ({ history }) => {\r\n\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let hasSquadMemberObject = localStorage.getItem('SquadMember ID');\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    // The userId doesn't work properly (it only works with the dummy data), so we can't fetch the current player\r\n    async function fetchCurrentPlayer() {                                                                    // user should be set to userId, not 1\r\n        const playerResponse = await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId);\r\n        let body;\r\n        if (playerResponse.status === 200) {\r\n            body = await playerResponse.json();\r\n        } else {\r\n            body = null;\r\n        }\r\n        setCurrentPlayer(body);\r\n    }\r\n\r\n    localStorage.setItem('Faction', currentPlayer.faction);\r\n\r\n    async function handleCreateSquad(event) {\r\n        event.preventDefault();\r\n\r\n        const { squadName, squadMemberAmount } = event.target.elements;\r\n        console.log(squadName.value, squadMemberAmount.value)\r\n        let createSquadRepsonse = await storeSquadDB(squadName.value, currentPlayer.faction, squadMemberAmount.value);\r\n\r\n        if (createSquadRepsonse === 201) {\r\n            let squadMemberExists = await fetch('/api/fetch/squadmember/game=' + gameId + '/player=' + playerId);\r\n            let newSquadId = localStorage.getItem('Squad ID');\r\n            if (squadMemberExists.status === 200) {\r\n                let response = await fetch('/api/update/squadmember/' + hasSquadMemberObject, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squad: {\r\n                            squadId: newSquadId\r\n                        },\r\n                        squadRank: \"LEADER\",\r\n                        squadMemberId: hasSquadMemberObject\r\n                    })\r\n                });\r\n                let body = await response.json();\r\n                localStorage.setItem('SquadMember ID', body.squadMemberId);\r\n\r\n                history.push('/squaddetails/');\r\n            } else if (squadMemberExists.status === 404) {\r\n                let newSquadId = localStorage.getItem('Squad ID');\r\n                let response = await fetch('/api/create/squadmember/' + gameId + '/' + newSquadId + '/' + playerId, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        playerId: playerId,\r\n                        gameId: gameId,\r\n                        squadId: squadId,\r\n                        squadRank: \"LEADER\"\r\n                    })\r\n                });\r\n                if (response.status === 201) {\r\n                    let body = await response.json();\r\n                    localStorage.setItem('SquadMember ID', body.squadMemberId);\r\n                    localStorage.setItem('Squad Rank', 'LEADER');\r\n                } else {\r\n                    alert(\"Failed to create squad member!\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // function handleSquadName() {\r\n    //     console.log(document.getElementById('squadName').value);\r\n    //     localStorage.setItem('squadName', (document.getElementById('squadName').value));\r\n    // }\r\n\r\n    // function handleSquadMemberAmount() {\r\n    //     console.log(document.getElementById('squadMemberAmount').value);\r\n    //     localStorage.setItem('squadMemberAmount', (document.getElementById('squadMemberAmount').value));\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"container\">\r\n                <div id=\"squadCreateForm\">\r\n                    <h2>Create Squad\r\n                    {console.log(currentPlayer)}\r\n                    </h2>\r\n                    <Form onSubmit={handleCreateSquad}>\r\n                        <Form.Group controlId=\"formSquadName\">\r\n                            {/* <Form.Label>Squad Name: </Form.Label> */}\r\n                            <Form.Control id=\"squadName\" name=\"squadName\" type=\"text\" placeholder=\"Squad Name\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadMemberLimit\">\r\n                            {/* <Form.Label>Squad Member Amount: </Form.Label> */}\r\n                            <Form.Control id=\"squadMemberAmount\" name=\"squadMemberAmount\" type=\"text\" placeholder=\"Squad Members (XX max)\" required></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formSquadFaction\">\r\n                            {/* <Form.Label>Squad Faction: </Form.Label> */}\r\n                            <Form.Control name=\"squadFaction\" type=\"text\" value={currentPlayer.faction} required></Form.Control>\r\n                        </Form.Group>\r\n                        <button type=\"submit\">Create</button>\r\n                        <Link to=\"squads\">\r\n                            <button>Cancel</button>\r\n                        </Link>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadCreate","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\SquadComponents\\SquadList.js",["236","237","238","239","240","241"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { CreateSquadMember, UpdateSquadMember } from '../../utils/SquadMemberStorage';\r\nimport GameMenu from '../StylingComponents/GameMenu';\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from '../StylingComponents/NavBar';\r\n\r\nconst SquadList = ({ history }) => {\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let userId = localStorage.getItem('User ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let storageSquadId = localStorage.getItem('Squad ID');\r\n    let squadMemberId = localStorage.getItem('SquadMember ID');\r\n    let currentFaction = localStorage.getItem('Faction');\r\n\r\n    const [squads, setSquads] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquads();\r\n    }, [])\r\n\r\n    async function fetchSquads() {\r\n        const squadResponse = await fetch('/api/fetch/squad/details/game=' + gameId);\r\n        let body;\r\n        if (squadResponse.status === 200) {\r\n            body = await squadResponse.json();\r\n        } else {\r\n            body = [];\r\n        }\r\n        setSquads(body);\r\n    }\r\n\r\n\r\n    const [currentPlayer, setCurrentPlayer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchCurrentPlayer();\r\n    }, [])\r\n\r\n    async function fetchCurrentPlayer() {\r\n        const playerResponse = await (await fetch('/api/fetch/player/game=' + gameId + '/user=' + userId));\r\n        setCurrentPlayer(playerResponse);\r\n    }\r\n\r\n\r\n    const [squadMember, setSquadMember] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSquadMember();\r\n    }, [])\r\n\r\n    async function fetchSquadMember() {\r\n        const response = await (await fetch('/api/fetch/squadmember/game=' + gameId + '/player=' + playerId));\r\n        setSquadMember(response);\r\n    }\r\n\r\n    async function handleJoinSquad(squadId) {\r\n        if (squadMemberId === 'null') {\r\n            //Player do not have a SquadMember Object yet. Create one.\r\n            let response = await CreateSquadMember(gameId, squadId, playerId, 'MEMBER');\r\n            if (response !== null) {\r\n                localStorage.setItem('Squad ID', response.squadId);\r\n                localStorage.setItem('SquadMember ID', response.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'MEMBER');\r\n                history.push('squaddetails');\r\n            } else {\r\n                alert('Failed to join squad! Post failed.');\r\n            }\r\n        } else if (storageSquadId === 'null') {\r\n            //Player has a SquadMember Object but is not assigned to a squad yet. Patch it.\r\n            let response = await UpdateSquadMember(squadMemberId, squadId);\r\n            if (response !== null) {\r\n                localStorage.setItem('Squad ID', response.squadId);\r\n                localStorage.setItem('SquadMember ID', response.squadMemberId);\r\n                localStorage.setItem('Squad Rank', 'MEMBER');\r\n                history.push('/squaddetails');\r\n            } else {\r\n                alert('Failed to join squad! Patch failed.');\r\n                console.log(response);\r\n            }\r\n        } else {\r\n            //Player is already a member of a squad. Prompt them to leave squad before trying again.\r\n            alert('You are already in a squad. Leave current squad and try again.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <h1>Active Squads</h1>\r\n                    <div>\r\n                        {console.log(\"This is the current player: \\n\" + currentPlayer)}\r\n                        {console.log(\"This is the current squad member: \\n\" + squadMember)}\r\n                    </div>\r\n\r\n                    {/* <div>\r\n                        <button type=\"button\" onClick={assignSquadMemberId}>ASSIGN SM ID</button>\r\n                    </div> */}\r\n\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Members</th>\r\n                                <th>Faction</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {squads.map((s) =>\r\n                                <tr>\r\n                                    <td>{s.squadName}</td>\r\n                                    <td>{s.numberOfRegisteredMembers} / {s.maxNumberOfMembers}</td>\r\n                                    <td>{s.faction}</td>\r\n                                    <td>\r\n                                        <button type=\"button\" disabled={s.faction !== currentFaction || s.numberOfRegisteredMembers >= s.maxNumberOfMembers} onClick={() => handleJoinSquad(s.squadId)}>JOIN</button>\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <br />\r\n                    <Link to=\"createsquad\">\r\n                        <button>Create New Squad</button>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SquadList;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\firebase.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\dbstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\localstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Header.js",["242"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport GameMenu from './GameMenu';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n\r\n                <div id=\"gameMenu\">\r\n                    <GameMenu />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\NavBar.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\squadstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\gamedbstorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\ChatMessage.js",["243","244","245"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ButtonGroup, Button, Form } from 'react-bootstrap';\r\nimport { CreateMessage, GetBundleOfChatMessages } from '../../utils/ChatMessageStorage';\r\nimport { ThemeProvider, ChatList, ChatListItem, Avatar, Column, Subtitle, Row, Title, IconButton, SendIcon } from '@livechat/ui-kit'\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst ChatMessage = props => {\r\n\r\n    let userId = localStorage.getItem('User ID');\r\n    let gameId = localStorage.getItem('Game ID');\r\n    let playerId = localStorage.getItem('Player ID');\r\n    let squadId = localStorage.getItem('Squad ID');\r\n    let playerFaction = localStorage.getItem('Faction');\r\n\r\n    const [chatRoom, setChatRoom] = useState('ALL');\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [chatMessages, setChatMessages] = useState([]);\r\n    const [validInput, setValidInput] = useState(false);\r\n\r\n\r\n    // const [timestamp, setTimeStamp] = useState(getTime());\r\n    // const [playerData, setPlayerData] = useState(null);\r\n    // const [playerSquadId, setPlayerSquadId] = useState(localStorage.getItem('Squad ID'));\r\n    // const [msgObject, setMsgObject] = useState(\r\n    //     {\r\n    //         gameId: localStorage.getItem('Game ID'),\r\n    //         playerId: localStorage.getItem('Player ID'),\r\n    //         squadId: localStorage.getItem('Squad ID'),\r\n    //         message: '',\r\n    //         faction: 'ALL',\r\n    //         timestamp: timestamp\r\n    //     })\r\n\r\n    useEffect(() => {\r\n        if (userId !== 'null' && userId !== null) {\r\n            if (playerId !== 'null' && playerId !== null) {\r\n                if (gameId !== 'null' && gameId !== null) {\r\n                    if (playerFaction !== 'null' && playerFaction !== null) {\r\n                        let request = {\r\n                            gameId: gameId,\r\n                            playerId: playerId,\r\n                            squadId: null,\r\n                            faction: chatRoom\r\n                        }\r\n                        fetchMessages(request);\r\n                    } else {\r\n                        alert('Faction missing.');\r\n                        props.history.push(\"/landing\");\r\n                    }\r\n                } else {\r\n                    alert('Game ID missing.');\r\n                    props.history.push(\"/landing\");\r\n                }\r\n            } else {\r\n                alert('Player ID missing.');\r\n                props.history.push(\"/landing\");\r\n            }\r\n        } else {\r\n            alert('User ID missing.');\r\n            props.history.push(\"/landing\");\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchMessages();\r\n    }, [refresh])\r\n\r\n    useInterval(() => {\r\n        fetchMessages()\r\n    }, 5000);\r\n\r\n    function useInterval(callback, delay) {\r\n        const savedCallback = useRef();\r\n\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    async function fetchMessages() {\r\n        let request;\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: null,\r\n                    faction: 'ALL'\r\n                }\r\n                break;\r\n            case 'FACTION':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: null,\r\n                    faction: playerFaction\r\n                }\r\n                break;\r\n            case 'SQUAD':\r\n                request = {\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: squadId,\r\n                    faction: playerFaction\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        let messages = await GetBundleOfChatMessages(request);\r\n        if (messages !== null) {\r\n            setChatMessages(messages);\r\n        } else {\r\n            alert('Failed to fetch messages');\r\n            setChatMessages([]);\r\n        }\r\n    }\r\n\r\n    function selectChatRoom(ev) {\r\n        let room = ev.target.value;\r\n        setChatRoom(room);\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onMsgChanged = ev => {\r\n        let currentInput = ev.target.value;\r\n        if (currentInput.length < 1) {\r\n            setValidInput(false);\r\n        }\r\n        else {\r\n            setValidInput(true);\r\n        }\r\n        setMessage(currentInput);\r\n    }\r\n\r\n    const prepareMessageObject = (ev) => {\r\n        let msgObject;\r\n        let time = new Date().getTime();\r\n        switch (chatRoom) {\r\n            case 'ALL':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: 'ALL',\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: 'null',\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            case 'FACTION':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: playerFaction,\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: 'null',\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            case 'SQUAD':\r\n                msgObject = {\r\n                    message: message,\r\n                    faction: playerFaction,\r\n                    gameId: gameId,\r\n                    playerId: playerId,\r\n                    squadId: squadId,\r\n                    timestamp: time\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        sendMessage(msgObject);\r\n    }\r\n\r\n    async function sendMessage(msg) {\r\n        const response = await CreateMessage(msg);\r\n        if (response !== null) {\r\n            setRefresh(!refresh);\r\n        } else {\r\n            alert(\"Failed to send message! Failed to create.\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup >\r\n                <Button variant=\"dark\" onClick={selectChatRoom} value=\"ALL\" >Global</Button>\r\n                <Button variant=\"dark\" onClick={selectChatRoom} value=\"FACTION\">Faction</Button>\r\n                <Button variant=\"dark\" disabled={squadId === 'null'} onClick={selectChatRoom} value=\"SQUAD\">Squad</Button>\r\n            </ButtonGroup>\r\n            <br />\r\n            <ThemeProvider>\r\n                <ChatList >\r\n                    {chatMessages.map((chatMessage) =>\r\n                        <ChatListItem key={chatMessage.chatMessageId}>\r\n                            <Avatar imgUrl=\"https://livechat.s3.amazonaws.com/default/avatars/male_8.jpg\" />\r\n                            <Column fill>\r\n                                <Row justify>\r\n                                    <Title ellipsis>{chatMessage.username}</Title>\r\n                                    <Subtitle nowrap>{chatMessage.stringTimestamp}</Subtitle>\r\n                                </Row>\r\n                                <Subtitle >\r\n                                    {chatMessage.message}\r\n                                </Subtitle>\r\n                            </Column>\r\n                        </ChatListItem>\r\n                    )}\r\n                </ChatList>\r\n\r\n                <Form.Group>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter a message\" onChange={onMsgChanged} />\r\n                    <IconButton disabled={!validInput} onClick={prepareMessageObject}>\r\n                        <SendIcon />\r\n                    </IconButton>\r\n                </Form.Group>\r\n            </ThemeProvider>\r\n        </>\r\n    );\r\n};\r\nexport default ChatMessage;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\baseUrl.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\CreateMissionMarker.js",["246","247","248"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\HeaderOutside.js",["249","250"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.css';\r\nimport firebase from '../../utils/firebase'\r\nimport { clearUser } from \"../../utils/localstorage\";\r\n\r\nconst HeaderOutside = () => {\r\n\r\n    const handleSignOut = () => {\r\n        firebase.auth().signOut()\r\n        clearUser();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"headerContainer\">\r\n                <div id=\"logoContainer\">\r\n                    <img src=\"zombie_logo.jpg\" alt=\"zombie\" />\r\n                </div>\r\n\r\n                <div id=\"gameTitle\">Humans vs Zombies</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeaderOutside;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\GameMenu.js",["251","252","253","254"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\StylingComponents\\Modal.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Bite.js",["255","256","257"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\AdminComponents\\EditMissionMarker.js",["258","259","260"],"import { TextField } from \"@material-ui/core\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Header from '../StylingComponents/Header';\r\nimport NavBar from \"../StylingComponents/NavBar\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DeleteMission, UpdateMission, FetchMission } from '../../utils/missionStorage'\r\nimport MainMap from \"../MapComponents/MainMap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst EditMissionMarker = (props) => {\r\n\r\n    const [validMissionName, setValidMissionName] = useState(false);\r\n    const [deleteMission, setDeleteMission] = useState(false);\r\n    const [missionObject, setMissionObject] = useState(\r\n        {\r\n            missionId: null,\r\n            name: null,\r\n            faction: null,\r\n            missionState: null,\r\n            startTime: null,\r\n            endTime: null,\r\n            gameId: null\r\n        })\r\n    let markerLng = localStorage.getItem('Marker Lng: ')\r\n    let markerLat = localStorage.getItem('Marker Lat: ')\r\n\r\n    useEffect(() => {\r\n        loadMissionDetails();\r\n    }, []);\r\n\r\n    async function loadMissionDetails() {\r\n        const missionId = localStorage.getItem(\"Mission ID\");\r\n        if (missionId != null) {\r\n            const mission = await FetchMission(missionId);\r\n            setMissionObject({\r\n                missionId: mission.missionId,\r\n                name: mission.name,\r\n                faction: mission.faction,\r\n                missionState: mission.missionState,\r\n                startTime: mission.startTime,\r\n                endTime: mission.endTime,\r\n                gameId: mission.gameId\r\n            })\r\n        } else {\r\n            alert(\"Mission ID is null.\");\r\n        }\r\n    }\r\n\r\n    async function editMission() {\r\n        if (validMissionName === true) {\r\n            let updateMissionResponse = await UpdateMission(missionObject);\r\n            if (updateMissionResponse.status === 200) {\r\n                props.history.push(\"/missions\");\r\n            } else if (updateMissionResponse.status === 400) {\r\n                alert(\"Mission name must be unique!\");\r\n            } else {\r\n                alert(\"Something went wrong while creating the mission.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const onMissionNameChange = ev => {\r\n        let currentMissionName = ev.target.value;\r\n        if (currentMissionName.length < 4) {\r\n            setValidMissionName(false);\r\n        }\r\n        else {\r\n            setMissionObject((prevState) => ({\r\n                ...prevState,\r\n                name: currentMissionName\r\n            }));\r\n            setValidMissionName(true);\r\n        }\r\n        localStorage.setItem(\"Mission Name: \", ev.target.value)\r\n    }\r\n\r\n    const onStartTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            startTime: time\r\n        }));\r\n    }\r\n\r\n    const onEndTimeChange = ev => {\r\n        let time = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            endTime: time\r\n        }));\r\n    }\r\n\r\n    async function onDeteleClicked() {\r\n        let missionResponse = await DeleteMission(missionObject.missionId);\r\n        if (missionResponse === 200) {\r\n            props.history.push(\"/mission\");\r\n        } else {\r\n            console.log(\"Something went wrong when trying to delete the mission.\");\r\n        }\r\n    }\r\n\r\n    const onMissionStateChange = ev => {\r\n        let currentState = ev.target.value;\r\n        setMissionObject((prevState) => ({\r\n            ...prevState,\r\n            missionState: currentState\r\n        }));\r\n    }\r\n\r\n    const onCheckBoxChanged = ev => {\r\n        setDeleteMission(!deleteMission);\r\n    }\r\n\r\n    function getCoordinates() {\r\n        let lngValue = localStorage.getItem(\"Lng: \")\r\n        let latValue = localStorage.getItem(\"Lat: \")\r\n        let lng = document.getElementById('p-lng');\r\n        lng.value = lngValue;\r\n        let lat = document.getElementById('p-lat');\r\n        lat.value = latValue;\r\n    }\r\n\r\n    function getLng() {\r\n        let copyText = document.getElementById(\"p-lng\");\r\n\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n\r\n        document.execCommand(\"copy\");\r\n\r\n        alert(\"Copied the text: \" + copyText.value);\r\n    }\r\n\r\n    function getLat() {\r\n        let copyText = document.getElementById(\"p-lat\");\r\n\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n\r\n        document.execCommand(\"copy\");\r\n\r\n        alert(\"Copied the text: \" + copyText.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <NavBar />\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <h1>Edit Mission Marker</h1>\r\n                    <Form.Group>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter mission name\" onChange={onMissionNameChange} />\r\n                        <br />\r\n                        <Form.Control type=\"text\" placeholder=\"Coordinates\" />\r\n                        <br />\r\n                        <MainMap />\r\n                        <input id=\"p-lng\" />\r\n                        <button onClick={getLng}>Copy Lng</button>\r\n                        <input id=\"p-lat\" />\r\n                        <button onClick={getLat}>Copy Lat</button>\r\n                        <br></br>\r\n                        <button onClick={getCoordinates}>Get Coords</button>\r\n                        <br />\r\n                        <br />\r\n                        <Form.Control as=\"select\" placeholder=\"MissionState\" onChange={onMissionStateChange}>\r\n                            <option>PREPARATION</option>\r\n                            <option>IN_PROGRESS</option>\r\n                            <option>COMPLETED</option>\r\n                        </Form.Control>\r\n                        <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"Start time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-01T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onStartTimeChange}\r\n                        />\r\n                        <br />  <br />\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            label=\"End time\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue=\"2021-01-02T08:00\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onEndTimeChange}\r\n                        />\r\n                        <br />\r\n                        <br /><br />\r\n                        <Button disabled={!validMissionName} onClick={editMission}>Update Mission</Button>\r\n                        <Button disabled={!deleteMission} onClick={onDeteleClicked}>Delete Mission</Button>\r\n                        <Form.Group controlId=\"deleteMissionCheckbox\">\r\n                            <Form.Check type=\"checkbox\" label=\"Delete Mission?\" onChange={onCheckBoxChanged} />\r\n                        </Form.Group>\r\n                    </Form.Group>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditMissionMarker;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\PlayerStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\SquadMemberStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\GameStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\missionStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\Missions.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\ChatMessageComponents\\Chat.js",["261","262","263"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../StylingComponents/Header\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst Chat = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <section className=\"home\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    <ChatMessage />\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;","C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\ChatMessageStorage.js",[],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\utils\\markerStorage.js",[],["264","265"],"C:\\Users\\pcvags\\Desktop\\noticeboard\\Humans-vs-zombies\\frontend\\src\\components\\GameComponents\\GameMap.js",[],{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","severity":1,"message":"271","line":3,"column":42,"nodeType":"272","messageId":"273","endLine":3,"endColumn":48},{"ruleId":"270","severity":1,"message":"274","line":2,"column":10,"nodeType":"272","messageId":"273","endLine":2,"endColumn":18},{"ruleId":"270","severity":1,"message":"275","line":3,"column":8,"nodeType":"272","messageId":"273","endLine":3,"endColumn":16},{"ruleId":"270","severity":1,"message":"276","line":18,"column":13,"nodeType":"272","messageId":"273","endLine":18,"endColumn":24},{"ruleId":"270","severity":1,"message":"277","line":10,"column":7,"nodeType":"272","messageId":"273","endLine":10,"endColumn":16},{"ruleId":"270","severity":1,"message":"278","line":5,"column":8,"nodeType":"272","messageId":"273","endLine":5,"endColumn":14},{"ruleId":"270","severity":1,"message":"277","line":10,"column":7,"nodeType":"272","messageId":"273","endLine":10,"endColumn":16},{"ruleId":"270","severity":1,"message":"279","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":26},{"ruleId":"280","severity":1,"message":"281","line":13,"column":8,"nodeType":"282","endLine":13,"endColumn":10,"suggestions":"283"},{"ruleId":"270","severity":1,"message":"284","line":2,"column":10,"nodeType":"272","messageId":"273","endLine":2,"endColumn":14},{"ruleId":"270","severity":1,"message":"278","line":4,"column":8,"nodeType":"272","messageId":"273","endLine":4,"endColumn":14},{"ruleId":"270","severity":1,"message":"285","line":5,"column":8,"nodeType":"272","messageId":"273","endLine":5,"endColumn":19},{"ruleId":"270","severity":1,"message":"286","line":6,"column":8,"nodeType":"272","messageId":"273","endLine":6,"endColumn":16},{"ruleId":"270","severity":1,"message":"279","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":26},{"ruleId":"270","severity":1,"message":"287","line":3,"column":8,"nodeType":"272","messageId":"273","endLine":3,"endColumn":16},{"ruleId":"270","severity":1,"message":"278","line":5,"column":8,"nodeType":"272","messageId":"273","endLine":5,"endColumn":14},{"ruleId":"270","severity":1,"message":"288","line":11,"column":9,"nodeType":"272","messageId":"273","endLine":11,"endColumn":17},{"ruleId":"280","severity":1,"message":"289","line":19,"column":8,"nodeType":"282","endLine":19,"endColumn":10,"suggestions":"290"},{"ruleId":"280","severity":1,"message":"291","line":65,"column":8,"nodeType":"282","endLine":65,"endColumn":10,"suggestions":"292"},{"ruleId":"280","severity":1,"message":"281","line":83,"column":8,"nodeType":"282","endLine":83,"endColumn":10,"suggestions":"293"},{"ruleId":"294","severity":1,"message":"295","line":34,"column":26,"nodeType":"296","messageId":"297","endLine":34,"endColumn":28},{"ruleId":"270","severity":1,"message":"298","line":73,"column":11,"nodeType":"272","messageId":"273","endLine":73,"endColumn":26},{"ruleId":"270","severity":1,"message":"279","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":26},{"ruleId":"270","severity":1,"message":"278","line":5,"column":8,"nodeType":"272","messageId":"273","endLine":5,"endColumn":14},{"ruleId":"280","severity":1,"message":"281","line":20,"column":8,"nodeType":"282","endLine":20,"endColumn":10,"suggestions":"299"},{"ruleId":"270","severity":1,"message":"279","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":26},{"ruleId":"270","severity":1,"message":"287","line":4,"column":8,"nodeType":"272","messageId":"273","endLine":4,"endColumn":16},{"ruleId":"270","severity":1,"message":"278","line":6,"column":8,"nodeType":"272","messageId":"273","endLine":6,"endColumn":14},{"ruleId":"280","severity":1,"message":"300","line":20,"column":8,"nodeType":"282","endLine":20,"endColumn":10,"suggestions":"301"},{"ruleId":"280","severity":1,"message":"281","line":38,"column":8,"nodeType":"282","endLine":38,"endColumn":10,"suggestions":"302"},{"ruleId":"280","severity":1,"message":"303","line":50,"column":8,"nodeType":"282","endLine":50,"endColumn":10,"suggestions":"304"},{"ruleId":"270","severity":1,"message":"284","line":2,"column":10,"nodeType":"272","messageId":"273","endLine":2,"endColumn":14},{"ruleId":"270","severity":1,"message":"277","line":8,"column":7,"nodeType":"272","messageId":"273","endLine":8,"endColumn":16},{"ruleId":"280","severity":1,"message":"305","line":76,"column":8,"nodeType":"282","endLine":76,"endColumn":10,"suggestions":"306"},{"ruleId":"280","severity":1,"message":"307","line":80,"column":8,"nodeType":"282","endLine":80,"endColumn":17,"suggestions":"308"},{"ruleId":"270","severity":1,"message":"277","line":11,"column":7,"nodeType":"272","messageId":"273","endLine":11,"endColumn":16},{"ruleId":"270","severity":1,"message":"309","line":27,"column":10,"nodeType":"272","messageId":"273","endLine":27,"endColumn":23},{"ruleId":"280","severity":1,"message":"281","line":31,"column":6,"nodeType":"282","endLine":31,"endColumn":8,"suggestions":"310"},{"ruleId":"270","severity":1,"message":"284","line":2,"column":10,"nodeType":"272","messageId":"273","endLine":2,"endColumn":14},{"ruleId":"270","severity":1,"message":"311","line":9,"column":11,"nodeType":"272","messageId":"273","endLine":9,"endColumn":24},{"ruleId":"270","severity":1,"message":"279","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":26},{"ruleId":"270","severity":1,"message":"312","line":8,"column":7,"nodeType":"272","messageId":"273","endLine":8,"endColumn":28},{"ruleId":"270","severity":1,"message":"309","line":28,"column":12,"nodeType":"272","messageId":"273","endLine":28,"endColumn":25},{"ruleId":"280","severity":1,"message":"281","line":32,"column":8,"nodeType":"282","endLine":32,"endColumn":10,"suggestions":"313"},{"ruleId":"270","severity":1,"message":"279","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":26},{"ruleId":"280","severity":1,"message":"281","line":18,"column":8,"nodeType":"282","endLine":18,"endColumn":10,"suggestions":"314"},{"ruleId":"280","severity":1,"message":"315","line":82,"column":8,"nodeType":"282","endLine":82,"endColumn":10,"suggestions":"316"},{"ruleId":"270","severity":1,"message":"277","line":10,"column":7,"nodeType":"272","messageId":"273","endLine":10,"endColumn":16},{"ruleId":"270","severity":1,"message":"317","line":36,"column":9,"nodeType":"272","messageId":"273","endLine":36,"endColumn":18},{"ruleId":"270","severity":1,"message":"318","line":37,"column":9,"nodeType":"272","messageId":"273","endLine":37,"endColumn":18},{"ruleId":"270","severity":1,"message":"319","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":26},{"ruleId":"270","severity":1,"message":"320","line":1,"column":28,"nodeType":"272","messageId":"273","endLine":1,"endColumn":36},{"ruleId":"270","severity":1,"message":"277","line":7,"column":7,"nodeType":"272","messageId":"273","endLine":7,"endColumn":16},{"ruleId":"266","replacedBy":"321"},{"ruleId":"268","replacedBy":"322"},"no-native-reassign",["323"],"no-negated-in-lhs",["324"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'firebase' is defined but never used.","'currentUser' is assigned a value but never used.","'useStyles' is assigned a value but never used.","'NavBar' is defined but never used.","'Component' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCurrentPlayer'. Either include it or remove the dependency array.","ArrayExpression",["325"],"'Link' is defined but never used.","'ChatMessage' is defined but never used.","'MenuTest' is defined but never used.","'GameMenu' is defined but never used.","'playerId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSquadMembers'. Either include it or remove the dependency array.",["326"],"React Hook useEffect has a missing dependency: 'fetchSquad'. Either include it or remove the dependency array.",["327"],["328"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'currentPosition' is assigned a value but never used.",["329"],"React Hook useEffect has a missing dependency: 'fetchSquads'. Either include it or remove the dependency array.",["330"],["331"],"React Hook useEffect has a missing dependency: 'fetchSquadMember'. Either include it or remove the dependency array.",["332"],"React Hook useEffect has missing dependencies: 'chatRoom', 'fetchMessages', 'gameId', 'playerFaction', 'playerId', 'props.history', and 'userId'. Either include them or remove the dependency array.",["333"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["334"],"'currentPlayer' is assigned a value but never used.",["335"],"'handleSignOut' is assigned a value but never used.","'BUTTON_WRAPPER_STYLES' is assigned a value but never used.",["336"],["337"],"React Hook useEffect has a missing dependency: 'fetchCurrentVictimSquadMember'. Either include it or remove the dependency array.",["338"],"'markerLng' is assigned a value but never used.","'markerLat' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",["323"],["324"],"no-global-assign","no-unsafe-negation",{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"339","fix":"345"},{"desc":"339","fix":"346"},{"desc":"347","fix":"348"},{"desc":"339","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"339","fix":"356"},{"desc":"339","fix":"357"},{"desc":"339","fix":"358"},{"desc":"359","fix":"360"},"Update the dependencies array to be: [fetchCurrentPlayer]",{"range":"361","text":"362"},"Update the dependencies array to be: [fetchSquadMembers]",{"range":"363","text":"364"},"Update the dependencies array to be: [fetchSquad]",{"range":"365","text":"366"},{"range":"367","text":"362"},{"range":"368","text":"362"},"Update the dependencies array to be: [fetchSquads]",{"range":"369","text":"370"},{"range":"371","text":"362"},"Update the dependencies array to be: [fetchSquadMember]",{"range":"372","text":"373"},"Update the dependencies array to be: [chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",{"range":"374","text":"375"},"Update the dependencies array to be: [fetchMessages, refresh]",{"range":"376","text":"377"},{"range":"378","text":"362"},{"range":"379","text":"362"},{"range":"380","text":"362"},"Update the dependencies array to be: [fetchCurrentVictimSquadMember]",{"range":"381","text":"382"},[383,385],"[fetchCurrentPlayer]",[787,789],"[fetchSquadMembers]",[2453,2455],"[fetchSquad]",[2880,2882],[759,761],[837,839],"[fetchSquads]",[1293,1295],[1624,1626],"[fetchSquadMember]",[2998,3000],"[chatRoom, fetchMessages, gameId, playerFaction, playerId, props.history, userId]",[3062,3071],"[fetchMessages, refresh]",[944,946],[876,878],[636,638],[3145,3147],"[fetchCurrentVictimSquadMember]"]